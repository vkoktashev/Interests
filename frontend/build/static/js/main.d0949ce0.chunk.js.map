{"version":3,"sources":["components/HomePage.js","store/reducers.js","settings.js","services/jwtAuth.js","services/requests.js","store/actions.js","store/actionTypes.js","components/Common/StatusButtonGroup.js","components/Common/FriendsActivityRow.js","components/Common/FriendsActivity.js","components/GamePage/GamePage.js","components/MoviePage/MoviePage.js","components/SearchPage/CardGame.js","components/SearchPage/CardMovie.js","components/Common/CardUser.js","components/Common/CategoriesTab.js","components/SearchPage/SearchPage.js","components/LoginForm.js","components/RegistrationForm.js","components/ConfirmPage.js","components/UserPage/GameBlock.js","components/UserPage/FriendBlock.js","components/UserPage/MovieBlock.js","components/UserPage/LogRow.js","components/UserPage/UserLogBlock.js","components/UserPage/UserPage.js","components/Navbar.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","initialState","Map","auth","loggedIn","user","username","email","id","content","game","main_info","rawg","name","background_image","background_image_additional","developers","hltb","game_image_url","user_info","status","review","score","spent_time","friends_info","movie","tmdb","title","poster_path","searchContent","games","movies","users","userPageContent","stats","userLogs","log","userFriendsLogs","openedPages","LoginForm","RegistrateForm","errors","registrate","gameRequest","movieRequest","userPage","isLoading","contentGame","contentMovie","searchGames","searchMovies","searchUsers","userPageLogs","userPageFriendsLogs","contentGameFriends","contentMovieFriends","getLoggedIn","state","get","getUser","getContentGame","getContentGameFriends","getContentMovie","getContentMovieFriends","getSearchContentGames","getSearchContentMovies","getSearchContentUsers","getAuthError","getRegistrateError","getGameRequestError","getLoginForm","getRegistrateForm","getIsLoadingContentGame","getIsLoadingContentGameFriends","getIsLoadingContentMovie","getIsLoadingContentMovieFriends","getIsLoadingSearchGames","getIsLoadingSearchMovies","getIsLoadingSearchUsers","getIsLoadingUserPageContent","getIsLoadingUserPageLogs","getIsLoadingUserPageFriendsLogs","getUserPageContent","getUserPageLogs","getUserPageFriendsLogs","BACKEND_URL","GET_TOKEN_URL","REFRESH_TOKEN_URL","REGISTRATE_URL","CONFIRM_URL","GET_GAME_URL","GET_MOVIE_URL","USER_INFO_URL","axiosConfig","headers","getToken","password","a","axios","post","res","userData","jwt_decode","data","access","user_id","token","refreshToken","refresh","console","updateToken","registration","response","confirmation","uid64","patch","getGame","AuthStr","getMovie","setGameStatus","gameSlug","put","setMovieStatus","query","page","gamesCount","params","getUserInfo","userID","setUserStatus","is_following","getUserLog","resultsOnPage","page_size","getUserFriendsLog","getGameFriends","slug","getMovieFriends","checkAuthorization","dispatch","localStorage","getItem","Date","now","type","setItem","resetAuthorization","removeItem","setLoading","setError","isError","error","defaults","common","StatusButtonGroup","statuses","activeColor","onChangeStatus","userStatus","useState","activeStatus","setActiveStatus","useEffect","map","className","key","style","backgroundColor","onClick","FriendsActivityRow","number","info","history","useHistory","href","window","location","origin","e","push","preventDefault","stop","emptySymbol","far","icon","size","fullSymbol","n","initialRating","readonly","hidden","FriendsActivity","friendInfo","updated_at","connect","selectors","requestError","gameIsLoading","gameFriends","gameFriendsIsLoading","requestGame","Requests","then","result","toast","actions","requestGameFriends","openLoginForm","isOpen","getState","useParams","genres","setGenres","metascoreBlock","setMetascoreBlock","setReview","spentTime","setSpentTime","setDevelopers","date","setDate","gameplay_main_extra","gameplay_main","gameplay_comletionist","hltbInfo","setHtlbInfo","newGenres","i","length","metacritic","playtime","gameplay_completionist","newDevelopers","released","mas","split","newDate","document","backgroundImage","active","spinner","text","md","src","alt","marginBottom","display","gameplay_main_unit","gameplay_main_extra_unit","gameplay_completionist_unit","fontSize","onChange","marginTop","paddingTop","dangerouslySetInnerHTML","__html","description","paddingLeft","label","value","event","target","outline","disabled","getElementById","movieIsLoading","movieFriends","movieFriendsIsLoading","requestMovie","requestMovieFriends","companies","setCompanies","cast","setCast","director","setDirector","vote_average","production_companies","newCompanies","newCast","crew","newDirector","job","backdrop_path","release_date","runtime","tagline","overview","CardGame","setName","newName","substr","CardMovie","CardUser","CategoriesTab","categories","onChangeCategory","activeCategory","setActiveCategory","category","color","height","gamesIsLoading","moviesIsLoading","usersIsLoading","searchGame","searchMovie","results","queryText","setQueryText","gamesCards","setGamesCards","moviesCards","setMoviesCards","usersCards","setUsersCards","onSubmit","placeholder","aria-label","authError","closeForm","logIn","login","toggle","centered","htmlFor","registrateArror","confirmEmailRequest","success","search","URLSearchParams","GameBlock","gameColumns","field","sort","columns","rows","gameTableData","setGameTableData","rawg_slug","rawg_name","name2","games_count","games_total_spent_time","striped","bordered","small","barReverse","noBottomColumns","noRecordsFoundLabel","paginationLabel","entriesLabel","searchLabel","FriendBlock","MovieBlock","movieColumns","movieTableData","setMovieTableData","tmdb_id","tmdb_name","movies_count","movies_total_spent_time","LogRow","showUsername","created","toLocaleTimeString","action","actionResult","translateActionType","action_type","action_result","actionType","translateType","nameToLink","target_id","actionResultToStr","UserLogBlock","logs","onChangePage","logsByDay","setLogsByDay","currentPage","setCurrentPage","newLogs","getDay","groupLogsByDay","dayLog","toLocaleDateString","has_next_page","userIsLoading","userInfo","userLogsIsLoading","userFriendsLogsIsLoading","currentUserInfo","getUserLogs","getUserFriendsLogs","is_followed","pageNumber","followed_users","onLoginClick","onLogoutClick","onRegistrationClick","dark","expand","fixed","left","right","to","nav","caret","Routes","exact","path","component","GamePage","MoviePage","SearchPage","ConfirmPage","UserPage","render","position","hideProgressBar","newestOnTop","closeOnClick","React","Component","onLoad","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","setIn","applyMiddleware","thunk","ReactDOM","URL","process","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d0949ce0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction HomePage () \r\n{\r\n    return (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Страница ещё не готова</h1>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nexport default HomePage;","import * as types from './actionTypes';\r\nimport { Map } from 'immutable';\r\n\r\n// Создаем reducer с начальным состоянием.\r\nconst initialState = Map(\r\n    {\r\n        auth: { loggedIn: false },\r\n        user: { username:\"\", email:\"\", id: null },\r\n        content: { \r\n            game: {\r\n                main_info:{\r\n                    rawg: {\r\n                        name: \"\",\r\n                        background_image: \"\",\r\n                        background_image_additional: \"\",\r\n                        developers: [{}],\r\n                    },\r\n                    hltb:{\r\n                        game_image_url: \"\"\r\n                    },\r\n                    user_info:{\r\n                        status: null,\r\n                        review: \"\",\r\n                        score: 0,\r\n                        spent_time: 0\r\n                    }\r\n                },\r\n                friends_info: {\r\n                    friends_info: []\r\n                }\r\n            },\r\n            movie: {\r\n                main_info:{\r\n                    tmdb: {\r\n                        title: \"\",\r\n                        poster_path: \"\",\r\n                        developers: [{}],\r\n                    },\r\n                    user_info:{\r\n                        status: null,\r\n                        review: \"\",\r\n                        score: 0,\r\n                        spent_time: 0\r\n                    }\r\n                },\r\n                friends_info: {\r\n                    friends_info: []\r\n                }\r\n            } \r\n        },\r\n        searchContent: {\r\n            games: [],\r\n            movies: [],\r\n            users: []\r\n        },\r\n        userPageContent: {\r\n            user: {\r\n                stats: {}\r\n            },\r\n            userLogs: {log: []},\r\n            userFriendsLogs: {log: []},\r\n        },\r\n        openedPages: { LoginForm: false, RegistrateForm: false },\r\n        errors: {auth: false, registrate: false, gameRequest: false, movieRequest: false, userPage: false },\r\n        isLoading: {contentGame: false, contentMovie: false, searchGames: false, searchMovies: false, userPageContent: false, searchUsers: false, userPageLogs: false, userPageFriendsLogs: false, contentGameFriends: false, contentMovieFriends: false}\r\n    }\r\n);\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    //Редьюсеры пользовательской информации\r\n    case types.SET_USER: return state.setIn(['user'], action.user);\r\n    case types.SET_AUTH: return state.setIn(['auth'], action.auth);\r\n\r\n    //Редьюсеры информации об игре\r\n    case types.SET_CONTENT_GAME: return state.setIn(['content', 'game', 'main_info'], action.game);\r\n    case types.SET_CONTENT_GAME_FRIENDS: return state.setIn(['content', 'game', 'friends_info'], action.info);\r\n    case types.SET_CONTENT_GAME_USERINFO: return state.setIn(['content', 'game', 'main_info','user_info'], action.user_info);\r\n\r\n    //Редьюсеры информации о фильме\r\n    case types.SET_CONTENT_MOVIE: return state.setIn(['content', 'movie', 'main_info'], action.movie);\r\n    case types.SET_CONTENT_MOVIE_FRIENDS: return state.setIn(['content', 'movie', 'friends_info'], action.info);\r\n    case types.SET_CONTENT_MOVIE_USERINFO: return state.setIn(['content', 'movie', 'main_info', 'user_info'], action.user_info);\r\n\r\n    //Редьюсеры результатов поиска\r\n    case types.SET_SEARCH_CONTENT_GAMES: return state.setIn(['searchContent', 'games'], action.games);\r\n    case types.SET_SEARCH_CONTENT_MOVIES: return state.setIn(['searchContent', 'movies'], action.movies);\r\n    case types.SET_SEARCH_CONTENT_USERS: return state.setIn(['searchContent', 'users'], action.users);\r\n\r\n    //Редьюсеры страницы профиля\r\n    case types.SET_USER_PAGE_CONTENT: return state.setIn(['userPageContent', 'user'], action.content);\r\n    case types.SET_USER_PAGE_FOLLOWING: return state.setIn(['userPageContent', 'user', 'is_followed'], action.is_following);\r\n    case types.SET_USER_PAGE_LOGs:  return state.setIn(['userPageContent', 'userLogs'], action.logs);\r\n    case types.SET_USER_PAGE_FRIENDS_LOGS: return state.setIn(['userPageContent', 'userFriendsLogs'], action.logs);\r\n\r\n    //Редьюсеры состояния всплывающих окон\r\n    case types.SET_LOGINFORM:  return state.setIn(['openedPages', 'LoginForm'], action.isOpen);\r\n    case types.SET_REGISTRATEFORM:  return state.setIn(['openedPages', 'RegistrateForm'], action.isOpen);\r\n\r\n    //Редьюсеры ошибок\r\n    case types.AUTH_ERROR:  return state.setIn(['errors', 'auth'], action.error);\r\n    case types.REGISTRATE_ERROR:  return state.setIn(['errors', 'registrate'], action.error);\r\n    case types.GAME_REQUEST_ERROR: return state.setIn(['errors', 'gameRequest'], action.error);\r\n    case types.MOVIE_REQUEST_ERROR:  return state.setIn(['errors', 'movieRequest'], action.error);\r\n    case types.USER_PAGE_ERROR: return state.setIn(['errors', 'userPage'], action.error);\r\n\r\n    //Редьюсеры состояния загрузки\r\n    case types.SET_IS_LOADING_CONTENT_GAME:  return state.setIn(['isLoading', 'contentGame'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_GAME_FRIENDS:  return state.setIn(['isLoading', 'contentGameFriends'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_MOVIE:  return state.setIn(['isLoading', 'contentMovie'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_MOVIE_FRIENDS:  return state.setIn(['isLoading', 'contentMovieFriends'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_GAMES:  return state.setIn(['isLoading', 'searchGames'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_MOVIES:  return state.setIn(['isLoading', 'searchMovies'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_CONTENT:  return state.setIn(['isLoading', 'userPageContent'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_LOGS: return state.setIn(['isLoading', 'userPageLogs'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS:  return state.setIn(['isLoading', 'userPageFriendsLogs'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_USERS: return state.setIn(['isLoading', 'searchUsers'], action.isLoading);\r\n\r\n    default: return state;\r\n  }\r\n}\r\n\r\n//Селекторы пользовательской информации\r\nexport function getLoggedIn(state) { return state.get('auth').loggedIn; }\r\nexport function getAuth(state) { return state.get('auth');}\r\nexport function getUser(state) {  return state.get('user'); }\r\n\r\n//Селекторы информации о контенте\r\nexport function getContentGame(state) {  return state.get('content').game.main_info; }\r\nexport function getContentGameFriends(state) {  return state.get('content').game.friends_info; }\r\nexport function getContentMovie(state) { return state.get('content').movie.main_info; }\r\nexport function getContentMovieFriends(state) {  return state.get('content').movie.friends_info; }\r\n\r\n//Селекторы поисковых результатов\r\nexport function getSearchContentGames(state) { return state.get('searchContent').games;}\r\nexport function getSearchContentMovies(state) { return state.get('searchContent').movies; }\r\nexport function getSearchContentUsers(state) { return state.get('searchContent').users; }\r\n\r\n//Селекторы ошибок\r\nexport function getAuthError(state) { return state.get('errors').auth; }\r\nexport function getRegistrateError(state) { return state.get('errors').registrate; }\r\nexport function getGameRequestError(state) {  return state.get('errors').gameRequest; }\r\nexport function getMovieRequestError(state) { return state.get('errors').movieRequest; }\r\nexport function getUserPageError(state) {  return state.get('errors').userPage;}\r\n\r\n//Селекторы состояния высплывающих окон\r\nexport function getLoginForm(state) { return state.get('openedPages').LoginForm; }\r\nexport function getRegistrateForm (state) { return state.get('openedPages').RegistrateForm; }\r\n\r\n//Селекторы состояния загрузки\r\nexport function getIsLoadingContentGame(state) { return state.get('isLoading').contentGame; }\r\nexport function getIsLoadingContentGameFriends(state) { return state.get('isLoading').contentGameFriends; }\r\nexport function getIsLoadingContentMovie(state) {  return state.get('isLoading').contentMovie; }\r\nexport function getIsLoadingContentMovieFriends(state) { return state.get('isLoading').contentMovieFriends; }\r\nexport function getIsLoadingSearchGames(state) { return state.get('isLoading').searchGames; }\r\nexport function getIsLoadingSearchMovies(state) { return state.get('isLoading').searchMovies; }\r\nexport function getIsLoadingSearchUsers(state) { return state.get('isLoading').searchUsers;}\r\nexport function getIsLoadingSearchAll(state) { return (state.get('isLoading').searchUsers || state.get('isLoading').searchMovies || state.get('isLoading').searchGames); }\r\nexport function getIsLoadingUserPageContent(state) { return state.get('isLoading').userPageContent; }\r\nexport function getIsLoadingUserPageLogs(state) { return state.get('isLoading').userPageLogs; }\r\nexport function getIsLoadingUserPageFriendsLogs(state) { return state.get('isLoading').userPageFriendsLogs; }\r\n\r\n//Селекторы страницы профиля\r\nexport function getUserPageContent(state){  return state.get('userPageContent').user; }\r\nexport function getUserPageLogs(state){ return state.get('userPageContent').userLogs; }\r\nexport function getUserPageFriendsLogs(state){  return state.get('userPageContent').userFriendsLogs; }","/** Время жизни токена в миллисекундах, после истечения которого будет запрошен новый токен*/\r\nexport const TOKEN_LIFETIME = 86000000; \r\n/**Адрес сервера*/\r\nexport const BACKEND_URL = \"http://35.193.124.214:8001/\";\r\n/**Адрес получения токена */\r\nexport const GET_TOKEN_URL = BACKEND_URL + \"users/auth/login/\"; \r\n/**Адрес обновления токена */\r\nexport const REFRESH_TOKEN_URL = BACKEND_URL + \"users/auth/refresh-token/\";\r\n/**Адрес регистрации */\r\nexport const REGISTRATE_URL = BACKEND_URL + \"users/auth/signup/\";\r\n/**Адрес подтверждения почты */\r\nexport const CONFIRM_URL = BACKEND_URL + \"users/auth/confirmation/\";\r\n/**Адрес запроса игры */\r\nexport const GET_GAME_URL = BACKEND_URL + \"games/game/\";\r\n/**Адрес поиска игр */\r\nexport const SEARCH_GAMES_URL = BACKEND_URL + \"games/search/\";\r\n/**Адрес запроса фильма */\r\nexport const GET_MOVIE_URL = BACKEND_URL + \"movies/movie/\";\r\n/**Адрес поиска фильмов */\r\nexport const SEARCH_MOVIES_URL = BACKEND_URL + \"movies/search/\";\r\n/**Адрес получения информации о пользователе */\r\nexport const USER_INFO_URL = BACKEND_URL + \"users/user/\";\r\n/**Адрес поиска пользователей */\r\nexport const SEARCH_USERS_URL = BACKEND_URL + \"users/search/\"; \r\n","import axios from \"axios\";\r\nimport jwt_decode from 'jwt-decode';\r\nimport {GET_TOKEN_URL, REFRESH_TOKEN_URL, REGISTRATE_URL, CONFIRM_URL} from '../settings';\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\n/**\r\n * ПОлучение токена авторизации. Токен сохраняется в localStorage\r\n * @param {string} username Имя пользователя\r\n * @param {string} password Пароль \r\n */\r\nexport async function getToken(username, password){\r\n    try{\r\n        const res = await axios.post(GET_TOKEN_URL, {\r\n                    username: username,\r\n                    password: password \r\n                }, axiosConfig);\r\n\r\n        let userData = jwt_decode(res.data.access);\r\n        let user = {username: userData.username, id: userData.user_id, email: userData.email}\r\n\r\n        return {token: res.data.access, refreshToken: res.data.refresh, user: user};\r\n    }catch(e){\r\n        console.log(\"axios error: \" + e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Функция обновления токена\r\n */\r\nexport async function updateToken(refreshToken){\r\n    if (typeof refreshToken !== 'undefined' & refreshToken != null)\r\n        try{\r\n            const res = await axios.post(REFRESH_TOKEN_URL, {\r\n                        refresh: refreshToken\r\n                    }, axiosConfig);\r\n                    \r\n            let userData = jwt_decode(res.data.access);\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n\r\n            return {token: res.data.access, user: user};\r\n        }catch(e){\r\n            console.log(\"exios error: \" + e);\r\n            return null;\r\n        }\r\n    return null;\r\n}\r\n\r\nexport async function registration(username, email, password) {\r\n   try{\r\n        const res = await axios.post(REGISTRATE_URL, \r\n            {  username: username,\r\n                email: email, \r\n                password: password \r\n            }, axiosConfig);\r\n        let data = res.data;\t\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e.response);\r\n        return e.response;\r\n    }\r\n}\r\n\r\nexport async function confirmation(uid64, token) {\r\n    try{\r\n        console.log(uid64);\r\n        console.log(token);\r\n        const res = await axios.patch(CONFIRM_URL, \r\n             {  \r\n                uid64: uid64,\r\n                token: token\r\n             }, \r\n             axiosConfig);\r\n        let data = res.data;\t\r\n        return data;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }\r\n","import axios from \"axios\";\r\nimport {GET_GAME_URL, SEARCH_GAMES_URL, USER_INFO_URL, SEARCH_MOVIES_URL, GET_MOVIE_URL, SEARCH_USERS_URL} from \"../settings\";\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\naxios.defaults.headers.common = {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getGame(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о фильме\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID фильма  \r\n * @returns {object} Информация о фильме\r\n */\r\nexport async function getMovie(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса игры\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус игры\r\n * @param {string} gameSlug Слаг игры\r\n */\r\nexport async function setGameStatus(token, gameSlug, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n\r\n        const res = await axios.put(GET_GAME_URL + gameSlug + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса фильма\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус фильма\r\n * @param {string} movieID ID фильма\r\n */\r\nexport async function setMovieStatus(token, id, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        console.log(user_info);\r\n        const res = await axios.put(GET_MOVIE_URL + id + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск игр\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchGames(query, page, gamesCount){\r\n    try{\r\n        const res = await axios.get(SEARCH_GAMES_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск фильмов\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchMovies(query, page){\r\n    try{\r\n        const res = await axios.get(SEARCH_MOVIES_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n            console.log(res);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск пользователей\r\n * @param {string} query Поисковый запрос\r\n */\r\nexport async function searchUsers(query){\r\n    try{\r\n        const res = await axios.get(SEARCH_USERS_URL, { params : {query: query} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n            console.log(res);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getUserInfo(token, userID) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса пользовтеля (добавить в друзья и тд)\r\n * @param {string} token Токен доступа\r\n * @param {boolean} is_following Статус фильма\r\n * @param {string} userID ID пользовтеля\r\n */\r\nexport async function setUserStatus(token, is_following, userID){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(USER_INFO_URL + userID + \"/follow/\", \r\n            is_following, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий лог пользователя\r\n * @param {string} userID ID пользователя\r\n * @param {string} page страница \r\n * @param {int} resultsOnPage количество результатов на странице \r\n */\r\nexport async function getUserLog(token, userID, page, resultsOnPage) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/log/\", { params : { page: page, page_size: resultsOnPage } }, { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/log/\", { params : { page: page, page_size: resultsOnPage } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий лог друзей пользователя\r\n * @param {string} userID ID пользователя\r\n * @param {int} page страница\r\n * @param {int} resultsOnPage количество результатов на странице \r\n */\r\nexport async function getUserFriendsLog(token, userID, page, resultsOnPage) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/friends_log/\", { params : { page: page, page_size: resultsOnPage }, 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/friends_log/\", { params : { page: page, page_size: resultsOnPage } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для игры\r\n * @param {string} slug slug игры\r\n * @param {int} page страница\r\n */\r\nexport async function getGameFriends(token, slug, page) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_GAME_URL + slug + \"/friends_info/\", { params : { page: page } , 'headers': { 'Authorization': AuthStr } });\r\n            console.log(res);\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_GAME_URL + slug + \"/friends_info/\", { params : { page: page } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для фильма\r\n * @param {string} id id фильма\r\n * @param {int} page страница\r\n */\r\nexport async function getMovieFriends(token, id, page) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/friends_info/\", { params : { page: page } , 'headers': { 'Authorization': AuthStr } });\r\n            console.log(res);\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/friends_info/\", { params : { page: page } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}","import * as actionTypes from './actionTypes';\r\nimport * as selectors from './reducers';\r\nimport {getToken, updateToken, registration, confirmation} from \"../services/jwtAuth\";\r\nimport {TOKEN_LIFETIME} from \"../settings\";\r\nimport * as Requests from \"../services/requests\";\r\nimport { toast } from \"react-toastify\";\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nexport function tryAuth(login, password) {\r\n    return async(dispatch) => {\r\n        \r\n        setError(dispatch, actionTypes.AUTH_ERROR, false);\r\n\r\n      try {\r\n        const res = await getToken(login, password);\r\n        if (res !== null){\r\n            localStorage.setItem('refreshToken', res.refreshToken);\r\n            localStorage.setItem('token', res.token);\r\n            localStorage.setItem('tokenTime', Date.now());\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: res.user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_LOGINFORM,\r\n                isOpen: false \r\n            });\r\n        }else{\r\n            setError(dispatch, actionTypes.AUTH_ERROR, true);\r\n        }\r\n            \r\n      }catch (error) {\r\n        console.error(error);\r\n        setError(dispatch, actionTypes.AUTH_ERROR, true);\r\n      }\r\n    };\r\n}\r\n\r\nexport function checkAuthorization(){\r\n    return async(dispatch) => {\r\n        if (localStorage.getItem('token') === null | Date.now() - localStorage.getItem('tokenTime') > TOKEN_LIFETIME){\r\n            const res = await updateToken(localStorage.getItem(\"refreshToken\"));\r\n            if (res !== null){\r\n                dispatch({\r\n                    type: actionTypes.SET_AUTH,\r\n                    auth: { loggedIn: true }, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: res.user, \r\n                });\r\n                localStorage.setItem('token', res.token);\r\n                localStorage.setItem('tokenTime', Date.now());\r\n                return true;\r\n            }else{\r\n                //toast.warn(\"Произошла ошибка авторизации. Зайдите ещё раз\");\r\n                dispatch(resetAuthorization());\r\n                return false;\r\n            } \r\n        }else{\r\n            let userData = jwt_decode(localStorage.getItem('token'));\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            return true;\r\n        }\r\n            \r\n    }\r\n}\r\n\r\nexport function resetAuthorization(){\r\n    return async(dispatch) => {\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('tokenTime');\r\n        dispatch({\r\n            type: actionTypes.SET_AUTH,\r\n            auth: { loggedIn: false }, \r\n        });\r\n        dispatch({\r\n            type: actionTypes.SET_USER,\r\n            user: { username:\"\", id: null, email:\"\" }, \r\n        });\r\n    }\r\n}\r\n\r\nexport function registrationRequest(username, email, password){\r\n    return async(dispatch) => {\r\n        setError(dispatch, actionTypes.REGISTRATE_ERROR, false);\r\n        registration(username, email, password).then((result) => {\r\n            console.log(result);\r\n            if (result.status !== 400){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: { login: result.username, email: result.email }, \r\n                });\r\n            }\r\n            else{\r\n                for (let error in result.data)\r\n                    toast.error(result.data[error][0]);\r\n                \r\n                setError(dispatch, actionTypes.REGISTRATE_ERROR, true);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function confirmEmailRequest(uid64, token){\r\n    return async() => {\r\n        confirmation(uid64, token).then((result) => {\r\n            console.log(result);\r\n            if (result.status !== 400){\r\n                toast.success(\"Почта подтверждена!\");\r\n            }\r\n            else{\r\n                toast.error(result.data);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestGame(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME, true);\r\n        setError(dispatch, actionTypes.GAME_REQUEST_ERROR, false);\r\n        Requests.getGame(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME,\r\n                    game: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Игра не найдена!\");\r\n                setError(dispatch, actionTypes.GAME_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME, false);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport function requestGameFriends(slug, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME_FRIENDS, true);\r\n        Requests.getGameFriends(localStorage.getItem('token'), slug, page).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME_FRIENDS,\r\n                    info: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME_FRIENDS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestMovie(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE, true);\r\n        setError(dispatch, actionTypes.MOVIE_REQUEST_ERROR, false);\r\n        Requests.getMovie(localStorage.getItem('token'), id).then((result) => {\r\n            console.log(result);\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_MOVIE,\r\n                    movie: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Фильм не найден!\");\r\n                setError(dispatch, actionTypes.MOVIE_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestMovieFriends(id, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE_FRIENDS, true);\r\n        Requests.getMovieFriends(localStorage.getItem('token'), id, page).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_MOVIE_FRIENDS,\r\n                    info: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE_FRIENDS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setGameStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setGameStatus(localStorage.getItem('token'), selectors.getContentGame(getState()).rawg.slug, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_GAME_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function requestUserPageContent(username){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT, true);\r\n        setError(dispatch, actionTypes.USER_PAGE_ERROR, false);\r\n        Requests.getUserInfo(localStorage.getItem('token'), username).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_CONTENT,\r\n                    content: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Профиль не найден!\");\r\n                setError(dispatch, actionTypes.USER_PAGE_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestUserPageLogs(userID, page, resultsOnPage){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_LOGS, true);\r\n        Requests.getUserLog(localStorage.getItem('token'), userID, page, resultsOnPage).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_LOGs,\r\n                    logs: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n                \r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_LOGS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestUserPageFriendsLogs(userID, page, resultsOnPage){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS, true);\r\n        Requests.getUserFriendsLog(localStorage.getItem('token'), userID, page, resultsOnPage).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_FRIENDS_LOGS,\r\n                    logs: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchGames(query, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_GAMES, true);\r\n        Requests.searchGames(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_GAMES,\r\n                    games: result, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_GAMES, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchMovies(query, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_MOVIES, true);\r\n        Requests.searchMovies(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска фильмов\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_MOVIES,\r\n                    movies: result.results, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_MOVIES, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setMovieStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setMovieStatus(localStorage.getItem('token'), selectors.getContentMovie(getState()).tmdb.id, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_MOVIE_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function searchUsers(query){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_USERS, true);\r\n        Requests.searchUsers(query).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_USERS,\r\n                    users: result, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_USERS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setUserStatus(is_following, userID){\r\n    return async(dispatch) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setUserStatus(localStorage.getItem('token'), is_following, userID).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_USER_PAGE_FOLLOWING,\r\n                        is_following: result.is_following\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function setUser(user) {\r\n    return({ type: actionTypes.SET_USER, user: user });\r\n}\r\n\r\nexport function openLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: false  });\r\n}\r\n\r\nexport function openRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: false  });\r\n}\r\n\r\nfunction setLoading(dispatch, type, isLoading){\r\n    dispatch({\r\n        type: type,\r\n        isLoading: isLoading\r\n    });\r\n}\r\n\r\nfunction setError(dispatch, type, isError){\r\n    dispatch({\r\n        type: type,\r\n        error: isError\r\n    });\r\n}","export const SET_USER = 'SET_USER';\r\nexport const SET_AUTH = \"SET_AUTH\";\r\n\r\nexport const SET_LOGINFORM = \"SET_LOGINFORM\";\r\nexport const SET_REGISTRATEFORM = \"SET_REGISTRATEFORM\";\r\n\r\nexport const SET_CONTENT_GAME = \"SET_CONTENT_GAME\";\r\nexport const SET_CONTENT_GAME_USERINFO = \"SET_CONTENT_GAME_USERINFO\";\r\nexport const SET_CONTENT_GAME_FRIENDS = \"SET_CONTENT_GAME_FRIENDS\";\r\n\r\nexport const SET_CONTENT_MOVIE = \"SET_CONTENT_MOVIE\";\r\nexport const SET_CONTENT_MOVIE_USERINFO = \"SET_CONTENT_MOVIE_USERINFO\";\r\nexport const SET_CONTENT_MOVIE_FRIENDS = \"SET_CONTENT_MOVIE_FRIENDS\";\r\n\r\nexport const SET_SEARCH_CONTENT_GAMES = \"SET_SEARCH_CONTENT_GAMES\";\r\nexport const SET_SEARCH_CONTENT_MOVIES = \"SET_SEARCH_CONTENT_MOVIES\";\r\nexport const SET_SEARCH_CONTENT_USERS = \"SET_SEARCH_CONTENT_USERS\";\r\n\r\nexport const SET_USER_PAGE_CONTENT = \"SET_USER_PAGE_CONTENT\";\r\nexport const SET_USER_PAGE_FOLLOWING = \"SET_USER_PAGE_FOLLOWING\";\r\nexport const SET_USER_PAGE_LOGs = \"SET_USER_PAGE_LOGs\";\r\nexport const SET_USER_PAGE_FRIENDS_LOGS = \"SET_USER_PAGE_FRIENDS_LOGS\";\r\n\r\nexport const SET_IS_LOADING_CONTENT_GAME = \"SET_IS_LOADING_CONTENT_GAME\";\r\nexport const SET_IS_LOADING_CONTENT_GAME_FRIENDS = \"SET_IS_LOADING_CONTENT_GAME_FRIENDS\";\r\nexport const SET_IS_LOADING_CONTENT_MOVIE = \"SET_IS_LOADING_CONTENT_MOVIE\";\r\nexport const SET_IS_LOADING_CONTENT_MOVIE_FRIENDS = \"SET_IS_LOADING_CONTENT_MOVIE_FRIENDS\";\r\nexport const SET_IS_LOADING_SEARCH_GAMES = \"SET_IS_LOADING_SEARCH_GAMES\";\r\nexport const SET_IS_LOADING_SEARCH_MOVIES = \"SET_IS_LOADING_SEARCH_MOVIES\";\r\nexport const SET_IS_LOADING_SEARCH_USERS = \"SET_IS_LOADING_SEARCH_USERS\";\r\nexport const SET_IS_LOADING_USER_PAGE_CONTENT = \"SET_IS_LOADING_USER_PAGE_CONTENT\";\r\nexport const SET_IS_LOADING_USER_PAGE_LOGS = \"SET_IS_LOADING_USER_PAGE_LOGS\";\r\nexport const SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS = \"SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS\";\r\n\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const REGISTRATE_ERROR = \"REGISTRATE_ERROR\";\r\nexport const GAME_REQUEST_ERROR = \"GAME_REQUEST_ERROR\";\r\nexport const MOVIE_REQUEST_ERROR = \"MOVIE_REQUEST_ERROR\";\r\nexport const USER_PAGE_ERROR = \"USER_PAGE_ERROR\";","import React, {useState, useEffect} from \"react\";\r\nimport './style.css';\r\n\r\nfunction StatusButtonGroup( {statuses, activeColor, onChangeStatus, userStatus} ) {\r\n    const [activeStatus, setActiveStatus] = useState('');\r\n\r\n    useEffect(() =>{\r\n            setActiveStatus(userStatus?userStatus:statuses[0]);\r\n        },\r\n        [statuses, userStatus]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            {statuses.map((status) => <button className={'contentStatuses'} \r\n                                            key={status}\r\n                                            style={{backgroundColor: (activeStatus === status?activeColor:'#000000')}}\r\n                                            onClick={()=>{ \r\n                                                if (onChangeStatus(status)){\r\n                                                    setActiveStatus(status);\r\n                                                }\r\n                                            }}>\r\n                                            {status}\r\n                                        </button>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default StatusButtonGroup;\r\n","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction FriendsActivityRow ( {info} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n        <div className=\"fActivityBlock\">\r\n            <h5 className='fActivityUser'>\r\n                <a href={window.location.origin + '/user/' + info.user.id} \r\n                        onClick={(e) => { history.push('/user/' + info.user.id); e.preventDefault();}}\r\n                    >\r\n                    {info.user.username}\r\n                </a>\r\n            </h5>\r\n            <div className='fActivityInfo'>\r\n                <Rating stop={10}\r\n                                    emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\"/>}\r\n                                    fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" title={n}/>)}\r\n                                    initialRating={info.score}\r\n                                    className=\"fActivityInfoText\"\r\n                                    readonly={true}\r\n                        />\r\n                <p className=\"fActivityInfoText\">Статус: {info.status} </p>\r\n                <p className=\"fActivityInfoText\" hidden={!(info.spent_time)}>Время проходения: {info.spent_time} {intToHours(info.spent_time)}</p>\r\n                <p className=\"fActivityInfoText\" hidden={info.review===\"\"}>Отзыв: {info.review}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction intToHours(number){\r\n    if (11 <= number && number <= 14)\r\n        return 'часов'\r\n    else if (number % 10 === 1)\r\n        return 'час'\r\n    else if (2 <= number % 10 && number % 10 <= 4)\r\n        return 'часа'\r\n    else\r\n        return 'часов'\r\n}\r\n\r\nexport default FriendsActivityRow;","import React from \"react\";\r\nimport FriendsActivityRow from './FriendsActivityRow';\r\n\r\nfunction FriendsActivity ( {info} ) {\r\n\r\n    return(\r\n        <div className=\"friendsBlock\">\r\n            { info.friends_info.map((friendInfo) => <FriendsActivityRow info={friendInfo} key={friendInfo.updated_at}/>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FriendsActivity;","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport './style.css';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction GamePage ( {requestGame, game, loggedIn, openLoginForm, setGameStatus, gameIsLoading, requestGameFriends, gameFriends, gameFriendsIsLoading\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [spentTime, setSpentTime] = useState(0);\r\n    const [developers, setDevelopers] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [hltbInfo, setHtlbInfo] = useState({gameplay_main_extra: -1, gameplay_main: -1, gameplay_comletionist: -1});\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestGame(id);\r\n            requestGameFriends(id, 1);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestGame]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (game.rawg.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < game.rawg.genres.length; i++){\r\n                    newGenres += game.rawg.genres[i].name;\r\n                    if (i !== game.rawg.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                 setGenres(newGenres);   \r\n            }\r\n\r\n            if (game.rawg.metacritic){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{game.rawg.metacritic}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">Metascore</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            if (game.hltb){\r\n                setHtlbInfo(game.hltb);\r\n            }else if (game.rawg.playtime){\r\n                setHtlbInfo({gameplay_main_extra: game.rawg.playtime, gameplay_main: -1, gameplay_completionist: -1});\r\n            }else{\r\n                setHtlbInfo({gameplay_main_extra: -1, gameplay_main: -1, gameplay_completionist: -1});\r\n            }\r\n\r\n            if (game.user_info){\r\n                setReview(game.user_info.review);\r\n                setSpentTime(game.user_info.spent_time);\r\n            }\r\n\r\n            if (game.rawg.developers){\r\n                let newDevelopers = \"\"\r\n                for (let i = 0; i < game.rawg.developers.length; i++){\r\n                    newDevelopers += game.rawg.developers[i].name;\r\n                    if (i !== game.rawg.developers.length - 1)\r\n                    newDevelopers += \", \";\r\n                }\r\n                setDevelopers(newDevelopers);   \r\n            }\r\n\r\n            if (game.rawg.released){\r\n                let mas = game.rawg.released.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            document.title = game.rawg.name;\r\n\t\t},\r\n\t\t[game]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${game.rawg.background_image_additional?game.rawg.background_image_additional:game.rawg.background_image})`}}/>\r\n                <LoadingOverlay\r\n                    active={gameIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"gameContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"gameContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\">\r\n                                        <img src={game.rawg.background_image} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{game.rawg.name}</h1>\r\n                                        <p style={{marginBottom: \"2px\"}}>Разработчики: {developers}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Дата релиза: {date}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Жанр: {genres}</p>\r\n                                        <p style={{marginBottom: \"4px\", display: \"inline\"}} >Время прохождения: </p>\r\n                                            <div hidden={hltbInfo.gameplay_main < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"light-green-text\" title={\"Главный сюжет\"}/><span className=\"hs\"/>{hltbInfo.gameplay_main} {hltbInfo.gameplay_main_unit}<span className=\"hs\"/>\r\n                                            </div> <p style={{display: \"inline\"}} > </p>\r\n                                            <div hidden={hltbInfo.gameplay_main_extra < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"yellow-text\" title={\"Главный сюжет + побочные задания\"}/><span className=\"hs\"/>{hltbInfo.gameplay_main_extra} {hltbInfo.gameplay_main_extra_unit}<span className=\"hs\"/> \r\n                                            </div> <p style={{display: \"inline\"}} > </p>\r\n                                            <div hidden={hltbInfo.gameplay_completionist < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"red-text\" title={\"Полное прохождение\"}/><span className=\"hs\"/>{hltbInfo.gameplay_completionist} {hltbInfo.gameplay_completionist_unit}\r\n                                            </div>\r\n                                        <br/>\r\n                                        <Rating stop={10}\r\n                                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                            initialRating={game.user_info?game.user_info.score:0}\r\n                                            readonly={!loggedIn | (!game.user_info)}\r\n                                            onChange={(score) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setGameStatus({score: score });\r\n                                                }}\r\n                                            }\r\n                                            style={{marginTop: \"20px\", marginBottom: \"10px\"}}\r\n                                        /> <br/>\r\n                                        <StatusButtonGroup\r\n                                            statuses={['Не играл', 'Буду играть', 'Играю', 'Дропнул', 'Прошел']}\r\n                                            activeColor='#4527a0' \r\n                                            userStatus={game.user_info?game.user_info.status:'Не играл'}\r\n                                            onChangeStatus={(status) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                   setGameStatus({ status: status });\r\n                                                }\r\n                                            }}\r\n                                            />\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"gameContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: game.rawg.description}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"20px\"}}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        \r\n                                        <MDBInput \r\n                                            type=\"textarea\" \r\n                                            id=\"reviewInput\"\r\n                                            label=\"Ваш отзыв\" \r\n                                            value={review}\r\n                                            onChange={(event) =>setReview(event.target.value)}\r\n                                            outline\r\n                                        />\r\n                                        <MDBInput\r\n                                            type=\"number\"\r\n                                            id=\"spentTimeInput\"\r\n                                            label=\"Время прохождения (часы)\" \r\n                                            value={spentTime}\r\n                                            onChange={(event) =>setSpentTime(event.target.value)}\r\n                                        />\r\n                                        <button \r\n                                            className={'savePreviewButton'} \r\n                                            disabled={!loggedIn | (!game.user_info)}\r\n                                            onClick={() => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setGameStatus({   review: document.getElementById('reviewInput').value, spent_time: document.getElementById('spentTimeInput').value });\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            >\r\n                                            Сохранить\r\n                                        </button>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBContainer>\r\n                            <div className=\"gameFriendsBlock\" hidden={gameFriends.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={gameFriends}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getGameRequestError(state),\r\n    game: selectors.getContentGame(state),\r\n    gameIsLoading: selectors.getIsLoadingContentGame(state),\r\n    gameFriends: selectors.getContentGameFriends(state),\r\n    gameFriendsIsLoading: selectors.getIsLoadingContentGameFriends(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestGame: (id) => {\r\n            dispatch(actions.requestGame(id));\r\n        },\r\n        requestGameFriends: (slug, page) => {\r\n            dispatch(actions.requestGameFriends(slug, page));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        setGameStatus: (status) => {\r\n            dispatch(actions.setGameStatus(status));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction MoviePage ( {requestMovie, movie, loggedIn, movieIsLoading, setMovieStatus, openLoginForm, requestMovieFriends, movieFriends, movieFriendsIsLoading\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [companies, setCompanies] = useState(\"\");\r\n    const [cast, setCast] = useState(\"\");\r\n    const [director, setDirector] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestMovie(id);\r\n            requestMovieFriends(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestMovie]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (movie.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{movie.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            if (movie.tmdb.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < movie.tmdb.genres.length; i++){\r\n                    newGenres += movie.tmdb.genres[i].name;\r\n                    if (i !== movie.tmdb.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                setGenres(newGenres);   \r\n            }\r\n\r\n            if (movie.tmdb.production_companies){\r\n                let newCompanies = \"\"\r\n                for (let i = 0; i < movie.tmdb.production_companies.length; i++){\r\n                    newCompanies += movie.tmdb.production_companies[i].name;\r\n                    if (i !== movie.tmdb.production_companies.length - 1)\r\n                        newCompanies += \", \";\r\n                }\r\n                setCompanies(newCompanies);   \r\n            }\r\n\r\n            if (movie.tmdb.cast){\r\n                let newCast = \"\";\r\n                let length = movie.tmdb.cast.length>5?5:movie.tmdb.cast.length;\r\n                for (let i = 0; i < length; i++){\r\n                    newCast += movie.tmdb.cast[i].name;\r\n                    if (i !== length - 1)\r\n                        newCast += \", \";\r\n                }\r\n                setCast(newCast);   \r\n            }\r\n\r\n            if (movie.tmdb.crew){\r\n                let newDirector = \"\"\r\n                for (let i = 0; i < movie.tmdb.crew.length; i++){\r\n                    if (movie.tmdb.crew[i].job === \"Director\"){\r\n                        newDirector = movie.tmdb.crew[i].name;\r\n                        break;\r\n                    }\r\n                }\r\n                setDirector(newDirector);   \r\n            }\r\n\r\n            if (movie.user_info){\r\n                setReview(movie.user_info.review);\r\n            }\r\n\r\n            document.title = movie.tmdb.title;\r\n\t\t},\r\n\t\t[movie]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + movie.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={movieIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"movieContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"movieContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{movie.tmdb.title}</h1>\r\n                                        <p style={{marginBottom: \"2px\"}}>Дата релиза: {movie.tmdb.release_date}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Продолжительность (мин): {movie.tmdb.runtime}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Жанр: {genres}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Компания: {companies}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Слоган: {movie.tmdb.tagline}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>В ролях: {cast}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Режиссер: {director}</p>\r\n                                        <br/>\r\n                                        <Rating stop={10}\r\n                                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                            initialRating={movie.user_info?movie.user_info.score:0}\r\n                                            readonly={!loggedIn | (!movie.user_info)}\r\n                                            onChange={(score) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setMovieStatus({score: score });\r\n                                                }}\r\n                                            }\r\n                                        /> <br/>\r\n                                        <StatusButtonGroup loggedIn={loggedIn} \r\n                                            statuses={['Не смотрел', 'Буду смотреть', 'Дропнул', 'Посмотрел']}\r\n                                            activeColor='#4527a0' \r\n                                            userStatus={movie.user_info?movie.user_info.status:'Не смотрел'}\r\n                                            onChangeStatus={(status) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                   setMovieStatus({ status: status });\r\n                                                }\r\n                                            }}/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"movieContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: movie.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"10px\"}}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        \r\n                                        <MDBInput \r\n                                            type=\"textarea\" \r\n                                            id=\"reviewInput\"\r\n                                            label=\"Ваш отзыв\" \r\n                                            value={review}\r\n                                            onChange={(event) =>setReview(event.target.value)}\r\n                                            outline\r\n                                        />\r\n                                        <button \r\n                                            className={'savePreviewButton'} \r\n                                            disabled={!loggedIn | (!movie.user_info)}\r\n                                            onClick={() => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setMovieStatus({   review: document.getElementById('reviewInput').value });\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            >\r\n                                            Сохранить\r\n                                        </button>\r\n                                    </MDBCol>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={movieFriends.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={movieFriends}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getGameRequestError(state),\r\n    movie: selectors.getContentMovie(state),\r\n    movieIsLoading: selectors.getIsLoadingContentMovie(state),\r\n    movieFriends: selectors.getContentMovieFriends(state),\r\n    movieFriendsIsLoading: selectors.getIsLoadingContentMovieFriends(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestMovie: (id) => {\r\n            dispatch(actions.requestMovie(id));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        setMovieStatus: (status) => {\r\n            dispatch(actions.setMovieStatus(status));\r\n        },\r\n        requestMovieFriends: (id, page) => {\r\n            dispatch(actions.requestMovieFriends(id, page));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviePage);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\n\r\nfunction CardGame( {game} ) {\r\n    let history = useHistory();\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (game.released){\r\n                let mas = game.released.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (game.name.length > 55){\r\n                let newName = game.name.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(game.name);\r\n        },\r\n        [game]\r\n    );\r\n\r\n    /*const mouseDownHandler = ( event ) => {\r\n        if( event.button === 1 ) {\r\n            console.log(window.location.origin + '/game/' + game.slug );\r\n\r\n        }\r\n      }*/\r\n\r\n    return(\r\n        <div className=\"searchCardGame\" >\r\n            <div className=\"searchCardGameImage\" style={{backgroundImage: `url(${game.background_image})`}}> </div>\r\n            <div className=\"searchCardGameText\">\r\n                <a href={window.location.origin + '/game/' + game.slug} \r\n                    onClick={(e) => { history.push('/game/' + game.slug); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n//onMouseDown={mouseDownHandler} \r\n\r\nexport default CardGame;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardMovie ( {movie} ) {\r\n    let history = useHistory();\r\n\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (movie.release_date){\r\n                let mas = movie.release_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (movie.title.length > 55){\r\n                let newName = movie.title.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(movie.title);\r\n        },\r\n        [movie]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardMovie\" >\r\n            <div className=\"searchCardMovieImage\" style={{backgroundImage: `url(${\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.poster_path})`}}> </div>\r\n            <div className=\"searchCardMovieText\">\r\n                <a href={window.location.origin + '/movie/' + movie.id} \r\n                    onClick={(e) => { history.push('/movie/' + movie.id); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardMovie;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardUser ( {user} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [user]\r\n    );\r\n\r\n    return(\r\n        <div className=\"cardUser\" >\r\n            <div className=\"cardUserImage\" style={{backgroundImage: `url(${'http://upload.wikimedia.org/wikipedia/commons/f/f4/User_Avatar_2.png'})`}}> </div>\r\n            <div className=\"cardUserText\">\r\n                <a href={window.location.origin + '/user/' + user.id} \r\n                    onClick={(e) => { history.push('/user/' + user.id); e.preventDefault();}}>\r\n                        <h4 >{user.username}</h4>\r\n                </a>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardUser;\r\n","import React, {useState} from \"react\";\r\nimport './style.css';\r\n\r\nfunction CategoriesTab( {categories, activeColor, onChangeCategory} ) {\r\n    const [activeCategory, setActiveCategory] = useState(categories[0]);\r\n\r\n    return(\r\n        <div>\r\n            {categories.map((category) => <button className={'categoriesTab'} \r\n                                            key={category}\r\n                                            style={{color: (activeCategory === category?activeColor:'rgb(207, 207, 207)')}}\r\n                                            onClick={()=>{ \r\n                                                setActiveCategory(category);\r\n                                                onChangeCategory(category);\r\n                                            }}>\r\n                                            {category}\r\n                                        </button>) }\r\n            <br/>\r\n`           <hr style={{  backgroundColor: activeColor, height: 2.5, marginTop: \"-16px\", marginBottom: \"-10px\" }}/>`\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default CategoriesTab;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBFormInline\r\n} from \"mdbreact\";\r\nimport './style.css';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport CardGame from './CardGame';\r\nimport CardMovie from './CardMovie';\r\nimport CardUser from '../Common/CardUser';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction SearchPage ( { loggedIn, gamesIsLoading, moviesIsLoading, usersIsLoading, searchGame, games, searchMovie, movies, searchUsers, users } ) {\r\n    let history = useHistory();\r\n    let { query } = useParams();\r\n    const [queryText, setQueryText] = useState(\"\");\r\n    const [gamesCards, setGamesCards] = useState(\"\");\r\n    const [moviesCards, setMoviesCards] = useState(\"\");\r\n    const [usersCards, setUsersCards] = useState(\"\");\r\n\r\n    const [activeCategory, setActiveCategory] = useState(\"Всё\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            searchGame(query, 1);\r\n            searchMovie(query, 1);\r\n            searchUsers(query);\r\n            setQueryText(query);\r\n            document.title = 'Поиск';\r\n\t\t},\r\n\t\t[query, searchGame, searchMovie, searchUsers]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setGamesCards(<div className=\"searchCardsGroup\">{games.map(game => <CardGame game={game} key={game.id}/>)}</div>);\r\n\t\t},\r\n\t\t[games]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setMoviesCards(<div className=\"searchCardsGroup\">{movies.map(movie => <CardMovie movie={movie} key={movie.id}/>)}</div>);\r\n\t\t},\r\n\t\t[movies]\r\n    );\r\n\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setUsersCards(<div className=\"searchCardsGroup\">{users.map(user => <CardUser user={user} key={user.username}/>)}</div>);\r\n\t\t},\r\n\t\t[users]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg searchBG\"/> \r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"searchPage\"> \r\n                            <h1>Поиск</h1>\r\n                            <MDBFormInline className=\"md-form\"\r\n                                onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput2').value); return false; }}>\r\n                                <MDBIcon icon=\"search\" />\r\n                                <input \r\n                                    className=\"form-control form-control-sm ml-3 w-50\" \r\n                                    type=\"text\" \r\n                                    placeholder=\"Найти\" \r\n                                    aria-label=\"Search\" \r\n                                    id=\"searchInput2\" \r\n                                    value={queryText} \r\n                                    onChange={(event) =>setQueryText(event.target.value)}/>\r\n                            </MDBFormInline>\r\n\r\n                            <h1>Результаты поиска</h1>\r\n                                <CategoriesTab\r\n                                    categories={['Всё', 'Игры', 'Фильмы', 'Пользователи']}\r\n                                    activeColor='#7654de' \r\n                                    onChangeCategory={(category) => {\r\n                                        setActiveCategory(category);\r\n                                    }}/>\r\n\r\n                                <LoadingOverlay\r\n                                    active={gamesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем игры...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Игры'}>\r\n                                        <h3>Игры</h3>\r\n                                        {gamesCards}\r\n                                    </div>\r\n                                </LoadingOverlay>\r\n\r\n                                <LoadingOverlay\r\n                                    active={moviesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем фильмы...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Фильмы'}>\r\n                                        <h3>Фильмы</h3>\r\n                                        {moviesCards}\r\n                                    </div>       \r\n                                </LoadingOverlay>\r\n                                \r\n                                <LoadingOverlay\r\n                                    active={usersIsLoading}\r\n                                    spinner\r\n                                    text='Ищем пользователей...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Пользователи'}>\r\n                                        <h3>Пользователи</h3>\r\n                                        {usersCards}\r\n                                    </div>    \r\n                                </LoadingOverlay>\r\n                                \r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    gamesIsLoading: selectors.getIsLoadingSearchGames(state),\r\n    moviesIsLoading: selectors.getIsLoadingSearchMovies(state),\r\n    usersIsLoading: selectors.getIsLoadingSearchUsers(state),\r\n    games: selectors.getSearchContentGames(state),\r\n    movies: selectors.getSearchContentMovies(state),\r\n    users: selectors.getSearchContentUsers(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        searchGame: (query, page) => {\r\n            dispatch(actions.searchGames(query, page));\r\n        },\r\n        searchMovie: (query, page) => {\r\n            dispatch(actions.searchMovies(query, page));\r\n        },\r\n        searchUsers: (query) => {\r\n            dispatch(actions.searchUsers(query));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);\r\n","import React from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../store/actions';\r\nimport * as selectors from '../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction LoginForm( {isOpen, closeForm, logIn, authError} ) {\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody>\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form onSubmit={(event) => {event.preventDefault();\r\n\t\t\t\t\t\t\t\t\t\tlogIn(document.getElementById(\"loginInput\").value,\r\n\t\t\t\t\t\t\t\t\t\t\tdocument.getElementById(\"passwordInput\").value)}}>\r\n\t              <p className=\"h4 text-center mb-4\">Войти</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!authError} >Неверный логин или пароль!</p>\r\n\t              <label htmlFor=\"loginInput\" className=\"grey-text\">\r\n\t                Логин\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" />\r\n\t              <br />\r\n\t              <label htmlFor=\"passwordInput\" className=\"grey-text\">\r\n\t                Пароль\r\n\t              </label>\r\n\t              <input type=\"password\" id=\"passwordInput\" className=\"form-control\" />\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn style={{color: \"white\", backgroundColor: \"#6C0AAB\"}} type=\"submit\">\r\n\t\t\t\t\t\tВойти\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getLoginForm(state),\r\n\tauthError: selectors.getAuthError(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeLoginForm());\r\n\t\t},\r\n\t\tlogIn: (login, password) => {\r\n\t\t\tdispatch(actions.tryAuth(login, password));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n","import React from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../store/actions';\r\nimport * as selectors from '../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction RegistrationForm( {isOpen, closeForm, registrate, registrateArror, user} ) {\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody>\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form>\r\n\t              <p className=\"h4 text-center mb-4\">Регистрация</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!registrateArror} >Ошибка регистрации!</p>\r\n                  <p className=\"note note-success\" hidden={user.email===\"\"} >{user.login}, добро пожаловать! Осталось только подтвердить вашу почту: {user.email}</p>\r\n\t              <label htmlFor=\"loginInput\" className=\"grey-text\">\r\n\t                Никнейм\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" />\r\n\t              <br />\r\n                  <label htmlFor=\"emailInput\" className=\"grey-text\">\r\n\t                Электронная почта\r\n\t              </label>\r\n\t              <input type=\"email\" id=\"emailInput\" className=\"form-control\" />\r\n\t              <br />\r\n\t              <label htmlFor=\"passwordInput\" className=\"grey-text\">\r\n\t                Пароль\r\n\t              </label>\r\n\t              <input type=\"password\" id=\"passwordInput\" className=\"form-control\" />\r\n\t              <div className=\"text-center mt-4\">\r\n                    <MDBBtn style={{color: \"white\", backgroundColor: \"#6C0AAB\"}} type=\"button\" onClick={() => registrate(document.getElementById(\"loginInput\").value,\r\n                                                                                                                        document.getElementById(\"emailInput\").value,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    document.getElementById(\"passwordInput\").value)}>\r\n\t\t\t\t\t\tЗарегистрироваться\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getRegistrateForm(state),\r\n    registrateArror: selectors.getRegistrateError(state),\r\n    user: selectors.getUser(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeRegistrateForm());\r\n\t\t},\r\n\t\tregistrate: (login, email, password) => {\r\n\t\t\tdispatch(actions.registrationRequest(login, email, password));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);\r\n","import React, {\r\n    useEffect\r\n} from \"react\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ConfirmPage ( {confirmEmailRequest} ) \r\n{\r\n\tlet search = window.location.search;\r\n\tlet params = new URLSearchParams(search);\r\n\tlet uid64 = params.get('uid64');\r\n\tlet token = params.get('token');\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconfirmEmailRequest(uid64, token);\r\n\t\t},\r\n\t\t[confirmEmailRequest, token, uid64]\r\n\t);\r\n\t\r\n    return (\r\n\t\t\t<div>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        confirmEmailRequest: (uid64, token) => {\r\n            dispatch(actions.confirmEmailRequest(uid64, token));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmPage);","import React, { useEffect, useState} from \"react\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction GameBlock ( {games, stats} ) {\r\n\r\n    const gameColumns = [\r\n        {\r\n          label: 'Название',\r\n          field: 'name',\r\n          sort: 'disabled'\r\n        },\r\n        {\r\n          label: 'Статус',\r\n          field: 'status',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Оценка',\r\n          field: 'score',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Отзыв',\r\n          field: 'review',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Время прохождения',\r\n          field: 'spent_time',\r\n          sort: 'asc'\r\n        }\r\n      ];\r\n\r\n    const [gameTableData, setGameTableData] = useState({\r\n        columns: gameColumns,\r\n        rows: [\r\n        ]\r\n    });\r\n\r\n    useEffect(() =>{\r\n            if (games)\r\n            {\r\n                setGameTableData({\r\n                    columns: gameColumns,\r\n                    rows: games.map((game) => {\r\n                        return {\r\n                                name: <a className=\"dataTable\" href={window.location.origin + '/game/' + game.game.rawg_slug}>{game.game.rawg_name}</a>,\r\n                                name2: game.game.rawg_name,\r\n                                status: game.status,\r\n                                score: game.score,\r\n                                review: game.review,\r\n                                spent_time: game.spent_time,\r\n                                /*clickEvent: (e) => {\r\n                                    //window.open('/game/' + game.game.rawg_slug);\r\n                                    history.push('/game/' + game.game.rawg_slug);\r\n                                }*/\r\n                            }      \r\n                    })\r\n                });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [games]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            <p>Игр сыграно: {stats.games_count}, часов наиграно: {stats.games_total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={gameTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать игр на странице\"\r\n                searchLabel='Поиск'\r\n                className='dataTable'\r\n                />\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default GameBlock;\r\n","import React from \"react\";\r\n\r\nimport CardUser from '../Common/CardUser';\r\n\r\nfunction FriendBlock ( {users} ) {\r\n\r\n    return(\r\n        <div className=\"friendsBlock\">\r\n            { users.map((user) => <CardUser user={user} key={user.id}/>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FriendBlock;\r\n","import React, { useEffect, useState} from \"react\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction MovieBlock ( {movies, stats} ) {\r\n\r\n    const movieColumns = [\r\n      {\r\n        label: 'Название',\r\n        field: 'name',\r\n        sort: 'disabled'\r\n      },\r\n      {\r\n        label: 'Статус',\r\n        field: 'status',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Оценка',\r\n        field: 'score',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Отзыв',\r\n        field: 'review',\r\n        sort: 'asc'\r\n      }\r\n    ];\r\n\r\n  const [movieTableData, setMovieTableData] = useState({\r\n      columns: movieColumns,\r\n      rows: [\r\n      ]\r\n  });\r\n\r\n    useEffect(() =>{\r\n            if (movies)\r\n            {\r\n              setMovieTableData({\r\n                columns: movieColumns,\r\n                rows: movies.map((movie) => {\r\n                    return {\r\n                            name: <a className=\"dataTable\" href={window.location.origin + '/movie/' + movie.movie.tmdb_id}>{movie.movie.tmdb_name}</a>,\r\n                            name2: movie.movie.tmdb_name,\r\n                            status: movie.status,\r\n                            score: movie.score,\r\n                            review: movie.review,\r\n                            /*clickEvent: (e) => {\r\n                                //window.open('/game/' + game.game.rawg_slug);\r\n                                history.push('/movie/' + movie.movie.tmdb_id)\r\n                            }*/\r\n                        }      \r\n                  })\r\n              });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [movies]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            <p>Фильмов посмотрено: {stats.movies_count}, часов просмотра: {stats.movies_total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={movieTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать фильмов на странице\"\r\n                searchLabel='Поиск'\r\n                />\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default MovieBlock;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport './style.css';\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction LogRow ( {log, showUsername} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [log]\r\n    );\r\n\r\n    function translateActionType(action, actionResult){\r\n        switch (action) {\r\n            case 'score':\r\n                return 'оценил(а)';\r\n            case 'status':\r\n                return 'изменил(а) статус';\r\n            case 'review':\r\n                return 'оставил(а) отзыв на';\r\n            case 'spent_time':\r\n                return 'изменил(а) время прохождения';\r\n            case 'is_following':\r\n                if (actionResult === 'True')\r\n                    return 'подписан(а) на';\r\n                else\r\n                    return 'отписан(а) от';\r\n            default:\r\n                return action;\r\n        }\r\n    }\r\n\r\n    function translateType(type, actionType){\r\n        switch (type) {\r\n            case 'game':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'игру';\r\n                else\r\n                    return 'игры';\r\n            case 'movie':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'фильм';\r\n                else\r\n                    return 'фильма';\r\n            case 'user':\r\n                return 'пользователя';\r\n            default:\r\n                return type;\r\n        }\r\n    }\r\n\r\n    function nameToLink(name, type, id){\r\n        switch (type){\r\n            case 'game':\r\n                return  <a href={window.location.origin + '/game/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/game/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'movie':\r\n                return  <a href={window.location.origin + '/movie/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/movie/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'user':\r\n                return  <a href={window.location.origin + '/user/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/user/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            default:\r\n                return name;\r\n        }\r\n    }\r\n\r\n    function userToLink(username, userID){\r\n            return  <a href={window.location.origin + '/user/' + userID} \r\n                        className=\"logLink\"\r\n                        onClick={(e) => { history.push('/user/' + userID); e.preventDefault();}}>\r\n                            {username}\r\n                    </a>;\r\n    }\r\n\r\n    function actionResultToStr(actionType, actionResult){\r\n        switch (actionType){\r\n            case 'score':\r\n                return  <Rating stop={10}\r\n                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\"/>}\r\n                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" title={n}/>)}\r\n                            initialRating={actionResult}\r\n                            readonly={true}\r\n                        />\r\n            case 'status':\r\n                return '\"' + actionResult + '\"';\r\n            case 'review':\r\n                return '\"' + actionResult + '\"';\r\n            case 'spent_time':\r\n                return actionResult + ' ' + intToHours(actionResult);\r\n            case 'is_following':\r\n                return '';\r\n            default:\r\n                return actionResult;\r\n        }\r\n    }\r\n\r\n    function parseDate(date){\r\n        let newDate = new Date(date);\r\n        return newDate.toLocaleTimeString(\"ru-RU\");\r\n    }\r\n\r\n    return(\r\n            <p className=\"logRow\">{parseDate(log.created)} {showUsername?userToLink(log.user, log.user_id):''} {translateActionType(log.action_type, log.action_result)} {translateType(log.type, log.action_type)} {nameToLink(log.target, log.type, log.target_id)}{log.type==='user'?'':':'} {actionResultToStr(log.action_type, log.action_result)}</p>\r\n    )\r\n}\r\n\r\nfunction intToHours(number){\r\n    if (11 <= number && number <= 14)\r\n        return 'часов'\r\n    else if (number % 10 === 1)\r\n        return 'час'\r\n    else if (2 <= number % 10 && number % 10 <= 4)\r\n        return 'часа'\r\n    else\r\n        return 'часов'\r\n}\r\n\r\nexport default LogRow;","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\nimport './style.css';\r\nimport LogRow from './LogRow';\r\n\r\nfunction UserLogBlock ( {logs, showUsername, onChangePage} ) {\r\n    const [logsByDay, setLogsByDay] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    useEffect(() =>{\r\n            setLogsByDay(groupLogsByDay(logs.log));\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [logs]\r\n    );\r\n\r\n    function groupLogsByDay(logs){\r\n        let newLogs = [];\r\n\r\n        for (let i in logs){\r\n            let date = new Date(logs[i].created);\r\n\r\n            if (newLogs.length === 0)\r\n                newLogs.push({\r\n                    date: date,\r\n                    logs: [logs[i]]\r\n                });\r\n            else if (date.getDay() === newLogs[newLogs.length - 1].date.getDay())\r\n                newLogs[newLogs.length - 1].logs.push(logs[i]);\r\n            else\r\n                newLogs.push({\r\n                    date: date,\r\n                    logs: [logs[i]]\r\n                });\r\n        }\r\n        return newLogs;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            { \r\n                logsByDay.map((dayLog) => \r\n                    <div key={dayLog.logs[0].id} className=\"logDay\">\r\n                        <h5 className='logDate'>\r\n                            {dayLog.date.toLocaleDateString(\"ru-RU\")}\r\n                        </h5>\r\n                        <div className='logRows'>\r\n                            { dayLog.logs.map((log) => <LogRow log={log} showUsername={showUsername} key={log.id}/>) }\r\n                        </div>\r\n                    </div>\r\n                )  \r\n            } \r\n            <button \r\n                className=\"logPaginationButton\" \r\n                disabled={!logs.has_next_page}\r\n                onClick={() => {\r\n                        if (logs.has_next_page){\r\n                            onChangePage(currentPage+1);\r\n                            setCurrentPage(currentPage+1);\r\n                        } \r\n                    }}\r\n                >\r\n                <MDBIcon icon=\"arrow-down\" />\r\n            </button> \r\n\r\n            <button \r\n                className=\"logPaginationButton\" \r\n                disabled={currentPage===1}\r\n                onClick={() => {\r\n                        if (currentPage>1){\r\n                            onChangePage(currentPage-1);\r\n                            setCurrentPage(currentPage-1);\r\n                        } \r\n                    }}\r\n                >\r\n                <MDBIcon icon=\"arrow-up\" />\r\n            </button>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default UserLogBlock;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer\r\n} from \"mdbreact\";\r\nimport './style.css';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport GameBlock from './GameBlock';\r\nimport FriendBlock from './FriendBlock';\r\nimport MovieBlock from './MovieBlock';\r\nimport UserLogBlock from './UserLogBlock';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\n\r\nconst LOG_ROWS_COUNT = 15; \r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction UserPage ( { userIsLoading, getUserInfo, userInfo, currentUserInfo, setUserStatus, getUserLogs, userLogs, userLogsIsLoading,getUserFriendsLogs, userFriendsLogs, userFriendsLogsIsLoading}) \r\n{ \r\n    let { userID } = useParams();\r\n    const [activeCategory, setActiveCategory] = useState(\"Профиль\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            getUserInfo(userID);\r\n            getUserLogs(userID, 1, LOG_ROWS_COUNT);\r\n            getUserFriendsLogs(userID, 1, LOG_ROWS_COUNT);\r\n\t\t},\r\n\t\t[userID, getUserInfo, getUserLogs, getUserFriendsLogs]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            document.title = 'Профиль ' + userInfo.username;\r\n\t\t},\r\n\t\t[userInfo]\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"bg searchBG\"/> \r\n            <LoadingOverlay\r\n                active={userIsLoading}\r\n                spinner\r\n                text='Загрузка...'\r\n                >\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                    <MDBCol className=\"userPage\"> \r\n                        <h1>Информация о пользователе {userInfo.username}</h1>\r\n                        <button \r\n                            hidden={currentUserInfo.username === userInfo.username}\r\n                            className='addFriendButton'\r\n                            onClick={ () => {\r\n                                setUserStatus({is_following: userInfo.is_followed?false:true}, userInfo.id);\r\n                            }}>\r\n                            {userInfo.is_followed?'Отписаться':'Подписаться'}\r\n                        </button>\r\n                        <CategoriesTab\r\n                            categories={['Профиль', 'Игры', 'Фильмы', 'Друзья']}\r\n                            activeColor='#7654de' \r\n                            onChangeCategory={(category) => { setActiveCategory(category) }}/>\r\n\r\n                            <div hidden={activeCategory!=='Профиль'}>\r\n                                <h4>Моя активность: </h4>\r\n                                <LoadingOverlay\r\n                                    active={userLogsIsLoading}\r\n                                    spinner\r\n                                    text='Загрузка активности...'\r\n                                    >\r\n                                    <UserLogBlock logs={userLogs} onChangePage={(pageNumber) => getUserLogs(userID, pageNumber, LOG_ROWS_COUNT)}/>\r\n                                </LoadingOverlay>\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Игры'}>\r\n                                <GameBlock games={userInfo.games} stats={userInfo.stats} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Фильмы'}>\r\n                                <MovieBlock movies={userInfo.movies} stats={userInfo.stats} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Друзья'}>\r\n                                <FriendBlock users={userInfo.followed_users?userInfo.followed_users:[]} />\r\n                                <h4>Активность друзей: </h4>\r\n                                <LoadingOverlay\r\n                                    active={userFriendsLogsIsLoading}\r\n                                    spinner\r\n                                    text='Загрузка активности...'\r\n                                    >\r\n                                    <UserLogBlock logs={userFriendsLogs} onChangePage={(pageNumber) => getUserFriendsLogs(userID, pageNumber, LOG_ROWS_COUNT)} showUsername={true}/>\r\n                                </LoadingOverlay>\r\n                                \r\n                            </div>\r\n                    </MDBCol>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n            </LoadingOverlay>\r\n        </div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    userIsLoading: selectors.getIsLoadingUserPageContent(state),\r\n    userInfo: selectors.getUserPageContent(state),\r\n    userLogs: selectors.getUserPageLogs(state),\r\n    userLogsIsLoading: selectors.getIsLoadingUserPageLogs(state),\r\n    userFriendsLogs: selectors.getUserPageFriendsLogs(state),\r\n    userFriendsLogsIsLoading: selectors.getIsLoadingUserPageFriendsLogs(state),\r\n    currentUserInfo: selectors.getUser(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        getUserInfo: (user_id) => {\r\n            dispatch(actions.requestUserPageContent(user_id));\r\n        },\r\n        setUserStatus: (is_following, userID) => {\r\n            dispatch(actions.setUserStatus(is_following, userID));\r\n        },\r\n        getUserLogs: (userID, page, resultsOnPage) => {\r\n            dispatch(actions.requestUserPageLogs(userID, page, resultsOnPage));\r\n        },\r\n        getUserFriendsLogs: (userID, page, resultsOnPage) => {\r\n            dispatch(actions.requestUserPageFriendsLogs(userID, page, resultsOnPage));\r\n        },\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage);","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nimport {\r\n\tMDBNavbar,\r\n    MDBNavItem,\r\n    MDBNavbarBrand,\r\n    MDBNavbarNav,\r\n    MDBNavLink,\r\n    MDBIcon,\r\n    MDBFormInline,\r\n    MDBDropdown,\r\n    MDBDropdownItem,\r\n    MDBDropdownMenu,\r\n    MDBDropdownToggle\r\n} from \"mdbreact\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\nfunction Navbar( {loggedIn, onLoginClick, onLogoutClick, onRegistrationClick, user} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n            <MDBNavbar style={{ backgroundColor: \"#4527a0\" }} dark expand=\"md\" fixed=\"top\">\r\n            <MDBNavbarBrand>\r\n                <strong className=\"white-text\">Interests</strong>\r\n            </MDBNavbarBrand>\r\n            <MDBNavbarNav left>\r\n                \r\n            </MDBNavbarNav>\r\n\r\n            <MDBNavbarNav right>\r\n                <MDBNavItem>\r\n                    <MDBFormInline onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput').value); return false; }}>\r\n                        <div className=\"md-form my-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Найти\" aria-label=\"Найти\"\r\n                            id=\"searchInput\"/>\r\n                        </div>\r\n                    </MDBFormInline>\r\n                </MDBNavItem>\r\n\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onLoginClick} >\r\n                        <MDBIcon icon=\"sign-in-alt\" /> Войти\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onRegistrationClick} >\r\n                        <MDBIcon icon=\"user-plus\" /> Зарегистрироваться\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem hidden={!loggedIn} className=\"font-weight-bold\">\r\n                    <MDBDropdown>\r\n                        <MDBDropdownToggle nav caret>\r\n                        <span className=\"mr-2\">{user.username}</span>\r\n                        </MDBDropdownToggle>\r\n                        <MDBDropdownMenu>\r\n                        <MDBDropdownItem href={\"/user/\"+user.id}>Профиль</MDBDropdownItem>\r\n                        <MDBDropdownItem onClick={ onLogoutClick }>\r\n                            <MDBIcon icon=\"sign-out-alt\"/> Выйти\r\n                        </MDBDropdownItem>\r\n                        </MDBDropdownMenu>\r\n                    </MDBDropdown>\r\n                </MDBNavItem>\r\n            </MDBNavbarNav>\r\n        </MDBNavbar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    user: selectors.getUser(state)\r\n});\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonLoginClick: () => {\r\n\t\t\tdispatch(actions.openLoginForm());\r\n        },\r\n        onLogoutClick: () =>{\r\n            dispatch(actions.resetAuthorization());\r\n        },\r\n        onRegistrationClick: () =>{\r\n            dispatch(actions.openRegistrateForm());\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport HomePage from \"./components/HomePage\";\r\nimport GamePage from \"./components/GamePage/GamePage\";\r\nimport MoviePage from \"./components/MoviePage/MoviePage\";\r\nimport SearchPage from \"./components/SearchPage/SearchPage\";\r\nimport LoginForm from \"./components/LoginForm\";\r\nimport RegistrationForm from \"./components/RegistrationForm\";\r\nimport ConfirmPage from \"./components/ConfirmPage\";\r\nimport UserPage from \"./components/UserPage/UserPage\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar/>\r\n        <div className=\"navbar\"></div>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route exact path=\"/game/:id\" component={GamePage} />\r\n            <Route exact path=\"/movie/:id\" component={MoviePage} />\r\n            <Route exact path=\"/search/:query\" component={SearchPage} />\r\n            <Route exact path=\"/confirm/\" component={ConfirmPage} />\r\n            <Route exact path=\"/user/:userID\" component={UserPage} />\r\n            <Route render={function () { return <h1>Not Found</h1>; }} />\r\n            \r\n        </Switch>\r\n      <ToastContainer position=\"top-center\" hideProgressBar newestOnTop closeOnClick/>\r\n      <LoginForm/>\r\n      <RegistrationForm/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//confirm_password_reset\r\nexport default Routes;","import React, {useEffect} from \"react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { connect } from 'react-redux'; \r\nimport Routes from \"./Routes\";\r\nimport * as actions from \"./store/actions\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App({onLoad}) {\r\n\r\n  useEffect(\r\n    () => {\r\n        onLoad();\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"flyout\">\r\n        <main>\r\n          <Routes />\r\n        </main>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n    onLoad: () => {\r\n      dispatch(actions.checkAuthorization());\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore, \r\n  applyMiddleware, \r\n  //combineReducers,\r\n   compose } from 'redux';\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './store/reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk) ) );\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\nexport default store;\r\n\r\n"],"sourceRoot":""}