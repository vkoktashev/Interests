{"version":3,"sources":["components/HomePage.js","store/reducers.js","settings.js","services/jwtAuth.js","services/requests.js","store/actions.js","store/actionTypes.js","components/StatusButtonGroup.js","components/GamePage.js","components/SearchCardGame.js","components/SearchPage.js","components/LoginForm.js","components/RegistrationForm.js","components/ConfirmPage.js","components/UserPage.js","components/Navbar.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","initialState","Map","auth","loggedIn","user","username","email","id","content","game","rawg","name","background_image","background_image_additional","developers","hltb","game_image_url","user_info","status","review","score","spent_time","searchContent","games","userPageContent","openedPages","LoginForm","RegistrateForm","errors","registrate","gameRequest","userPage","isLoading","contentGame","searchGames","getLoggedIn","state","get","getContentGame","getSearchContentGames","getAuthError","getRegistrateError","getGameRequestError","getUser","getLoginForm","getRegistrateForm","getIsLoadingContentGame","getIsLoadingSearchGames","getIsLoadingUserPageContent","getUserPageContent","BACKEND_URL","GET_TOKEN_URL","REFRESH_TOKEN_URL","REGISTRATE_URL","CONFIRM_URL","GET_GAME_URL","USER_INFO_URL","axiosConfig","headers","getToken","password","a","axios","post","res","userData","jwt_decode","data","access","user_id","token","refreshToken","refresh","console","log","updateToken","registration","response","confirmation","uid64","patch","getGame","AuthStr","setGameStatus","gameSlug","put","query","page","params","getUserInfo","checkAuthorization","dispatch","localStorage","getItem","Date","now","type","setItem","resetAuthorization","removeItem","defaults","common","StatusButtonGroup","statuses","activeColor","onChangeStatus","userStatus","useState","activeStatus","setActiveStatus","useEffect","map","className","key","style","backgroundColor","onClick","connect","selectors","requestError","gameIsLoading","requestGame","Requests","then","result","toast","error","actions","openLoginForm","isOpen","getState","slug","useParams","genres","setGenres","metascoreBlock","setMetascoreBlock","setReview","spentTime","setSpentTime","gameplay_main_extra","gameplay_main","gameplay_comletionist","hltbInfo","setHtlbInfo","newGenres","i","length","metacritic","backgroundImage","active","spinner","text","md","size","src","alt","marginBottom","released","hidden","far","icon","gameplay_main_unit","stop","emptySymbol","fontSize","fullSymbol","n","title","initialRating","readonly","onChange","paddingTop","dangerouslySetInnerHTML","__html","description","paddingLeft","label","value","event","target","outline","disabled","document","getElementById","SearchCardGame","history","useHistory","push","searchIsLoading","searchGame","gamesCards","setGamesCards","onSubmit","preventDefault","placeholder","aria-label","color","height","borderColor","authError","closeForm","logIn","login","toggle","centered","htmlFor","registrateArror","confirmEmailRequest","success","search","window","location","URLSearchParams","userIsLoading","userInfo","gameTableData","setGameTableData","cursor","onLoginClick","onLogoutClick","onRegistrationClick","dark","expand","fixed","left","right","to","nav","caret","href","Routes","exact","path","component","GamePage","SearchPage","ConfirmPage","UserPage","render","position","hideProgressBar","newestOnTop","closeOnClick","React","Component","onLoad","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","setIn","applyMiddleware","thunk","ReactDOM","URL","process","origin","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5156a707.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction HomePage () \r\n{\r\n    return (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Страница ещё не готова</h1>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nexport default HomePage;","import * as types from './actionTypes';\r\nimport { Map } from 'immutable';\r\n\r\n// Создаем reducer с начальным состоянием.\r\nconst initialState = Map(\r\n    {\r\n        auth: { loggedIn: false },\r\n        user: { username:\"\", email:\"\", id: null },\r\n        content: { \r\n            game: {\r\n                rawg: {\r\n                    name: \"\",\r\n                    background_image: \"\",\r\n                    background_image_additional: \"\",\r\n                    developers: [{}],\r\n                },\r\n                hltb:{\r\n                    game_image_url: \"\"\r\n                },\r\n                user_info:{\r\n                    status: null,\r\n                    review: \"\",\r\n                    score: 0,\r\n                    spent_time: 0\r\n                }\r\n            } \r\n        },\r\n        searchContent: {\r\n            games: []\r\n        },\r\n        userPageContent: {\r\n\r\n        },\r\n        openedPages: { LoginForm: false, RegistrateForm: false },\r\n        errors: {auth: false, registrate: false, gameRequest: false, userPage: false },\r\n        isLoading: {contentGame: false, searchGames: false, userPageContent: false}\r\n    }\r\n);\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case types.SET_USER:\r\n        return state.setIn(['user'], action.user);\r\n    case types.SET_AUTH:\r\n        return state.setIn(['auth'], action.auth);\r\n    case types.SET_CONTENT_GAME:\r\n        return state.setIn(['content', 'game'], action.game);\r\n    case types.SET_SEARCH_CONTENT_GAMES:\r\n        return state.setIn(['searchContent', 'games'], action.games);\r\n    case types.SET_CONTENT_GAME_USERINFO:\r\n        return state.setIn(['content', 'game', 'user_info'], action.user_info);\r\n    case types.SET_CONTENT_GAME_USERINFO_STATUS:\r\n        return state.setIn(['content', 'game', 'user_info', 'status'], action.status)\r\n    case types.SET_CONTENT_GAME_USERINFO_SCORE:\r\n        return state.setIn(['content', 'game', 'user_info', 'score'], action.score)\r\n    case types.SET_USER_PAGE_CONTENT:\r\n        return state.setIn(['userPageContent'], action.content)\r\n    case types.SET_LOGINFORM:\r\n        return state.setIn(['openedPages', 'LoginForm'], action.isOpen);\r\n    case types.SET_REGISTRATEFORM:\r\n        return state.setIn(['openedPages', 'RegistrateForm'], action.isOpen);\r\n    case types.AUTH_ERROR:\r\n        return state.setIn(['errors', 'auth'], action.error);\r\n    case types.REGISTRATE_ERROR:\r\n        return state.setIn(['errors', 'registrate'], action.error);\r\n    case types.GAME_REQUEST_ERROR:\r\n        return state.setIn(['errors', 'gameRequest'], action.error);\r\n    case types.USER_PAGE_ERROR:\r\n        return state.setIn(['errors', 'userPage'], action.error);\r\n    case types.SET_IS_LOADING_CONTENT_GAME:\r\n        return state.setIn(['isLoading', 'contentGame'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_GAMES:\r\n        return state.setIn(['isLoading', 'searchGames'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_CONTENT:\r\n        return state.setIn(['isLoading', 'userPageContent'], action.isLoading);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function getLoggedIn(state) {\r\n    return state.get('auth').loggedIn;\r\n}\r\n\r\nexport function getAuth(state) {\r\n    return state.get('auth');\r\n}\r\n\r\nexport function getContentGame(state) {\r\n    return state.get('content').game;\r\n}\r\n\r\nexport function getSearchContentGames(state) {\r\n    return state.get('searchContent').games;\r\n}\r\n\r\nexport function getAuthError(state) {\r\n    return state.get('errors').auth;\r\n}\r\n\r\nexport function getRegistrateError(state) {\r\n    return state.get('errors').registrate;\r\n}\r\n\r\nexport function getGameRequestError(state) {\r\n    return state.get('errors').gameRequest;\r\n}\r\n\r\n\r\nexport function getUserPageError(state) {\r\n    return state.get('errors').userPage;\r\n}\r\n\r\nexport function getUser(state) {\r\n    return state.get('user');\r\n}\r\n\r\nexport function getLoginForm(state) {\r\n    return state.get('openedPages').LoginForm;\r\n}\r\n\r\nexport function getRegistrateForm(state) {\r\n    return state.get('openedPages').RegistrateForm;\r\n}\r\n\r\nexport function getIsLoadingContentGame(state) {\r\n    return state.get('isLoading').contentGame;\r\n}\r\n\r\nexport function getIsLoadingSearchGames(state) {\r\n    return state.get('isLoading').searchGames;\r\n}\r\n\r\nexport function getIsLoadingUserPageContent(state) {\r\n    return state.get('isLoading').userPageContent;\r\n}\r\n\r\nexport function getUserPageContent(state){\r\n    return state.get('userPageContent');\r\n}","/** Время жизни токена в миллисекундах, после истечения которого будет запрошен новый токен*/\r\nexport const TOKEN_LIFETIME = 86000000; \r\n/**Адрес сервера*/\r\nexport const BACKEND_URL = \"http://35.193.124.214:8001/\";\r\n/**Адрес получения токена */\r\nexport const GET_TOKEN_URL = BACKEND_URL + \"users/auth/login/\"; \r\n/**Адрес обновления токена */\r\nexport const REFRESH_TOKEN_URL = BACKEND_URL + \"users/auth/refresh-token/\";\r\n/**Адрес регистрации */\r\nexport const REGISTRATE_URL = BACKEND_URL + \"users/auth/signup/\";\r\n/**Адрес подтверждения почты */\r\nexport const CONFIRM_URL = BACKEND_URL + \"users/auth/confirmation/\";\r\n/**Адрес запроса игры */\r\nexport const GET_GAME_URL = BACKEND_URL + \"games/game/\";\r\n/**Адрес поиска игр */\r\nexport const SEARCH_GAMES_URL = BACKEND_URL + \"games/search/\";\r\n/**Адрес получения информации о пользователе */\r\nexport const USER_INFO_URL = BACKEND_URL + \"users/user/\";","import axios from \"axios\";\r\nimport jwt_decode from 'jwt-decode';\r\nimport {GET_TOKEN_URL, REFRESH_TOKEN_URL, REGISTRATE_URL, CONFIRM_URL} from '../settings';\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\n/**\r\n * ПОлучение токена авторизации. Токен сохраняется в localStorage\r\n * @param {string} username Имя пользователя\r\n * @param {string} password Пароль \r\n */\r\nexport async function getToken(username, password){\r\n    try{\r\n        const res = await axios.post(GET_TOKEN_URL, {\r\n                    username: username,\r\n                    password: password \r\n                }, axiosConfig);\r\n\r\n        let userData = jwt_decode(res.data.access);\r\n        let user = {username: userData.username, id: userData.user_id, email: userData.email}\r\n\r\n        return {token: res.data.access, refreshToken: res.data.refresh, user: user};\r\n    }catch(e){\r\n        console.log(\"axios error: \" + e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Функция обновления токена\r\n */\r\nexport async function updateToken(refreshToken){\r\n    if (typeof refreshToken !== 'undefined' & refreshToken != null)\r\n        try{\r\n            const res = await axios.post(REFRESH_TOKEN_URL, {\r\n                        refresh: refreshToken\r\n                    }, axiosConfig);\r\n                    \r\n            let userData = jwt_decode(res.data.access);\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n\r\n            return {token: res.data.access, user: user};\r\n        }catch(e){\r\n            console.log(\"exios error: \" + e);\r\n            return null;\r\n        }\r\n    return null;\r\n}\r\n\r\nexport async function registration(username, email, password) {\r\n   try{\r\n        const res = await axios.post(REGISTRATE_URL, \r\n            {  username: username,\r\n                email: email, \r\n                password: password \r\n            }, axiosConfig);\r\n        let data = res.data;\t\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e.response);\r\n        return e.response;\r\n    }\r\n}\r\n\r\nexport async function confirmation(uid64, token) {\r\n    try{\r\n        console.log(uid64);\r\n        console.log(token);\r\n        const res = await axios.patch(CONFIRM_URL, \r\n             {  \r\n                uid64: uid64,\r\n                token: token\r\n             }, \r\n             axiosConfig);\r\n        let data = res.data;\t\r\n        return data;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }\r\n","import axios from \"axios\";\r\nimport {GET_GAME_URL, SEARCH_GAMES_URL, USER_INFO_URL} from \"../settings\";\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\naxios.defaults.headers.common = {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getGame(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса игры\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус игры\r\n * @param {string} gameSlug Слаг игры\r\n */\r\nexport async function setGameStatus(token, gameSlug, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        console.log(user_info);\r\n        const res = await axios.put(GET_GAME_URL + gameSlug + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса игры\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Объект статуса игры\r\n * @param {string} gameSlug Слаг игры\r\n \r\nexport async function patchGameStatus(token, gameSlug, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.patch(GET_GAME_URL + gameSlug + \"/\", \r\n        {status: user_info.status, score: user_info.score, review: user_info.review, spent_time: user_info.spent_time }, { 'headers': { 'Authorization': AuthStr } });\r\n        console.log(res.data);\r\n        if (res.status === 204 || res.status === 201|| res.status === 200)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}*/\r\n\r\n\r\n/**\r\n * Запрос на поиск игр\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchGames(query, page){\r\n    try{\r\n        const res = await axios.get(SEARCH_GAMES_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n            console.log(res);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getUserInfo(token, username) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + username + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + username + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}","import * as actionTypes from './actionTypes';\r\nimport * as selectors from './reducers';\r\nimport {getToken, updateToken, registration, confirmation} from \"../services/jwtAuth\";\r\nimport {TOKEN_LIFETIME} from \"../settings\";\r\nimport * as Requests from \"../services/requests\";\r\nimport { toast } from \"react-toastify\";\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nexport function tryAuth(login, password) {\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.AUTH_ERROR,\r\n            error: false \r\n        });\r\n\r\n      try {\r\n        const res = await getToken(login, password);\r\n        if (res !== null){\r\n            localStorage.setItem('refreshToken', res.refreshToken);\r\n            localStorage.setItem('token', res.token);\r\n            localStorage.setItem('tokenTime', Date.now());\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: res.user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_LOGINFORM,\r\n                isOpen: false \r\n            });\r\n        }else{\r\n            dispatch({\r\n                type: actionTypes.AUTH_ERROR,\r\n                error: true \r\n            });\r\n        }\r\n            \r\n      }catch (error) {\r\n        console.error(error);\r\n        dispatch({\r\n            type: actionTypes.AUTH_ERROR,\r\n            error: true \r\n        });\r\n      }\r\n    };\r\n}\r\n\r\nexport function checkAuthorization(){\r\n    return async(dispatch) => {\r\n        if (localStorage.getItem('token') === null | Date.now() - localStorage.getItem('tokenTime') > TOKEN_LIFETIME){\r\n            const res = await updateToken(localStorage.getItem(\"refreshToken\"));\r\n            if (res !== null){\r\n                dispatch({\r\n                    type: actionTypes.SET_AUTH,\r\n                    auth: { loggedIn: true }, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: res.user, \r\n                });\r\n                localStorage.setItem('token', res.token);\r\n                localStorage.setItem('tokenTime', Date.now());\r\n                return true;\r\n            }else{\r\n                //toast.warn(\"Произошла ошибка авторизации. Зайдите ещё раз\");\r\n                dispatch(resetAuthorization());\r\n                return false;\r\n            } \r\n        }else{\r\n            let userData = jwt_decode(localStorage.getItem('token'));\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            return true;\r\n        }\r\n            \r\n    }\r\n}\r\n\r\nexport function resetAuthorization(){\r\n    return async(dispatch) => {\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('tokenTime');\r\n        dispatch({\r\n            type: actionTypes.SET_AUTH,\r\n            auth: { loggedIn: false }, \r\n        });\r\n        dispatch({\r\n            type: actionTypes.SET_USER,\r\n            user: { username:\"\", id: null, email:\"\" }, \r\n        });\r\n    }\r\n}\r\n\r\nexport function registrationRequest(username, email, password){\r\n    return async(dispatch) => {\r\n        registration(username, email, password).then((result) => {\r\n            console.log(result);\r\n            if (result.status != 400){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: { login: result.username, email: result.email }, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.REGISTRATE_ERROR,\r\n                    error: false \r\n                });\r\n            }\r\n            else{\r\n                for (let error in result.data)\r\n                    toast.error(result.data[error][0]);\r\n                   \r\n                dispatch({\r\n                    type: actionTypes.REGISTRATE_ERROR,\r\n                    error: true \r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function confirmEmailRequest(uid64, token){\r\n    return async() => {\r\n        confirmation(uid64, token).then((result) => {\r\n            console.log(result);\r\n            if (result.status != 400){\r\n                toast.success(\"Почта подтверждена!\");\r\n            }\r\n            else{\r\n                toast.error(result.data);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestGame(id){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.SET_IS_LOADING_CONTENT_GAME,\r\n            isLoading: true\r\n        });\r\n        Requests.getGame(localStorage.getItem('token'), id).then((result) => {\r\n            console.log(result);\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME,\r\n                    game: result, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_IS_LOADING_CONTENT_GAME,\r\n                    isLoading: false\r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Игра не найдена!\");\r\n                dispatch({\r\n                    type: actionTypes.GAME_REQUEST_ERROR,\r\n                    error: true \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_IS_LOADING_CONTENT_GAME,\r\n                    isLoading: false\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function setGameStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setGameStatus(localStorage.getItem('token'), selectors.getContentGame(getState()).rawg.slug, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_GAME_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/*export function patchGameStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.patchGameStatus(localStorage.getItem('token'), selectors.getContentGame(getState()).rawg.slug, user_info).then((result) => {\r\n                console.log(result)\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_GAME_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}*/\r\n\r\nexport function requestUserPageContent(username){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT,\r\n            isLoading: true\r\n        });\r\n        Requests.getUserInfo(localStorage.getItem('token'), username).then((result) => {\r\n            console.log(result);\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_CONTENT,\r\n                    content: result, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT,\r\n                    isLoading: false\r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Профиль не найден!\");\r\n                dispatch({\r\n                    type: actionTypes.USER_PAGE_ERROR,\r\n                    error: true \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT,\r\n                    isLoading: false\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchGames(query, page){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.SET_IS_LOADING_SEARCH_GAMES,\r\n            isLoading: true\r\n        });\r\n        Requests.searchGames(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_GAMES,\r\n                    games: result, \r\n                });\r\n            }\r\n            dispatch({\r\n                type: actionTypes.SET_IS_LOADING_SEARCH_GAMES,\r\n                isLoading: false\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport function setUser(user) {\r\n    return({ type: actionTypes.SET_USER, user: user });\r\n}\r\n\r\nexport function openLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: false  });\r\n}\r\n\r\nexport function openRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: false  });\r\n}","export const SET_USER = 'SET_USER';\r\nexport const SET_AUTH = \"SET_AUTH\";\r\nexport const SET_LOGINFORM = \"SET_LOGINFORM\";\r\nexport const SET_REGISTRATEFORM = \"SET_REGISTRATEFORM\";\r\nexport const SET_CONTENT_GAME = \"SET_CONTENT_GAME\";\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const REGISTRATE_ERROR = \"REGISTRATE_ERROR\";\r\nexport const GAME_REQUEST_ERROR = \"GAME_REQUEST_ERROR\";\r\nexport const USER_PAGE_ERROR = \"USER_PAGE_ERROR\";\r\nexport const SET_CONTENT_GAME_USERINFO = \"SET_CONTENT_GAME_USERINFO\";\r\nexport const SET_CONTENT_GAME_USERINFO_STATUS = \"SET_CONTENT_GAME_USERINFO_STATUS\";\r\nexport const SET_CONTENT_GAME_USERINFO_SCORE = \"SET_CONTENT_GAME_USERINFO_SCORE\";\r\nexport const SET_CONTENT_GAME_USERINFO_REVIEW = \"SET_CONTENT_GAME_USERINFO_REVIEW\";\r\nexport const SET_SEARCH_CONTENT_GAMES = \"SET_SEARCH_CONTENT_GAMES\";\r\nexport const SET_IS_LOADING_CONTENT_GAME = \"SET_IS_LOADING_CONTENT_GAME\";\r\nexport const SET_IS_LOADING_SEARCH_GAMES = \"SET_IS_LOADING_SEARCH_GAMES\";\r\nexport const SET_IS_LOADING_USER_PAGE_CONTENT = \"SET_IS_LOADING_USER_PAGE_CONTENT\";\r\nexport const SET_USER_PAGE_CONTENT = \"SET_USER_PAGE_CONTENT\";\r\n","import React, {useState, useEffect} from \"react\";\r\n\r\n\r\nfunction StatusButtonGroup( {statuses, activeColor, onChangeStatus, userStatus} ) {\r\n    const [activeStatus, setActiveStatus] = useState('');\r\n\r\n    useEffect(() =>{\r\n            setActiveStatus(userStatus?userStatus:statuses[0]);\r\n        },\r\n        [statuses, userStatus]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            {statuses.map((status) => <button className={'contentStatuses'} \r\n                                            key={status}\r\n                                            style={{backgroundColor: (activeStatus === status?activeColor:'#1d0d0d')}}\r\n                                            onClick={()=>{ \r\n                                                if (onChangeStatus(status)){\r\n                                                    setActiveStatus(status);\r\n                                                }\r\n                                            }}>\r\n                                            {status}\r\n                                        </button>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default StatusButtonGroup;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\nimport StatusButtonGroup from \"./StatusButtonGroup\";\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction GamePage ( {requestGame, game, requestError, loggedIn, openLoginForm, setGameStatus, gameIsLoading\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [spentTime, setSpentTime] = useState(0);\r\n    const [hltbInfo, setHtlbInfo] = useState({gameplay_main_extra: -1, gameplay_main: -1, gameplay_comletionist: -1});\r\n    const [costyl, setCostyl] = useState(true);\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestGame(id);\r\n            /*if (!costyl){\r\n                requestGame(id);\r\n            }else{\r\n                setCostyl(false)\r\n            }*/\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestGame, loggedIn]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (game.rawg.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < game.rawg.genres.length; i++){\r\n                    newGenres += game.rawg.genres[i].name;\r\n                    if (i !== game.rawg.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                 setGenres(newGenres);   \r\n            }\r\n\r\n            if (game.rawg.metacritic){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{game.rawg.metacritic}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">Metascore</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            if (game.hltb){\r\n                setHtlbInfo(game.hltb);\r\n            }else{\r\n                setHtlbInfo({gameplay_main_extra: -1, gameplay_main: -1, gameplay_comletionist: -1});\r\n            }\r\n\r\n            if (game.user_info){\r\n                setReview(game.user_info.review);\r\n                setSpentTime(game.user_info.spent_time);\r\n            }\r\n\t\t},\r\n\t\t[game]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${game.rawg.background_image_additional?game.rawg.background_image_additional:game.rawg.background_image})`}}/>\r\n                <LoadingOverlay\r\n                    active={gameIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"gameContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"gameContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\">\r\n                                        <img src={game.rawg.background_image} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{game.rawg.name}</h1>\r\n                                        <p style={{marginBottom: \"2px\"}}>Разработчик: {game.rawg.developers[0].name}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Дата релиза: {game.rawg.released}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Жанр: {genres}</p>\r\n                                        <p style={{marginBottom: \"4px\"}} \r\n                                            hidden={hltbInfo.gameplay_main < 0}>\r\n                                            <MDBIcon far icon=\"clock\" /> Время прохождения: {hltbInfo.gameplay_main} {hltbInfo.gameplay_main_unit}\r\n                                        </p>\r\n                                        <br/>\r\n                                        <Rating stop={10}\r\n                                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                            initialRating={game.user_info?game.user_info.score:0}\r\n                                            readonly={!loggedIn | (!game.user_info)}\r\n                                            onChange={(score) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setGameStatus({score: score });\r\n                                                }}\r\n                                            }\r\n                                        /> <br/>\r\n                                        <StatusButtonGroup loggedIn={loggedIn} \r\n                                            statuses={['Не играл', 'Буду играть', 'Играю', 'Дропнул', 'Прошел']}\r\n                                            activeColor='#6c0aab' \r\n                                            userStatus={game.user_info?game.user_info.status:'Не играл'}\r\n                                            onChangeStatus={(status) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    console.log(\" ВОТ\");\r\n                                                    console.log();\r\n                                                   setGameStatus({ status: status });\r\n                                                }\r\n                                            }}/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"gameContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: game.rawg.description}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"20px\"}}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        \r\n                                        <MDBInput \r\n                                            type=\"textarea\" \r\n                                            id=\"reviewInput\"\r\n                                            label=\"Ваш отзыв\" \r\n                                            value={review}\r\n                                            onChange={(event) =>setReview(event.target.value)}\r\n                                            outline\r\n                                        />\r\n                                        <MDBInput\r\n                                            type=\"number\"\r\n                                            id=\"spentTimeInput\"\r\n                                            label=\"Время прохождения (часы)\" \r\n                                            value={spentTime}\r\n                                            onChange={(event) =>setSpentTime(event.target.value)}\r\n                                        />\r\n                                        <button \r\n                                            className={'savePreviewButton'} \r\n                                            disabled={!loggedIn | (!game.user_info)}\r\n                                            onClick={() => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setGameStatus({   review: document.getElementById('reviewInput').value, spent_time: document.getElementById('spentTimeInput').value });\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            >\r\n                                            Сохранить\r\n                                        </button>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBContainer>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getGameRequestError(state),\r\n    game: selectors.getContentGame(state),\r\n    gameIsLoading: selectors.getIsLoadingContentGame(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestGame: (id) => {\r\n            dispatch(actions.requestGame(id));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        /*patchGameStatus: (user_info) => {\r\n            dispatch(actions.patchGameStatus(user_info));\r\n        },*/\r\n        setGameStatus: (status) => {\r\n            dispatch(actions.setGameStatus(status));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction SearchCardGame( {game} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [game]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardGame\" \r\n            style={{backgroundImage: `url(${game.background_image})`}}\r\n            onClick={() => history.push('/game/' + game.slug)}>\r\n            <h3 className=\"searchCardGame\" >{game.name}</h3>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default SearchCardGame;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBFormInline\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport SearchCardGame from './SearchCardGame';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction SearchPage ( { loggedIn, openLoginForm, searchIsLoading, searchGame, games } ) {\r\n    let history = useHistory();\r\n    let { query } = useParams();\r\n    const [gamesCards, setGamesCards] = useState(\"\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            searchGame(query, 1);\r\n\t\t},\r\n\t\t[query]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setGamesCards(<div className=\"searchCardsGroup\">{games.map(game => <SearchCardGame game={game} key={game.id}/>)}</div>);\r\n\t\t},\r\n\t\t[games]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg searchBG\"/> \r\n                <LoadingOverlay\r\n                    active={searchIsLoading}\r\n                    spinner\r\n                    text='Ищем...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"searchPage\"> \r\n                            <h1>Поиск</h1>\r\n                            <MDBFormInline className=\"md-form\"\r\n                                onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput2').value); return false; }}>\r\n                                <MDBIcon icon=\"search\" />\r\n                                <input className=\"form-control form-control-sm ml-3 w-50\" type=\"text\" placeholder=\"Найти\" aria-label=\"Search\" id=\"searchInput2\"/>\r\n                            </MDBFormInline>\r\n\r\n                            <h1>Результаты поиска</h1>\r\n                                <h3>Игры</h3>\r\n                                <hr style={{ color: '#6C0AAB', backgroundColor: '#6C0AAB', height: 2.5,  borderColor : '#6C0AAB' }}/>\r\n                                {gamesCards}\r\n\r\n                                <h3>Фильмы</h3>\r\n                                <hr style={{ color: '#6C0AAB', backgroundColor: '#6C0AAB', height: 2.5,  borderColor : '#6C0AAB' }}/>\r\n                                {gamesCards}\r\n\r\n                                <h3>Сериалы</h3>\r\n                                <hr style={{ color: '#6C0AAB', backgroundColor: '#6C0AAB', height: 2.5,  borderColor : '#6C0AAB' }}/>\r\n                                {gamesCards}\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    searchIsLoading: selectors.getIsLoadingSearchGames(state),\r\n    games: selectors.getSearchContentGames(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        searchGame: (query, page) => {\r\n            dispatch(actions.searchGames(query, page));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);\r\n","import React from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../store/actions';\r\nimport * as selectors from '../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction LoginForm( {isOpen, closeForm, logIn, authError} ) {\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody>\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form onSubmit={(event) => {event.preventDefault();\r\n\t\t\t\t\t\t\t\t\t\tlogIn(document.getElementById(\"loginInput\").value,\r\n\t\t\t\t\t\t\t\t\t\t\tdocument.getElementById(\"passwordInput\").value)}}>\r\n\t              <p className=\"h4 text-center mb-4\">Войти</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!authError} >Неверный логин или пароль!</p>\r\n\t              <label htmlFor=\"loginInput\" className=\"grey-text\">\r\n\t                Логин\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" />\r\n\t              <br />\r\n\t              <label htmlFor=\"passwordInput\" className=\"grey-text\">\r\n\t                Пароль\r\n\t              </label>\r\n\t              <input type=\"password\" id=\"passwordInput\" className=\"form-control\" />\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn style={{color: \"white\", backgroundColor: \"#6C0AAB\"}} type=\"submit\">\r\n\t\t\t\t\t\tВойти\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getLoginForm(state),\r\n\tauthError: selectors.getAuthError(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeLoginForm());\r\n\t\t},\r\n\t\tlogIn: (login, password) => {\r\n\t\t\tdispatch(actions.tryAuth(login, password));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n","import React from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../store/actions';\r\nimport * as selectors from '../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction RegistrationForm( {isOpen, closeForm, registrate, registrateArror, user} ) {\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody>\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form>\r\n\t              <p className=\"h4 text-center mb-4\">Регистрация</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!registrateArror} >Ошибка регистрации!</p>\r\n                  <p className=\"note note-success\" hidden={user.email===\"\"} >{user.login}, добро пожаловать! Осталось только подтвердить вашу почту: {user.email}</p>\r\n\t              <label htmlFor=\"loginInput\" className=\"grey-text\">\r\n\t                Никнейм\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" />\r\n\t              <br />\r\n                  <label htmlFor=\"emailInput\" className=\"grey-text\">\r\n\t                Электронная почта\r\n\t              </label>\r\n\t              <input type=\"email\" id=\"emailInput\" className=\"form-control\" />\r\n\t              <br />\r\n\t              <label htmlFor=\"passwordInput\" className=\"grey-text\">\r\n\t                Пароль\r\n\t              </label>\r\n\t              <input type=\"password\" id=\"passwordInput\" className=\"form-control\" />\r\n\t              <div className=\"text-center mt-4\">\r\n                    <MDBBtn style={{color: \"white\", backgroundColor: \"#6C0AAB\"}} type=\"button\" onClick={() => registrate(document.getElementById(\"loginInput\").value,\r\n                                                                                                                        document.getElementById(\"emailInput\").value,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    document.getElementById(\"passwordInput\").value)}>\r\n\t\t\t\t\t\tЗарегистрироваться\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getRegistrateForm(state),\r\n    registrateArror: selectors.getRegistrateError(state),\r\n    user: selectors.getUser(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeRegistrateForm());\r\n\t\t},\r\n\t\tregistrate: (login, email, password) => {\r\n\t\t\tdispatch(actions.registrationRequest(login, email, password));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);\r\n","import React, {\r\n    useEffect\r\n} from \"react\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ConfirmPage ( {confirmEmailRequest} ) \r\n{\r\n\tlet search = window.location.search;\r\n\tlet params = new URLSearchParams(search);\r\n\tlet uid64 = params.get('uid64');\r\n\tlet token = params.get('token');\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconfirmEmailRequest(uid64, token);\r\n\t\t},\r\n\t\t[]\r\n\t);\r\n\t\r\n    return (\r\n\t\t\t<div>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        confirmEmailRequest: (uid64, token) => {\r\n            dispatch(actions.confirmEmailRequest(uid64, token));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmPage);","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBTable,\r\n    MDBTableHead,\r\n    MDBTableBody\r\n} from \"mdbreact\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction UserPage ( { userIsLoading, getUserInfo, userInfo }) \r\n{ \r\n    let history = useHistory();\r\n    let { username } = useParams();\r\n    const [ gameTableData, setGameTableData] = useState();\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            getUserInfo(username);\r\n\t\t},\r\n\t\t[username]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n\t\t\tif (userInfo && userInfo.games)\r\n                setGameTableData(userInfo.games.map((game) => {\r\n\t\t\t\t\treturn <tr key={game.game.id}>\r\n\t\t\t\t\t\t\t\t<td onClick={() => history.push('/game/' + game.game.slug)} style={{cursor: \"pointer\"}}>{game.game.name}</td>\r\n\t\t\t\t\t\t\t\t<td>{game.status}</td>\r\n\t\t\t\t\t\t\t\t<td>{game.score}</td>\r\n\t\t\t\t\t\t\t\t<td>{game.review}</td>\r\n\t\t\t\t\t\t\t\t<td>{game.spent_time}</td>\r\n\t\t\t\t\t\t\t</tr>;\r\n\t\t\t\t}));\r\n\t\t\telse\r\n                setGameTableData(null);\r\n\t\t},\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t\t[userInfo]\r\n\t);\r\n\r\n    return (\r\n        <div>\r\n        <div className=\"bg searchBG\"/> \r\n            <LoadingOverlay\r\n                active={userIsLoading}\r\n                spinner\r\n                text='Загрузка...'\r\n                >\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                    <MDBCol className=\"searchPage\"> \r\n                    <h1>Информация о пользователе {userInfo.username}</h1>\r\n                    <h3>Игры</h3>\r\n                    <hr style={{ color: '#6C0AAB', backgroundColor: '#6C0AAB', height: 2.5,  borderColor : '#6C0AAB' }}/>\r\n                    <MDBTable>\r\n                        <MDBTableHead>\r\n                            <tr>\r\n                                <th>Название</th>\r\n                                <th>Статус</th>\r\n                                <th>Оценка</th>\r\n                                <th>Отзыв</th>\r\n                                <th>Время прохождения</th>\r\n                            </tr>\r\n                        </MDBTableHead>\r\n                        <MDBTableBody>\r\n                            {gameTableData}\r\n                        </MDBTableBody>\r\n                    </MDBTable>\r\n                    </MDBCol>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n            </LoadingOverlay>\r\n        </div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    userIsLoading: selectors.getIsLoadingUserPageContent(state),\r\n    userInfo: selectors.getUserPageContent(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        getUserInfo: (user_id) => {\r\n            dispatch(actions.requestUserPageContent(user_id));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage);","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nimport {\r\n\tMDBNavbar,\r\n    MDBNavItem,\r\n    MDBNavbarBrand,\r\n    MDBNavbarNav,\r\n    MDBNavLink,\r\n    MDBIcon,\r\n    MDBFormInline,\r\n    MDBDropdown,\r\n    MDBDropdownItem,\r\n    MDBDropdownMenu,\r\n    MDBDropdownToggle\r\n} from \"mdbreact\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\nfunction Navbar( {loggedIn, onLoginClick, onLogoutClick, onRegistrationClick, user} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n            <MDBNavbar style={{ backgroundColor: \"#6C0AAB\" }} dark expand=\"md\" fixed=\"top\">\r\n            <MDBNavbarBrand>\r\n                <strong className=\"white-text\">Interests</strong>\r\n            </MDBNavbarBrand>\r\n            <MDBNavbarNav left>\r\n                \r\n            </MDBNavbarNav>\r\n\r\n            <MDBNavbarNav right>\r\n                <MDBNavItem>\r\n                    <MDBFormInline onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput').value); return false; }}>\r\n                        <div className=\"md-form my-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Найти\" aria-label=\"Найти\"\r\n                            id=\"searchInput\"/>\r\n                        </div>\r\n                    </MDBFormInline>\r\n                </MDBNavItem>\r\n\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onLoginClick} >\r\n                        <MDBIcon icon=\"sign-in-alt\" /> Войти\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onRegistrationClick} >\r\n                        <MDBIcon icon=\"user-plus\" /> Зарегистрироваться\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem hidden={!loggedIn} className=\"font-weight-bold\">\r\n                    <MDBDropdown>\r\n                        <MDBDropdownToggle nav caret>\r\n                        <span className=\"mr-2\">{user.username}</span>\r\n                        </MDBDropdownToggle>\r\n                        <MDBDropdownMenu>\r\n                        <MDBDropdownItem href={\"/user/\"+user.username}>Профиль</MDBDropdownItem>\r\n                        <MDBDropdownItem onClick={ onLogoutClick }>\r\n                            <MDBIcon icon=\"sign-out-alt\"/> Выйти\r\n                        </MDBDropdownItem>\r\n                        </MDBDropdownMenu>\r\n                    </MDBDropdown>\r\n                </MDBNavItem>\r\n            </MDBNavbarNav>\r\n        </MDBNavbar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    user: selectors.getUser(state)\r\n});\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonLoginClick: () => {\r\n\t\t\tdispatch(actions.openLoginForm());\r\n        },\r\n        onLogoutClick: () =>{\r\n            dispatch(actions.resetAuthorization());\r\n        },\r\n        onRegistrationClick: () =>{\r\n            dispatch(actions.openRegistrateForm());\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport HomePage from \"./components/HomePage\";\r\nimport GamePage from \"./components/GamePage\";\r\nimport SearchPage from \"./components/SearchPage\";\r\nimport LoginForm from \"./components/LoginForm\";\r\nimport RegistrationForm from \"./components/RegistrationForm\";\r\nimport ConfirmPage from \"./components/ConfirmPage\";\r\nimport UserPage from \"./components/UserPage\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar/>\r\n        <div className=\"navbar\"></div>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route exact path=\"/game/:id\" component={GamePage} />\r\n            <Route exact path=\"/search/:query\" component={SearchPage} />\r\n            <Route exact path=\"/confirm/\" component={ConfirmPage} />\r\n            <Route exact path=\"/user/:user_id\" component={UserPage} />\r\n            <Route render={function () { return <h1>Not Found</h1>; }} />\r\n        </Switch>\r\n      <ToastContainer position=\"top-center\" hideProgressBar newestOnTop closeOnClick/>\r\n      <LoginForm/>\r\n      <RegistrationForm/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;","import React, {useEffect} from \"react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { connect } from 'react-redux'; \r\nimport Routes from \"./Routes\";\r\nimport * as actions from \"./store/actions\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App({onLoad}) {\r\n\r\n  useEffect(\r\n    () => {\r\n        onLoad();\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"flyout\">\r\n        <main>\r\n          <Routes />\r\n        </main>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n    onLoad: () => {\r\n      dispatch(actions.checkAuthorization());\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore, \r\n  applyMiddleware, \r\n  //combineReducers,\r\n   compose } from 'redux';\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './store/reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk) ) );\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\nexport default store;\r\n\r\n"],"sourceRoot":""}