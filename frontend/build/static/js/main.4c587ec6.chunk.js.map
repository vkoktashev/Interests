{"version":3,"sources":["store/actionTypes.js","store/reducers.js","components/HomePage.js","settings.js","services/jwtAuth.js","services/requests.js","store/actions.js","components/Common/StatusButtonGroup.js","components/Common/FriendsActivityRow.js","components/Common/FriendsActivity.js","components/Game/GamePage.js","components/Movie/MoviePage.js","components/Show/EpisodeRow.js","components/Show/SeasonsBlock.js","components/Show/ShowPage.js","components/Show/DetailedEpisodeRow.js","components/Show/SeasonPage.js","components/Show/EpisodePage.js","components/Search/CardGame.js","components/Search/CardMovie.js","components/Search/CardShow.js","components/Common/CardUser.js","components/Common/CategoriesTab.js","components/Search/SearchPage.js","components/Modals/LoginForm.js","components/Modals/RegistrationForm.js","components/Modals/ResetPasswordForm.js","components/ConfirmPage.js","components/ConfirmPasswordPage.js","components/UserPage/GameBlock.js","components/UserPage/FriendBlock.js","components/UserPage/MovieBlock.js","components/UserPage/LogRow.js","components/UserPage/UserLogBlock.js","components/UserPage/ShowBlock.js","components/UserPage/UserPage.js","components/Navbar.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["SET_USER","SET_AUTH","SET_LOGINFORM","SET_REGISTRATEFORM","SET_RESET_PASSWORD_FORM","SET_CONTENT_GAME","SET_CONTENT_GAME_USERINFO","SET_CONTENT_GAME_FRIENDS","SET_CONTENT_MOVIE","SET_CONTENT_MOVIE_USERINFO","SET_CONTENT_MOVIE_FRIENDS","SET_CONTENT_SHOW","SET_CONTENT_SHOW_USERINFO","SET_CONTENT_SHOW_FRIENDS","SET_SEARCH_CONTENT_GAMES","SET_SEARCH_CONTENT_MOVIES","SET_SEARCH_CONTENT_SHOWS","SET_SEARCH_CONTENT_USERS","SET_USER_PAGE_CONTENT","SET_USER_PAGE_FOLLOWING","SET_USER_PAGE_LOGs","SET_USER_PAGE_FRIENDS_LOGS","SET_IS_LOADING_CONTENT_GAME","SET_IS_LOADING_CONTENT_GAME_FRIENDS","SET_IS_LOADING_CONTENT_MOVIE","SET_IS_LOADING_CONTENT_MOVIE_FRIENDS","SET_IS_LOADING_CONTENT_SHOW","SET_IS_LOADING_CONTENT_SHOW_FRIENDS","SET_IS_LOADING_SEARCH_GAMES","SET_IS_LOADING_SEARCH_MOVIES","SET_IS_LOADING_SEARCH_SHOWS","SET_IS_LOADING_SEARCH_USERS","SET_IS_LOADING_USER_PAGE_CONTENT","SET_IS_LOADING_USER_PAGE_LOGS","SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS","AUTH_ERROR","REGISTRATE_ERROR","GAME_REQUEST_ERROR","MOVIE_REQUEST_ERROR","SHOW_REQUEST_ERROR","USER_PAGE_ERROR","RESET_PASSWORD_ERROR","CONFIRM_PASSWORD_ERROR","initialState","Map","auth","loggedIn","user","username","email","id","content","game","main_info","rawg","name","background_image","background_image_additional","developers","hltb","game_image_url","user_info","status","review","score","spent_time","friends_info","movie","tmdb","title","poster_path","show","episode_run_time","searchContent","games","movies","shows","users","userPageContent","stats","userLogs","log","userFriendsLogs","openedPages","LoginForm","RegistrateForm","ResetPasswordForm","errors","registrate","gameRequest","movieRequest","userPage","resetPassword","confirmPassword","isLoading","contentGame","contentGameFriends","contentMovie","contentMovieFriends","contentShow","contentShowFriends","userPageLogs","userPageFriendsLogs","searchGames","searchMovies","searchShows","searchUsers","getLoggedIn","state","get","getUser","getContentGame","getContentGameFriends","getContentMovie","getContentMovieFriends","getContentShow","getContentShowFriends","getSearchContentGames","getSearchContentMovies","getSearchContentShows","getSearchContentUsers","getAuthError","getRegistrateError","getGameRequestError","getMovieRequestError","getShowRequestError","showRequest","getResetPasswordError","getConfirmPasswordError","getLoginForm","getRegistrateForm","getResetPasswordForm","getIsLoadingContentGame","getIsLoadingContentGameFriends","getIsLoadingContentMovie","getIsLoadingContentMovieFriends","getIsLoadingContentShow","getIsLoadingContentShowFriends","getIsLoadingSearchGames","getIsLoadingSearchMovies","getIsLoadingSearchShows","getIsLoadingSearchUsers","getIsLoadingUserPageContent","getIsLoadingUserPageLogs","getIsLoadingUserPageFriendsLogs","getUserPageContent","getUserPageLogs","getUserPageFriendsLogs","connect","selectors","className","style","marginTop","marginLeft","href","fontWeight","src","alt","BACKEND_URL","GET_TOKEN_URL","REFRESH_TOKEN_URL","REGISTRATE_URL","CONFIRM_URL","RESET_PASSWORD_URL","CONFIRM_PASSWORD_URL","GET_GAME_URL","SEARCH_GAMES_URL","GET_MOVIE_URL","SEARCH_MOVIES_URL","GET_SHOW_URL","SEARCH_SHOWS_URL","USER_INFO_URL","SEARCH_USERS_URL","axiosConfig","headers","getToken","password","a","axios","post","urls","res","userData","jwt_decode","data","access","user_id","token","refreshToken","refresh","console","updateToken","registration","response","confirmation","uid64","patch","put","getGame","AuthStr","getMovie","getShow","getShowSeason","showID","seasonNumber","getShowEpisode","episodeNumber","setGameStatus","gameSlug","setMovieStatus","setShowStatus","setShowSeasonStatus","setShowEpisodeStatus","query","page","gamesCount","params","page_size","warn","getUserInfo","userID","setUserStatus","is_following","getUserLog","resultsOnPage","getUserFriendsLog","getGameFriends","slug","getMovieFriends","getShowFriends","getShowSeasonFriends","seasonID","getShowEpisodeFriends","episodeID","checkAuthorization","dispatch","localStorage","getItem","Date","now","type","actionTypes","setItem","resetAuthorization","removeItem","setShowEpisodeStatusInRow","Requests","then","result","toast","error","openLoginForm","isOpen","setLoading","setError","isError","defaults","common","StatusButtonGroup","statuses","activeColor","onChangeStatus","userStatus","useState","activeStatus","setActiveStatus","useEffect","map","backgroundColor","onClick","intToHours","number","FriendsActivityRow","info","history","useHistory","window","location","origin","e","push","preventDefault","stop","emptySymbol","far","icon","size","fullSymbol","n","initialRating","readonly","hidden","FriendsActivity","friendInfo","requestError","gameIsLoading","gameFriends","gameFriendsIsLoading","requestGame","actions","requestGameFriends","getState","useParams","genres","setGenres","metascoreBlock","setMetascoreBlock","setReview","spentTime","setSpentTime","setDevelopers","date","setDate","gameplay_main_extra","gameplay_main","gameplay_comletionist","hltbInfo","setHtlbInfo","newGenres","i","length","metacritic","playtime","gameplay_completionist","newDevelopers","released","mas","split","newDate","document","backgroundImage","active","spinner","text","md","display","gameplay_main_unit","gameplay_main_extra_unit","gameplay_completionist_unit","fontSize","onChange","getElementById","value","marginBottom","paddingTop","dangerouslySetInnerHTML","__html","description","paddingLeft","label","event","target","outline","disabled","movieIsLoading","movieFriends","movieFriendsIsLoading","requestMovie","requestMovieFriends","companies","setCompanies","cast","setCast","director","setDirector","vote_average","production_companies","newCompanies","newCast","crew","newDirector","job","backdrop_path","release_date","runtime","tagline","overview","EpisodeRow","episode","season","userInfo","setShowEpisodeUserStatus","start","concat","SeasonsBlock","seasons","hereSeasons","setHereSeasons","newSeasons","newSeason","episodes","episode_count","season_number","open","episodes_user_info","find","episode_number","showIsLoading","showFriends","showFriendsIsLoading","requestShow","setShowUserStatus","requestShowFriends","showStatus","firstDate","setFirstDate","lastDate","setLastDate","first_air_date","last_air_date","original_name","number_of_seasons","number_of_episodes","DetailedEpisodeRow","air_date","toLocaleDateString","showSeason","showSeasonIsLoading","requestShowSeason","requestShowSeasonFriends","show_id","chartData","setChartData","show_name","newData","show_original_name","user_watched_show","width","height","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","interval","tickLine","contentStyle","color","stroke","fillOpacity","fill","showEpisode","showEpisodeIsLoading","requestShowEpisode","requestShowEpisodeFriends","still_path","CardGame","setName","newName","substr","CardMovie","CardShow","CardUser","CategoriesTab","categories","onChangeCategory","activeCategory","setActiveCategory","category","gamesIsLoading","moviesIsLoading","showsIsLoading","usersIsLoading","searchGame","searchMovie","results","searchShow","queryText","setQueryText","gamesCards","setGamesCards","moviesCards","setMoviesCards","showsCards","setShowsCards","usersCards","setUsersCards","gamesPage","setGamesPage","moviesPage","setMoviesPage","showsPage","setShowsPage","onSubmit","placeholder","aria-label","authError","closeForm","logIn","login","openResetPasswordForm","setPassword","setLogin","toggle","centered","htmlFor","registrateArror","passwordConfirm","setPasswordConfirm","setEmail","outlineColor","resetPasswordError","confirmEmailRequest","success","search","URLSearchParams","confirmPasswordError","GameBlock","gameColumns","field","sort","columns","rows","gameTableData","setGameTableData","rawg_slug","rawg_name","name2","parseFloat","count","total_spent_time","striped","bordered","small","barReverse","noBottomColumns","noRecordsFoundLabel","paginationLabel","entriesLabel","searchLabel","FriendBlock","MovieBlock","movieColumns","movieTableData","setMovieTableData","tmdb_id","tmdb_name","LogRow","showUsername","created","toLocaleTimeString","action","actionResult","translateActionType","action_type","action_result","actionType","translateType","parent_name","nameToLink","target_id","actionResultToStr","UserLogBlock","logs","onChangePage","logsByDay","setLogsByDay","currentPage","setCurrentPage","newLogs","getDay","groupLogsByDay","dayLog","has_next_page","ShowBlock","showColumns","showTableData","setShowTableData","COLORS","userIsLoading","userLogsIsLoading","userFriendsLogsIsLoading","currentUserInfo","getUserLogs","getUserFriendsLogs","is_followed","cx","cy","outerRadius","labelLine","entry","index","verticalAlign","horizontalAlign","pageNumber","followed_users","onLoginClick","onLogoutClick","onRegistrationClick","dark","expand","fixed","cursor","to","nav","caret","Routes","exact","path","component","HomePage","GamePage","MoviePage","ShowPage","SeasonPage","EpisodePage","SearchPage","ConfirmPage","ConfirmPasswordPage","UserPage","render","position","hideProgressBar","newestOnTop","closeOnClick","React","Component","onLoad","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","types","setIn","applyMiddleware","thunk","ReactDOM","URL","process","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4c587ec6.chunk.js","sourcesContent":["export const SET_USER = 'SET_USER';\r\nexport const SET_AUTH = \"SET_AUTH\";\r\n\r\nexport const SET_LOGINFORM = \"SET_LOGINFORM\";\r\nexport const SET_REGISTRATEFORM = \"SET_REGISTRATEFORM\";\r\nexport const SET_RESET_PASSWORD_FORM = \"SET_RESET_PASSWORD_FORM\";\r\n\r\nexport const SET_CONTENT_GAME = \"SET_CONTENT_GAME\";\r\nexport const SET_CONTENT_GAME_USERINFO = \"SET_CONTENT_GAME_USERINFO\";\r\nexport const SET_CONTENT_GAME_FRIENDS = \"SET_CONTENT_GAME_FRIENDS\";\r\n\r\nexport const SET_CONTENT_MOVIE = \"SET_CONTENT_MOVIE\";\r\nexport const SET_CONTENT_MOVIE_USERINFO = \"SET_CONTENT_MOVIE_USERINFO\";\r\nexport const SET_CONTENT_MOVIE_FRIENDS = \"SET_CONTENT_MOVIE_FRIENDS\";\r\n\r\nexport const SET_CONTENT_SHOW = \"SET_CONTENT_SHOW\";\r\nexport const SET_CONTENT_SHOW_USERINFO = \"SET_CONTENT_SHOW_USERINFO\";\r\nexport const SET_CONTENT_SHOW_FRIENDS = \"SET_CONTENT_SHOW_FRIENDS\";\r\n\r\nexport const SET_SEARCH_CONTENT_GAMES = \"SET_SEARCH_CONTENT_GAMES\";\r\nexport const SET_SEARCH_CONTENT_MOVIES = \"SET_SEARCH_CONTENT_MOVIES\";\r\nexport const SET_SEARCH_CONTENT_SHOWS = \"SET_SEARCH_CONTENT_SHOWS\";\r\nexport const SET_SEARCH_CONTENT_USERS = \"SET_SEARCH_CONTENT_USERS\";\r\n\r\nexport const SET_USER_PAGE_CONTENT = \"SET_USER_PAGE_CONTENT\";\r\nexport const SET_USER_PAGE_FOLLOWING = \"SET_USER_PAGE_FOLLOWING\";\r\nexport const SET_USER_PAGE_LOGs = \"SET_USER_PAGE_LOGs\";\r\nexport const SET_USER_PAGE_FRIENDS_LOGS = \"SET_USER_PAGE_FRIENDS_LOGS\";\r\n\r\nexport const SET_IS_LOADING_CONTENT_GAME = \"SET_IS_LOADING_CONTENT_GAME\";\r\nexport const SET_IS_LOADING_CONTENT_GAME_FRIENDS = \"SET_IS_LOADING_CONTENT_GAME_FRIENDS\";\r\nexport const SET_IS_LOADING_CONTENT_MOVIE = \"SET_IS_LOADING_CONTENT_MOVIE\";\r\nexport const SET_IS_LOADING_CONTENT_MOVIE_FRIENDS = \"SET_IS_LOADING_CONTENT_MOVIE_FRIENDS\";\r\nexport const SET_IS_LOADING_CONTENT_SHOW = \"SET_IS_LOADING_CONTENT_SHOW\";\r\nexport const SET_IS_LOADING_CONTENT_SHOW_FRIENDS = \"SET_IS_LOADING_CONTENT_SHOW_FRIENDS\";\r\nexport const SET_IS_LOADING_SEARCH_GAMES = \"SET_IS_LOADING_SEARCH_GAMES\";\r\nexport const SET_IS_LOADING_SEARCH_MOVIES = \"SET_IS_LOADING_SEARCH_MOVIES\";\r\nexport const SET_IS_LOADING_SEARCH_SHOWS = \"SET_IS_LOADING_SEARCH_SHOWS\";\r\nexport const SET_IS_LOADING_SEARCH_USERS = \"SET_IS_LOADING_SEARCH_USERS\";\r\nexport const SET_IS_LOADING_USER_PAGE_CONTENT = \"SET_IS_LOADING_USER_PAGE_CONTENT\";\r\nexport const SET_IS_LOADING_USER_PAGE_LOGS = \"SET_IS_LOADING_USER_PAGE_LOGS\";\r\nexport const SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS = \"SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS\";\r\n\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const REGISTRATE_ERROR = \"REGISTRATE_ERROR\";\r\nexport const GAME_REQUEST_ERROR = \"GAME_REQUEST_ERROR\";\r\nexport const MOVIE_REQUEST_ERROR = \"MOVIE_REQUEST_ERROR\";\r\nexport const SHOW_REQUEST_ERROR = \"SHOW_REQUEST_ERROR\";\r\nexport const USER_PAGE_ERROR = \"USER_PAGE_ERROR\";\r\nexport const RESET_PASSWORD_ERROR = \"RESET_PASSWORD_ERROR\";\r\nexport const CONFIRM_PASSWORD_ERROR = \"CONFIRM_PASSWORD_ERROR\";","import * as types from './actionTypes';\r\nimport { Map } from 'immutable';\r\n\r\n// Создаем reducer с начальным состоянием.\r\nconst initialState = Map(\r\n    {\r\n        auth: { loggedIn: false },\r\n        user: { username:\"\", email:\"\", id: null },\r\n        content: { \r\n            game: { main_info:{ rawg: { name: \"\", background_image: \"\", background_image_additional: \"\", developers: [{}], },\r\n                                hltb:{ game_image_url: \"\"  },\r\n                                user_info:{ status: null, review: \"\", score: 0, spent_time: 0 } },\r\n                    friends_info: {  friends_info: []  }\r\n            },\r\n            movie: { main_info:{ tmdb: {  title: \"\", poster_path: \"\", developers: [{}],  },\r\n                                user_info:{ status: null,  review: \"\", score: 0, spent_time: 0  } },\r\n                    friends_info: { friends_info: []  }\r\n            },\r\n            show: { main_info:{ tmdb: {  title: \"\", poster_path: \"\",developers: [{}], episode_run_time: []},\r\n                                user_info:{ status: null, review: \"\", score: 0, spent_time: 0 } },\r\n                    friends_info: { friends_info: [] }\r\n            }  \r\n        },\r\n        searchContent: { games: [], movies: [], shows: [], users: []\r\n        },\r\n        userPageContent: {\r\n            user: {\r\n                stats: {}\r\n            },\r\n            userLogs: {log: []},\r\n            userFriendsLogs: {log: []},\r\n        },\r\n        openedPages: { LoginForm: false, RegistrateForm: false, ResetPasswordForm: false },\r\n        errors: {auth: false, registrate: false, gameRequest: false, movieRequest: false, userPage: false, resetPassword: false, confirmPassword: false },\r\n        isLoading: {    contentGame: false, contentGameFriends: false,\r\n                        contentMovie: false, contentMovieFriends: false,\r\n                        contentShow: false, contentShowFriends: false,\r\n                        userPageContent: false, userPageLogs: false, userPageFriendsLogs: false,\r\n                        searchGames: false, searchMovies: false, searchShows: false,  searchUsers: false,\r\n                    }\r\n    }\r\n);\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    //Редьюсеры пользовательской информации\r\n    case types.SET_USER: return state.setIn(['user'], action.user);\r\n    case types.SET_AUTH: return state.setIn(['auth'], action.auth);\r\n\r\n    //Редьюсеры информации об игре\r\n    case types.SET_CONTENT_GAME: return state.setIn(['content', 'game', 'main_info'], action.game);\r\n    case types.SET_CONTENT_GAME_FRIENDS: return state.setIn(['content', 'game', 'friends_info'], action.info);\r\n    case types.SET_CONTENT_GAME_USERINFO: return state.setIn(['content', 'game', 'main_info','user_info'], action.user_info);\r\n\r\n    //Редьюсеры информации о фильме\r\n    case types.SET_CONTENT_MOVIE: return state.setIn(['content', 'movie', 'main_info'], action.movie);\r\n    case types.SET_CONTENT_MOVIE_FRIENDS: return state.setIn(['content', 'movie', 'friends_info'], action.info);\r\n    case types.SET_CONTENT_MOVIE_USERINFO: return state.setIn(['content', 'movie', 'main_info', 'user_info'], action.user_info);\r\n\r\n    //Редьюсеры информации о сериале\r\n    case types.SET_CONTENT_SHOW: return state.setIn(['content', 'show', 'main_info'], action.show);\r\n    case types.SET_CONTENT_SHOW_FRIENDS: return state.setIn(['content', 'show', 'friends_info'], action.info);\r\n    case types.SET_CONTENT_SHOW_USERINFO: return state.setIn(['content', 'show', 'main_info', 'user_info'], action.user_info);\r\n\r\n    //Редьюсеры результатов поиска\r\n    case types.SET_SEARCH_CONTENT_GAMES: return state.setIn(['searchContent', 'games'], action.games);\r\n    case types.SET_SEARCH_CONTENT_MOVIES: return state.setIn(['searchContent', 'movies'], action.movies);\r\n    case types.SET_SEARCH_CONTENT_SHOWS: return state.setIn(['searchContent', 'shows'], action.shows);\r\n    case types.SET_SEARCH_CONTENT_USERS: return state.setIn(['searchContent', 'users'], action.users);\r\n\r\n    //Редьюсеры страницы профиля\r\n    case types.SET_USER_PAGE_CONTENT: return state.setIn(['userPageContent', 'user'], action.content);\r\n    case types.SET_USER_PAGE_FOLLOWING: return state.setIn(['userPageContent', 'user', 'is_followed'], action.is_following);\r\n    case types.SET_USER_PAGE_LOGs:  return state.setIn(['userPageContent', 'userLogs'], action.logs);\r\n    case types.SET_USER_PAGE_FRIENDS_LOGS: return state.setIn(['userPageContent', 'userFriendsLogs'], action.logs);\r\n\r\n    //Редьюсеры состояния всплывающих окон\r\n    case types.SET_LOGINFORM:  return state.setIn(['openedPages', 'LoginForm'], action.isOpen);\r\n    case types.SET_REGISTRATEFORM:  return state.setIn(['openedPages', 'RegistrateForm'], action.isOpen);\r\n    case types.SET_RESET_PASSWORD_FORM:  return state.setIn(['openedPages', 'ResetPasswordForm'], action.isOpen);\r\n\r\n    //Редьюсеры ошибок\r\n    case types.AUTH_ERROR:  return state.setIn(['errors', 'auth'], action.error);\r\n    case types.REGISTRATE_ERROR:  return state.setIn(['errors', 'registrate'], action.error);\r\n    case types.GAME_REQUEST_ERROR: return state.setIn(['errors', 'gameRequest'], action.error);\r\n    case types.MOVIE_REQUEST_ERROR:  return state.setIn(['errors', 'movieRequest'], action.error);\r\n    case types.SHOW_REQUEST_ERROR:  return state.setIn(['errors', 'showRequest'], action.error);\r\n    case types.USER_PAGE_ERROR: return state.setIn(['errors', 'userPage'], action.error);\r\n    case types.RESET_PASSWORD_ERROR: return state.setIn(['errors', 'resetPassword'], action.error);\r\n    case types.CONFIRM_PASSWORD_ERROR: return state.setIn(['errors', 'confirmPassword'], action.error);\r\n\r\n    //Редьюсеры состояния загрузки\r\n    case types.SET_IS_LOADING_CONTENT_GAME:  return state.setIn(['isLoading', 'contentGame'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_GAME_FRIENDS:  return state.setIn(['isLoading', 'contentGameFriends'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_MOVIE:  return state.setIn(['isLoading', 'contentMovie'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_MOVIE_FRIENDS:  return state.setIn(['isLoading', 'contentMovieFriends'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_SHOW:  return state.setIn(['isLoading', 'contentShow'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_SHOW_FRIENDS:  return state.setIn(['isLoading', 'contentShowFriends'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_GAMES:  return state.setIn(['isLoading', 'searchGames'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_MOVIES:  return state.setIn(['isLoading', 'searchMovies'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_SHOWS:  return state.setIn(['isLoading', 'searchShows'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_CONTENT:  return state.setIn(['isLoading', 'userPageContent'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_LOGS: return state.setIn(['isLoading', 'userPageLogs'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS:  return state.setIn(['isLoading', 'userPageFriendsLogs'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_USERS: return state.setIn(['isLoading', 'searchUsers'], action.isLoading);\r\n\r\n    default: return state;\r\n  }\r\n}\r\n\r\n//Селекторы пользовательской информации\r\nexport function getLoggedIn(state) { return state.get('auth').loggedIn; }\r\nexport function getAuth(state) { return state.get('auth');}\r\nexport function getUser(state) {  return state.get('user'); }\r\n\r\n//Селекторы информации о контенте\r\nexport function getContentGame(state) {  return state.get('content').game.main_info; }\r\nexport function getContentGameFriends(state) {  return state.get('content').game.friends_info; }\r\nexport function getContentMovie(state) { return state.get('content').movie.main_info; }\r\nexport function getContentMovieFriends(state) {  return state.get('content').movie.friends_info; }\r\nexport function getContentShow(state) { return state.get('content').show.main_info; }\r\nexport function getContentShowFriends(state) {  return state.get('content').show.friends_info; }\r\n\r\n//Селекторы поисковых результатов\r\nexport function getSearchContentGames(state) { return state.get('searchContent').games;}\r\nexport function getSearchContentMovies(state) { return state.get('searchContent').movies; }\r\nexport function getSearchContentShows(state) { return state.get('searchContent').shows; }\r\nexport function getSearchContentUsers(state) { return state.get('searchContent').users; }\r\n\r\n//Селекторы ошибок\r\nexport function getAuthError(state) { return state.get('errors').auth; }\r\nexport function getRegistrateError(state) { return state.get('errors').registrate; }\r\nexport function getGameRequestError(state) {  return state.get('errors').gameRequest; }\r\nexport function getMovieRequestError(state) { return state.get('errors').movieRequest; }\r\nexport function getShowRequestError(state) { return state.get('errors').showRequest; }\r\nexport function getUserPageError(state) {  return state.get('errors').userPage;}\r\nexport function getResetPasswordError(state) {  return state.get('errors').resetPassword;}\r\nexport function getConfirmPasswordError(state) {  return state.get('errors').confirmPassword;}\r\n\r\n//Селекторы состояния высплывающих окон\r\nexport function getLoginForm(state) { return state.get('openedPages').LoginForm; }\r\nexport function getRegistrateForm (state) { return state.get('openedPages').RegistrateForm; }\r\nexport function getResetPasswordForm (state) { return state.get('openedPages').ResetPasswordForm; }\r\n\r\n//Селекторы состояния загрузки\r\nexport function getIsLoadingContentGame(state) { return state.get('isLoading').contentGame; }\r\nexport function getIsLoadingContentGameFriends(state) { return state.get('isLoading').contentGameFriends; }\r\nexport function getIsLoadingContentMovie(state) {  return state.get('isLoading').contentMovie; }\r\nexport function getIsLoadingContentMovieFriends(state) { return state.get('isLoading').contentMovieFriends; }\r\nexport function getIsLoadingContentShow(state) {  return state.get('isLoading').contentShow; }\r\nexport function getIsLoadingContentShowFriends(state) { return state.get('isLoading').contentShowFriends; }\r\nexport function getIsLoadingSearchGames(state) { return state.get('isLoading').searchGames; }\r\nexport function getIsLoadingSearchMovies(state) { return state.get('isLoading').searchMovies; }\r\nexport function getIsLoadingSearchShows(state) { return state.get('isLoading').searchShows; }\r\nexport function getIsLoadingSearchUsers(state) { return state.get('isLoading').searchUsers;}\r\nexport function getIsLoadingSearchAll(state) { return (state.get('isLoading').searchUsers || state.get('isLoading').searchMovies || state.get('isLoading').searchGames); }\r\nexport function getIsLoadingUserPageContent(state) { return state.get('isLoading').userPageContent; }\r\nexport function getIsLoadingUserPageLogs(state) { return state.get('isLoading').userPageLogs; }\r\nexport function getIsLoadingUserPageFriendsLogs(state) { return state.get('isLoading').userPageFriendsLogs; }\r\n\r\n//Селекторы страницы профиля\r\nexport function getUserPageContent(state){  return state.get('userPageContent').user; }\r\nexport function getUserPageLogs(state){ return state.get('userPageContent').userLogs; }\r\nexport function getUserPageFriendsLogs(state){  return state.get('userPageContent').userFriendsLogs; }","import React from \"react\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\n//import * as actions from '../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction HomePage ({user}) \r\n{\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n\t\t\t\t<h2 style={{marginTop: '70px', marginLeft: '30px'}}>Добро пожаловать на Interests!</h2>\r\n\t\t\t\t<h4 style={{marginLeft: '30px'}}>\r\n\t\t\t\t\tГлавная страница ещё не готова, однако можно воспользоваться <a href='/search/example' style={{fontWeight: '600'}}>поиском</a> или проверить свой <a href={\"/user/\"+user.id} style={{fontWeight: '600'}}>профиль</a>, если вы уже зарегистрированы\r\n\t\t\t\t</h4>\r\n\t\t\t\t<img src=\"images/cool.jpg\" style={{marginLeft: '20px'}} alt=\"Картинка\"/>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: selectors.getUser(state)\r\n});\r\n\r\n  const mapDispatchToProps = () => {\r\n\treturn {\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","/** Время жизни токена в миллисекундах, после истечения которого будет запрошен новый токен*/\r\nexport const TOKEN_LIFETIME = 86000000; \r\n/**Адрес сервера*/\r\nexport const BACKEND_URL = \"http://35.193.124.214:8001/\";\r\n/**Адрес получения токена */\r\nexport const GET_TOKEN_URL = BACKEND_URL + \"users/auth/login/\"; \r\n/**Адрес обновления токена */\r\nexport const REFRESH_TOKEN_URL = BACKEND_URL + \"users/auth/refresh-token/\";\r\n/**Адрес регистрации */\r\nexport const REGISTRATE_URL = BACKEND_URL + \"users/auth/signup/\";\r\n/**Адрес подтверждения почты */\r\nexport const CONFIRM_URL = BACKEND_URL + \"users/auth/confirm_email/\";\r\n/**Адрес сброса пароля */\r\nexport const RESET_PASSWORD_URL = BACKEND_URL + \"users/user/password_reset/\"; \r\n/**Адрес подтверждения сброса пароля */\r\nexport const CONFIRM_PASSWORD_URL = BACKEND_URL + \"users/user/confirm_password_reset/\";\r\n/**Адрес запроса игры */\r\nexport const GET_GAME_URL = BACKEND_URL + \"games/game/\";\r\n/**Адрес поиска игр */\r\nexport const SEARCH_GAMES_URL = BACKEND_URL + \"games/search/\";\r\n/**Адрес запроса фильма */\r\nexport const GET_MOVIE_URL = BACKEND_URL + \"movies/movie/\";\r\n/**Адрес поиска фильмов */\r\nexport const SEARCH_MOVIES_URL = BACKEND_URL + \"movies/search/\";\r\n/**Адрес запроса сериала */\r\nexport const GET_SHOW_URL = BACKEND_URL + \"shows/show/\";\r\n/**Адрес поиска сериалов */\r\nexport const SEARCH_SHOWS_URL = BACKEND_URL + \"shows/search/\";\r\n/**Адрес получения информации о пользователе */\r\nexport const USER_INFO_URL = BACKEND_URL + \"users/user/\";\r\n/**Адрес поиска пользователей */\r\nexport const SEARCH_USERS_URL = BACKEND_URL + \"users/search/\"; \r\n","import axios from \"axios\";\r\nimport jwt_decode from 'jwt-decode';\r\nimport * as urls from '../settings';\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\n/**\r\n * ПОлучение токена авторизации. Токен сохраняется в localStorage\r\n * @param {string} username Имя пользователя\r\n * @param {string} password Пароль \r\n */\r\nexport async function getToken(username, password){\r\n    try{\r\n        const res = await axios.post(urls.GET_TOKEN_URL, {\r\n                    username: username,\r\n                    password: password \r\n                }, axiosConfig);\r\n\r\n        let userData = jwt_decode(res.data.access);\r\n        let user = {username: userData.username, id: userData.user_id, email: userData.email}\r\n\r\n        return {token: res.data.access, refreshToken: res.data.refresh, user: user};\r\n    }catch(e){\r\n        console.log(\"axios error: \" + e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Функция обновления токена\r\n */\r\nexport async function updateToken(refreshToken){\r\n    if (typeof refreshToken !== 'undefined' & refreshToken != null)\r\n        try{\r\n            const res = await axios.post(urls.REFRESH_TOKEN_URL, {\r\n                        refresh: refreshToken\r\n                    }, axiosConfig);\r\n                    \r\n            let userData = jwt_decode(res.data.access);\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n\r\n            return {token: res.data.access, user: user};\r\n        }catch(e){\r\n            console.log(\"exios error: \" + e);\r\n            return null;\r\n        }\r\n    return null;\r\n}\r\n\r\nexport async function registration(username, email, password) {\r\n   try{\r\n        const res = await axios.post(urls.REGISTRATE_URL, \r\n            {  \r\n                username: username,\r\n                email: email, \r\n                password: password, \r\n            }, axiosConfig);\r\n        let data = res.data;\r\n        data.status = res.status;\t\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e.response);\r\n        return e.response;\r\n    }\r\n}\r\n\r\nexport async function confirmation(uid64, token) {\r\n    try{\r\n        const res = await axios.patch(urls.CONFIRM_URL + '?uid64=' + uid64 + '&token=' + token);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }\r\n\r\n export async function resetPassword(email) {\r\n    try{\r\n        const res = await axios.put(urls.RESET_PASSWORD_URL,  {  email: email }, axiosConfig);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }\r\n\r\n export async function confirmPassword(token, password) {\r\n    try{\r\n        const res = await axios.patch(urls.CONFIRM_PASSWORD_URL + '?reset_token=' + token,  { password: password }, axiosConfig);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }","import axios from \"axios\";\r\nimport {GET_GAME_URL, SEARCH_GAMES_URL, USER_INFO_URL, SEARCH_MOVIES_URL, GET_MOVIE_URL, SEARCH_USERS_URL, SEARCH_SHOWS_URL, GET_SHOW_URL} from \"../settings\";\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\naxios.defaults.headers.common = {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getGame(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о фильме\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID фильма  \r\n * @returns {object} Информация о фильме\r\n */\r\nexport async function getMovie(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о сериале\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID сериала  \r\n * @returns {object} Информация о сериале\r\n */\r\nexport async function getShow(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_SHOW_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_SHOW_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о сезоне сериала\r\n * @param {string} token Токен доступа\r\n * @param {string} showID ID сериала \r\n *  * @param {string} seasonNumber номер сезона\r\n * @returns {object} Информация о сериале\r\n */\r\nexport async function getShowSeason(token, showID, seasonNumber) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonNumber, { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonNumber, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о серии сериала\r\n * @param {string} token Токен доступа\r\n * @param {string} showID ID сериала \r\n * @param {string} seasonNumber номер сезона\r\n * @param {string} episodeNumber номер эпизода\r\n * @returns {object} Информация о сериале\r\n */\r\nexport async function getShowEpisode(token, showID, seasonNumber, episodeNumber) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonNumber + \"/episode/\" + episodeNumber, { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonNumber + \"/episode/\" + episodeNumber, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса игры\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус игры\r\n * @param {string} gameSlug Слаг игры\r\n */\r\nexport async function setGameStatus(token, gameSlug, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n\r\n        const res = await axios.put(GET_GAME_URL + gameSlug + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса фильма\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус фильма\r\n * @param {string} movieID ID фильма\r\n */\r\nexport async function setMovieStatus(token, id, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(GET_MOVIE_URL + id + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса сериала\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус сериала\r\n * @param {string} id ID сериала\r\n */\r\nexport async function setShowStatus(token, id, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(GET_SHOW_URL + id + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса сезона сериала\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус сезона сериала\r\n * @param {string} showID ID сериала\r\n *  * @param {string} seasonNumber номер сезона\r\n */\r\nexport async function setShowSeasonStatus(token, showID, seasonNumber, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(GET_SHOW_URL + showID + \"/season/\" + seasonNumber + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса сезона сериала\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус сезона сериала\r\n * @param {string} showID ID сериала\r\n *  * @param {string} seasonNumber номер сезона\r\n */\r\nexport async function setShowEpisodeStatus(token, showID, seasonNumber, episodeNumber, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(GET_SHOW_URL + showID + \"/season/\" + seasonNumber + \"/episode/\" + episodeNumber + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск игр\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchGames(query, page, gamesCount){\r\n    try{\r\n        const res = await axios.get(SEARCH_GAMES_URL, { params : {query: query, page: page, page_size: gamesCount} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n        console.warn(res.data);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск фильмов\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchMovies(query, page){\r\n    try{\r\n        const res = await axios.get(SEARCH_MOVIES_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n            console.log(res);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск сериалов\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchShows(query, page){\r\n    try{\r\n        const res = await axios.get(SEARCH_SHOWS_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n            console.log(res);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск пользователей\r\n * @param {string} query Поисковый запрос\r\n */\r\nexport async function searchUsers(query){\r\n    try{\r\n        const res = await axios.get(SEARCH_USERS_URL, { params : {query: query} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n            console.log(res);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getUserInfo(token, userID) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса пользовтеля (добавить в друзья и тд)\r\n * @param {string} token Токен доступа\r\n * @param {boolean} is_following Статус фильма\r\n * @param {string} userID ID пользовтеля\r\n */\r\nexport async function setUserStatus(token, is_following, userID){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(USER_INFO_URL + userID + \"/follow/\", \r\n            is_following, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий лог пользователя\r\n * @param {string} userID ID пользователя\r\n * @param {string} page страница \r\n * @param {int} resultsOnPage количество результатов на странице \r\n */\r\nexport async function getUserLog(token, userID, page, resultsOnPage) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/log/\", { params : { page: page, page_size: resultsOnPage } }, { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/log/\", { params : { page: page, page_size: resultsOnPage } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий лог друзей пользователя\r\n * @param {string} userID ID пользователя\r\n * @param {int} page страница\r\n * @param {int} resultsOnPage количество результатов на странице \r\n */\r\nexport async function getUserFriendsLog(token, userID, page, resultsOnPage) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(USER_INFO_URL + userID + \"/friends_log/\", { params : { page: page, page_size: resultsOnPage }, 'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для игры\r\n * @param {string} slug slug игры\r\n * @param {int} page страница\r\n */\r\nexport async function getGameFriends(token, slug, page) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_GAME_URL + slug + \"/friends_info/\", { params : { page: page } , 'headers': { 'Authorization': AuthStr } });\r\n        console.log(res);\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для фильма\r\n * @param {string} id id фильма\r\n * @param {int} page страница\r\n */\r\nexport async function getMovieFriends(token, id, page) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_MOVIE_URL + id + \"/friends_info/\", { params : { page: page } , 'headers': { 'Authorization': AuthStr } });\r\n        console.log(res);\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для сериала\r\n * @param {string} showID id сериала\r\n * @param {int} page страница\r\n */\r\nexport async function getShowFriends(token, showID, page) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_SHOW_URL + showID + \"/friends_info/\", { params : { page: page } , 'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для сезона сериала\r\n * @param {string} showID id сериала\r\n * @param {int} page страница\r\n */\r\nexport async function getShowSeasonFriends(token, showID, seasonID, page) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonID + \"/friends_info/\", { params : { page: page } , 'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для эпизода сериала\r\n * @param {string} showID id сериала\r\n * @param {int} page страница\r\n */\r\nexport async function getShowEpisodeFriends(token, showID, seasonID, episodeID, page) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonID + \"/episode/\" + episodeID + \"/friends_info/\", { params : { page: page } , 'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}","import * as actionTypes from './actionTypes';\r\nimport * as selectors from './reducers';\r\nimport * as auth from \"../services/jwtAuth\";\r\nimport {TOKEN_LIFETIME} from \"../settings\";\r\nimport * as Requests from \"../services/requests\";\r\nimport { toast } from \"react-toastify\";\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nexport function tryAuth(login, password) {\r\n    return async(dispatch) => {\r\n        \r\n        setError(dispatch, actionTypes.AUTH_ERROR, false);\r\n\r\n      try {\r\n        const res = await auth.getToken(login, password);\r\n        if (res !== null){\r\n            localStorage.setItem('refreshToken', res.refreshToken);\r\n            localStorage.setItem('token', res.token);\r\n            localStorage.setItem('tokenTime', Date.now());\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: res.user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_LOGINFORM,\r\n                isOpen: false \r\n            });\r\n        }else{\r\n            setError(dispatch, actionTypes.AUTH_ERROR, true);\r\n        }\r\n            \r\n      }catch (error) {\r\n        console.error(error);\r\n        setError(dispatch, actionTypes.AUTH_ERROR, true);\r\n      }\r\n    };\r\n}\r\n\r\nexport function checkAuthorization(){\r\n    return async(dispatch) => {\r\n        if (localStorage.getItem('token') === null | Date.now() - localStorage.getItem('tokenTime') > TOKEN_LIFETIME){\r\n            const res = await auth.updateToken(localStorage.getItem(\"refreshToken\"));\r\n            if (res !== null){\r\n                dispatch({\r\n                    type: actionTypes.SET_AUTH,\r\n                    auth: { loggedIn: true }, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: res.user, \r\n                });\r\n                localStorage.setItem('token', res.token);\r\n                localStorage.setItem('tokenTime', Date.now());\r\n                return true;\r\n            }else{\r\n                //toast.warn(\"Произошла ошибка авторизации. Зайдите ещё раз\");\r\n                dispatch(resetAuthorization());\r\n                return false;\r\n            } \r\n        }else{\r\n            let userData = jwt_decode(localStorage.getItem('token'));\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            return true;\r\n        }\r\n            \r\n    }\r\n}\r\n\r\nexport function resetAuthorization(){\r\n    return async(dispatch) => {\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('tokenTime');\r\n        dispatch({\r\n            type: actionTypes.SET_AUTH,\r\n            auth: { loggedIn: false }, \r\n        });\r\n        dispatch({\r\n            type: actionTypes.SET_USER,\r\n            user: { username:\"\", id: null, email:\"\" }, \r\n        });\r\n    }\r\n}\r\n\r\nexport function registrationRequest(username, email, password){\r\n    return async(dispatch) => {\r\n        setError(dispatch, actionTypes.REGISTRATE_ERROR, false);\r\n        auth.registration(username, email, password).then((result) => {\r\n            console.log(result);\r\n            if (result.status === 201 | result.status === 200){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: { login: result.username, email: result.email }, \r\n                });\r\n            }\r\n            else{\r\n                for (let error in result.data)\r\n                    toast.error(result.data[error][0]);\r\n                \r\n                setError(dispatch, actionTypes.REGISTRATE_ERROR, true);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function confirmEmailRequest(uid64, token){\r\n    return async() => {\r\n        auth.confirmation(uid64, token).then((result) => {\r\n            console.log(result);\r\n            if (result.status === 200){\r\n                toast.success(\"Почта подтверждена!\");\r\n            }\r\n            else{\r\n                if (result.data)\r\n                    toast.error(result.data.error);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestGame(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME, true);\r\n        setError(dispatch, actionTypes.GAME_REQUEST_ERROR, false);\r\n        Requests.getGame(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME,\r\n                    game: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Игра не найдена!\");\r\n                setError(dispatch, actionTypes.GAME_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME, false);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport function requestGameFriends(slug, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME_FRIENDS, true);\r\n        Requests.getGameFriends(localStorage.getItem('token'), slug, page).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME_FRIENDS,\r\n                    info: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME_FRIENDS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestMovie(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE, true);\r\n        setError(dispatch, actionTypes.MOVIE_REQUEST_ERROR, false);\r\n        Requests.getMovie(localStorage.getItem('token'), id).then((result) => {\r\n            console.log(result);\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_MOVIE,\r\n                    movie: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Фильм не найден!\");\r\n                setError(dispatch, actionTypes.MOVIE_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestMovieFriends(id, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE_FRIENDS, true);\r\n        Requests.getMovieFriends(localStorage.getItem('token'), id, page).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_MOVIE_FRIENDS,\r\n                    info: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE_FRIENDS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShow(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, true);\r\n        setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, false);\r\n        Requests.getShow(localStorage.getItem('token'), id).then((result) => {\r\n            console.log(result);\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW,\r\n                    show: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Сериал не найден!\");\r\n                setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowSeason(showID, seasonNumber){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, true);\r\n        setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, false);\r\n        Requests.getShowSeason(localStorage.getItem('token'), showID, seasonNumber).then((result) => {\r\n            console.log(result);\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW,\r\n                    show: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Сериал не найден!\");\r\n                setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowEpisode(showID, seasonNumber, episodeNumber){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, true);\r\n        setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, false);\r\n        Requests.getShowEpisode(localStorage.getItem('token'), showID, seasonNumber, episodeNumber).then((result) => {\r\n            console.log(result);\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW,\r\n                    show: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Серия не найдена!\");\r\n                setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowFriends(id, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_FRIENDS, true);\r\n        Requests.getShowFriends(localStorage.getItem('token'), id, page).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW_FRIENDS,\r\n                    info: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_FRIENDS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowSeasonFriends(showID, seasonID, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_FRIENDS, true);\r\n        Requests.getShowSeasonFriends(localStorage.getItem('token'), showID, seasonID, page).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW_FRIENDS,\r\n                    info: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_FRIENDS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowEpisodeFriends(showID, seasonID, episodeID, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_FRIENDS, true);\r\n        Requests.getShowEpisodeFriends(localStorage.getItem('token'), showID, seasonID, episodeID, page).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW_FRIENDS,\r\n                    info: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_FRIENDS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setGameStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setGameStatus(localStorage.getItem('token'), selectors.getContentGame(getState()).rawg.slug, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_GAME_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function requestUserPageContent(username){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT, true);\r\n        setError(dispatch, actionTypes.USER_PAGE_ERROR, false);\r\n        Requests.getUserInfo(localStorage.getItem('token'), username).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_CONTENT,\r\n                    content: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Профиль не найден!\");\r\n                setError(dispatch, actionTypes.USER_PAGE_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestUserPageLogs(userID, page, resultsOnPage){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_LOGS, true);\r\n        Requests.getUserLog(localStorage.getItem('token'), userID, page, resultsOnPage).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_LOGs,\r\n                    logs: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n                \r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_LOGS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestUserPageFriendsLogs(userID, page, resultsOnPage){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS, true);\r\n        Requests.getUserFriendsLog(localStorage.getItem('token'), userID, page, resultsOnPage).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_FRIENDS_LOGS,\r\n                    logs: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchGames(query, page, gamesCount){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_GAMES, true);\r\n        Requests.searchGames(query, page, gamesCount).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_GAMES,\r\n                    games: result, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_GAMES, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchMovies(query, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_MOVIES, true);\r\n        Requests.searchMovies(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска фильмов\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_MOVIES,\r\n                    movies: result.results, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_MOVIES, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchShows(query, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_SHOWS, true);\r\n        Requests.searchShows(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска сериалов\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_SHOWS,\r\n                    shows: result.results, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_SHOWS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setMovieStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setMovieStatus(localStorage.getItem('token'), selectors.getContentMovie(getState()).tmdb.id, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_MOVIE_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function setShowStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setShowStatus(localStorage.getItem('token'), selectors.getContentShow(getState()).tmdb.id, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_SHOW_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function setShowSeasonStatus(user_info, showID, seasonNumber){\r\n    return async(dispatch) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setShowSeasonStatus(localStorage.getItem('token'), showID, seasonNumber, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_SHOW_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function setShowEpisodeStatus(user_info, showID, seasonNumber, episodeNumber){\r\n    return async(dispatch) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setShowEpisodeStatus(localStorage.getItem('token'), showID, seasonNumber, episodeNumber, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_SHOW_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function setShowEpisodeStatusInRow(user_info, showID, seasonNumber, episodeNumber){\r\n    return async(dispatch) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setShowEpisodeStatus(localStorage.getItem('token'), showID, seasonNumber, episodeNumber, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    \r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function searchUsers(query){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_USERS, true);\r\n        Requests.searchUsers(query).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_USERS,\r\n                    users: result, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_USERS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setUserStatus(is_following, userID){\r\n    return async(dispatch) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setUserStatus(localStorage.getItem('token'), is_following, userID).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_USER_PAGE_FOLLOWING,\r\n                        is_following: result.is_following\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function resetPassword(email){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.RESET_PASSWORD_ERROR,\r\n            error: false\r\n        });\r\n        auth.resetPassword(email).then((result) => {\r\n            if (result.status !== 200){\r\n                dispatch({\r\n                    type: actionTypes.RESET_PASSWORD_ERROR,\r\n                    error: result.data.error\r\n                });\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.RESET_PASSWORD_ERROR,\r\n                    error: 'ok'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function confirmPassword(token, password){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n            error: false\r\n        });\r\n        auth.confirmPassword(token, password).then((result) => {\r\n            if (result.status !== 200){\r\n                dispatch({\r\n                    type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n                    error: result.data.error?result.data.error:'Неизвестная ошибка'\r\n                });\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n                    error: 'ok'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function setUser(user) {\r\n    return({ type: actionTypes.SET_USER, user: user });\r\n}\r\n\r\nexport function openLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: false  });\r\n}\r\n\r\nexport function openRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: false  });\r\n}\r\n\r\nexport function openResetPasswordForm() {\r\n    return({ type: actionTypes.SET_RESET_PASSWORD_FORM, isOpen: true  });\r\n}\r\n\r\nexport function closeResetPasswordForm() {\r\n    return({ type: actionTypes.SET_RESET_PASSWORD_FORM, isOpen: false  });\r\n}\r\n\r\nfunction setLoading(dispatch, type, isLoading){\r\n    dispatch({\r\n        type: type,\r\n        isLoading: isLoading\r\n    });\r\n}\r\n\r\nfunction setError(dispatch, type, isError){\r\n    dispatch({\r\n        type: type,\r\n        error: isError\r\n    });\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport './style.css';\r\n\r\nfunction StatusButtonGroup( {statuses, activeColor, onChangeStatus, userStatus} ) {\r\n    const [activeStatus, setActiveStatus] = useState('');\r\n\r\n    useEffect(() =>{\r\n            setActiveStatus(userStatus?userStatus:statuses[0]);\r\n        },\r\n        [statuses, userStatus]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            {statuses.map((status) => <button className={'contentStatuses'} \r\n                                            key={status}\r\n                                            style={{backgroundColor: (activeStatus === status?activeColor:'#000000')}}\r\n                                            onClick={()=>{ \r\n                                                if (onChangeStatus(status)){\r\n                                                    setActiveStatus(status);\r\n                                                }\r\n                                            }}>\r\n                                            {status}\r\n                                        </button>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default StatusButtonGroup;\r\n","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction FriendsActivityRow ( {info} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n        <div className=\"fActivityBlock\">\r\n            <h5 className='fActivityUser'>\r\n                <a href={window.location.origin + '/user/' + info.user.id} \r\n                        onClick={(e) => { history.push('/user/' + info.user.id); e.preventDefault();}}\r\n                    >\r\n                    {info.user.username}\r\n                </a>\r\n            </h5>\r\n            <div className='fActivityInfo'>\r\n                <Rating stop={10}\r\n                                    emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\"/>}\r\n                                    fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" title={n}/>)}\r\n                                    initialRating={info.score}\r\n                                    className=\"fActivityInfoText\"\r\n                                    readonly={true}\r\n                        />\r\n                <p className=\"fActivityInfoText\">Статус: {info.status} </p>\r\n                <p className=\"fActivityInfoText\" hidden={!(info.spent_time)}>Время проходения: {info.spent_time} {intToHours(info.spent_time)}</p>\r\n                <p className=\"fActivityInfoText\" hidden={info.review===\"\"}>Отзыв: {info.review}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction intToHours(number){\r\n    if (11 <= number && number <= 14)\r\n        return 'часов'\r\n    else if (number % 10 === 1)\r\n        return 'час'\r\n    else if (2 <= number % 10 && number % 10 <= 4)\r\n        return 'часа'\r\n    else\r\n        return 'часов'\r\n}\r\n\r\nexport default FriendsActivityRow;","import React from \"react\";\r\nimport FriendsActivityRow from './FriendsActivityRow';\r\n\r\nfunction FriendsActivity ( {info} ) {\r\n\r\n    return(\r\n        <div className=\"friendsBlock\">\r\n            { info.friends_info.map((friendInfo) => <FriendsActivityRow info={friendInfo} key={friendInfo.user.id}/>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FriendsActivity;","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport './style.css';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction GamePage ( {requestGame, game, loggedIn, openLoginForm, setGameStatus, gameIsLoading, requestGameFriends, gameFriends, gameFriendsIsLoading\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [spentTime, setSpentTime] = useState(0);\r\n    const [developers, setDevelopers] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [hltbInfo, setHtlbInfo] = useState({gameplay_main_extra: -1, gameplay_main: -1, gameplay_comletionist: -1});\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestGame(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestGame]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestGameFriends(id, 1);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (game.rawg.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < game.rawg.genres.length; i++){\r\n                    newGenres += game.rawg.genres[i].name;\r\n                    if (i !== game.rawg.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                 setGenres(newGenres);   \r\n            }\r\n\r\n            if (game.rawg.metacritic){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{game.rawg.metacritic}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">Metascore</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            if (game.hltb){\r\n                setHtlbInfo(game.hltb);\r\n            }else if (game.rawg.playtime){\r\n                setHtlbInfo({gameplay_main_extra: game.rawg.playtime, gameplay_main: -1, gameplay_completionist: -1});\r\n            }else{\r\n                setHtlbInfo({gameplay_main_extra: -1, gameplay_main: -1, gameplay_completionist: -1});\r\n            }\r\n\r\n            if (game.user_info){\r\n                setReview(game.user_info.review);\r\n                setSpentTime(game.user_info.spent_time);\r\n            }\r\n\r\n            if (game.rawg.developers){\r\n                let newDevelopers = \"\"\r\n                for (let i = 0; i < game.rawg.developers.length; i++){\r\n                    newDevelopers += game.rawg.developers[i].name;\r\n                    if (i !== game.rawg.developers.length - 1)\r\n                    newDevelopers += \", \";\r\n                }\r\n                setDevelopers(newDevelopers);   \r\n            }\r\n\r\n            if (game.rawg.released){\r\n                let mas = game.rawg.released.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            document.title = game.rawg.name;\r\n\t\t},\r\n\t\t[game]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${game.rawg.background_image_additional?game.rawg.background_image_additional:game.rawg.background_image})`}}/>\r\n                <LoadingOverlay\r\n                    active={gameIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"gameContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"gameContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\">\r\n                                        <img src={game.rawg.background_image} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{game.rawg.name}</h1>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p>Разработчики: {developers}</p>\r\n                                            <p>Дата релиза: {date}</p>\r\n                                            <p>Жанр: {genres}</p>\r\n                                            <p style={{display: \"inline\"}} >Время прохождения: </p>\r\n                                            <div hidden={hltbInfo.gameplay_main < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"light-green-text\" title={\"Главный сюжет\"}/><span className=\"hs\"/>{hltbInfo.gameplay_main} {hltbInfo.gameplay_main_unit}<span className=\"hs\"/>\r\n                                            </div> <p style={{display: \"inline\"}} > </p>\r\n                                            <div hidden={hltbInfo.gameplay_main_extra < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"yellow-text\" title={\"Главный сюжет + побочные задания\"}/><span className=\"hs\"/>{hltbInfo.gameplay_main_extra} {hltbInfo.gameplay_main_extra_unit}<span className=\"hs\"/> \r\n                                            </div> <p style={{display: \"inline\"}} > </p>\r\n                                            <div hidden={hltbInfo.gameplay_completionist < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"red-text\" title={\"Полное прохождение\"}/><span className=\"hs\"/>{hltbInfo.gameplay_completionist} {hltbInfo.gameplay_completionist_unit}\r\n                                            </div>\r\n                                        </div>\r\n                                        <Rating stop={10}\r\n                                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                            initialRating={game.user_info?game.user_info.score:0}\r\n                                            readonly={!loggedIn | (!game.user_info)}\r\n                                            onChange={(score) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setGameStatus({score: score, review: document.getElementById('reviewInput').value, \r\n                                                                    spent_time: document.getElementById('spentTimeInput').value });\r\n                                                }}\r\n                                            }\r\n                                            style={{marginBottom: \"10px\"}}\r\n                                        /> <br/>\r\n                                        <StatusButtonGroup\r\n                                            statuses={['Не играл', 'Буду играть', 'Играю', 'Дропнул', 'Прошел']}\r\n                                            activeColor='#4527a0' \r\n                                            userStatus={game.user_info?game.user_info.status:'Не играл'}\r\n                                            onChangeStatus={(status) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setGameStatus(\r\n                                                        { \r\n                                                           status: status,\r\n                                                           review: document.getElementById('reviewInput').value, \r\n                                                           spent_time: document.getElementById('spentTimeInput').value\r\n                                                        }\r\n                                                    );\r\n                                                }\r\n                                            }}\r\n                                            />\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"gameContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: game.rawg.description}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"20px\"}}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        \r\n                                        <MDBInput \r\n                                            type=\"textarea\" \r\n                                            id=\"reviewInput\"\r\n                                            label=\"Ваш отзыв\" \r\n                                            value={review}\r\n                                            onChange={(event) =>setReview(event.target.value)}\r\n                                            outline\r\n                                        />\r\n                                        <MDBInput\r\n                                            type=\"number\"\r\n                                            id=\"spentTimeInput\"\r\n                                            label=\"Время прохождения (часы)\" \r\n                                            value={spentTime}\r\n                                            onChange={(event) =>setSpentTime(event.target.value)}\r\n                                        />\r\n                                        <button \r\n                                            className={'savePreviewButton'} \r\n                                            disabled={!loggedIn | (!game.user_info)}\r\n                                            onClick={() => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setGameStatus({   review: document.getElementById('reviewInput').value, spent_time: document.getElementById('spentTimeInput').value });\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            >\r\n                                            Сохранить\r\n                                        </button>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBContainer>\r\n                            <div className=\"gameFriendsBlock\" hidden={gameFriends.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={gameFriends}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getGameRequestError(state),\r\n    game: selectors.getContentGame(state),\r\n    gameIsLoading: selectors.getIsLoadingContentGame(state),\r\n    gameFriends: selectors.getContentGameFriends(state),\r\n    gameFriendsIsLoading: selectors.getIsLoadingContentGameFriends(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestGame: (id) => {\r\n            dispatch(actions.requestGame(id));\r\n        },\r\n        requestGameFriends: (slug, page) => {\r\n            dispatch(actions.requestGameFriends(slug, page));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        setGameStatus: (status) => {\r\n            dispatch(actions.setGameStatus(status));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction MoviePage ( {\r\n        requestMovie, movie, movieIsLoading, setMovieStatus,\r\n        requestMovieFriends, movieFriends, movieFriendsIsLoading,\r\n        loggedIn, openLoginForm, \r\n    } ) {\r\n    let { id } = useParams();\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [companies, setCompanies] = useState(\"\");\r\n    const [cast, setCast] = useState(\"\");\r\n    const [director, setDirector] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestMovie(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestMovie]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestMovieFriends(id, 1);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (movie.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{movie.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            if (movie.tmdb.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < movie.tmdb.genres.length; i++){\r\n                    newGenres += movie.tmdb.genres[i].name;\r\n                    if (i !== movie.tmdb.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                setGenres(newGenres);   \r\n            }\r\n\r\n            if (movie.tmdb.production_companies){\r\n                let newCompanies = \"\"\r\n                for (let i = 0; i < movie.tmdb.production_companies.length; i++){\r\n                    newCompanies += movie.tmdb.production_companies[i].name;\r\n                    if (i !== movie.tmdb.production_companies.length - 1)\r\n                        newCompanies += \", \";\r\n                }\r\n                setCompanies(newCompanies);   \r\n            }\r\n\r\n            if (movie.tmdb.cast){\r\n                let newCast = \"\";\r\n                let length = movie.tmdb.cast.length>5?5:movie.tmdb.cast.length;\r\n                for (let i = 0; i < length; i++){\r\n                    newCast += movie.tmdb.cast[i].name;\r\n                    if (i !== length - 1)\r\n                        newCast += \", \";\r\n                }\r\n                setCast(newCast);   \r\n            }\r\n\r\n            if (movie.tmdb.crew){\r\n                let newDirector = \"\"\r\n                for (let i = 0; i < movie.tmdb.crew.length; i++){\r\n                    if (movie.tmdb.crew[i].job === \"Director\"){\r\n                        newDirector = movie.tmdb.crew[i].name;\r\n                        break;\r\n                    }\r\n                }\r\n                setDirector(newDirector);   \r\n            }\r\n\r\n            if (movie.user_info){\r\n                setReview(movie.user_info.review);\r\n            }\r\n\r\n            document.title = movie.tmdb.title;\r\n\t\t},\r\n\t\t[movie]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + movie.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={movieIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"movieContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"movieContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\" className=\"posterBlock\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{movie.tmdb.title}</h1>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p>Дата релиза: {movie.tmdb.release_date}</p>\r\n                                            <p>Продолжительность (мин): {movie.tmdb.runtime}</p>\r\n                                            <p>Жанр: {genres}</p>\r\n                                            <p>Компания: {companies}</p>\r\n                                            <p>Слоган: {movie.tmdb.tagline}</p>\r\n                                            <p>В ролях: {cast}</p>\r\n                                            <p>Режиссер: {director}</p>\r\n                                        </div>\r\n                                        <Rating stop={10}\r\n                                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                            initialRating={movie.user_info?movie.user_info.score:0}\r\n                                            readonly={!loggedIn | (!movie.user_info)}\r\n                                            onChange={(score) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setMovieStatus({score: score, review: document.getElementById('reviewInput').value });\r\n                                                }}\r\n                                            }\r\n                                        /> <br/>\r\n                                        <StatusButtonGroup loggedIn={loggedIn} \r\n                                            statuses={['Не смотрел', 'Буду смотреть', 'Дропнул', 'Посмотрел']}\r\n                                            activeColor='#4527a0' \r\n                                            userStatus={movie.user_info?movie.user_info.status:'Не смотрел'}\r\n                                            onChangeStatus={(status) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                   setMovieStatus({ status: status, review: document.getElementById('reviewInput').value });\r\n                                                }\r\n                                            }}/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"movieContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: movie.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"10px\"}}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        \r\n                                        <MDBInput \r\n                                            type=\"textarea\" \r\n                                            id=\"reviewInput\"\r\n                                            label=\"Ваш отзыв\" \r\n                                            value={review}\r\n                                            onChange={(event) =>setReview(event.target.value)}\r\n                                            outline\r\n                                        />\r\n                                        <button \r\n                                            className={'savePreviewButton'} \r\n                                            disabled={!loggedIn | (!movie.user_info)}\r\n                                            onClick={() => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setMovieStatus({   review: document.getElementById('reviewInput').value });\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            >\r\n                                            Сохранить\r\n                                        </button>\r\n                                    </MDBCol>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={movieFriends.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={movieFriends}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getMovieRequestError(state),\r\n    movie: selectors.getContentMovie(state),\r\n    movieIsLoading: selectors.getIsLoadingContentMovie(state),\r\n    movieFriends: selectors.getContentMovieFriends(state),\r\n    movieFriendsIsLoading: selectors.getIsLoadingContentMovieFriends(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestMovie: (id) => {\r\n            dispatch(actions.requestMovie(id));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        setMovieStatus: (status) => {\r\n            dispatch(actions.setMovieStatus(status));\r\n        },\r\n        requestMovieFriends: (id, page) => {\r\n            dispatch(actions.requestMovieFriends(id, page));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviePage);\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport './style.css';\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction EpisodeRow ( {episode, season, showID, userInfo, setShowEpisodeUserStatus, loggedIn} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [episode]\r\n    );\r\n\r\n    return(\r\n        <div className=\"episodeRow\">\r\n            <a className=\"episodeRowName episodeLink\" \r\n                href={window.location.origin + '/show/' + showID + '/season/' + season + '/episode/'+ episode} \r\n                onClick={(e) => { history.push('/show/' + showID + '/season/' + season + '/episode/'+ episode); e.preventDefault();}}\r\n                >\r\n                Серия {episode}\r\n            </a>\r\n            <Rating start={-1} stop={10}\r\n                emptySymbol={[<MDBIcon icon=\"eye-slash\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon far icon=\"star\" size=\"1x\" />))}\r\n                fullSymbol={[<MDBIcon icon=\"eye\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\"title={n}/>))}\r\n                readonly={!loggedIn}\r\n                initialRating={userInfo?userInfo.score:-1}\r\n                onChange={(score) => {\r\n                        setShowEpisodeUserStatus({score: score}, showID, season, episode );\r\n                    }\r\n                }\r\n            />  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EpisodeRow;","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport './style.css';\r\nimport EpisodeRow from './EpisodeRow';\r\n\r\nfunction SeasonsBlock ( {seasons, showID, setShowEpisodeUserStatus, loggedIn} ) {\r\n    let history = useHistory();\r\n\r\n    const [hereSeasons, setHereSeasons] = useState([]);\r\n\r\n    useEffect(() =>{\r\n        setHereSeasons([]);\r\n        if (seasons){\r\n            let newSeasons = [];\r\n            for (let season in seasons){\r\n                if (seasons[season].name !== 'Спецматериалы'){\r\n                    let newSeason = seasons[season];\r\n                    newSeason.episodes = [];\r\n                    for (let i = 1; i <= seasons[season].episode_count; i++)\r\n                        newSeason.episodes.push(i);\r\n                    newSeasons.push(newSeason);\r\n                }\r\n            }\r\n            setHereSeasons(newSeasons);\r\n        }\r\n            \r\n    },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [seasons]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            { \r\n                hereSeasons.map((season) => \r\n                    <div key={season.id} className=\"seasonBlock\">\r\n                        <div className='seasonName'>\r\n                            <a \r\n                                href={window.location.origin + '/show/' + showID + '/season/' + season.season_number} \r\n                                onClick={(e) => { history.push('/show/' + showID + '/season/' + season.season_number); e.preventDefault();}}\r\n                                >\r\n                                <h5 > {season.name} </h5>\r\n                            </a>\r\n                        </div>\r\n                        <details open={false} className='episodeRows'>\r\n                            <summary>Развернуть</summary>\r\n                                <ul>\r\n                                {  season.episodes.map((episode) => <li className=\"episode\" key={season.id+episode}><EpisodeRow episode={episode} season={season.season_number} showID={showID} userInfo={season.episodes_user_info.find(info => info.episode_number === episode)} setShowEpisodeUserStatus={setShowEpisodeUserStatus} loggedIn={loggedIn}/></li>) }\r\n                                </ul>\r\n                        </details>\r\n                        \r\n                    </div>\r\n                )  \r\n            } \r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default SeasonsBlock;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\nimport SeasonsBlock from \"./SeasonsBlock\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ShowPage ( {requestShow, show, showIsLoading, setShowUserStatus, setShowEpisodeUserStatus,\r\n                    requestShowFriends, showFriends, showFriendsIsLoading,\r\n                    loggedIn, openLoginForm\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [companies, setCompanies] = useState(\"\");\r\n    const [showStatus, setShowStatus] = useState(\"\");\r\n    const [firstDate, setFirstDate] = useState(\"\");\r\n    const [lastDate, setLastDate] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestShow(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestShow]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestShowFriends(id, 1);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (show.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{show.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            if (show.tmdb.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < show.tmdb.genres.length; i++){\r\n                    newGenres += show.tmdb.genres[i].name;\r\n                    if (i !== show.tmdb.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                setGenres(newGenres);   \r\n            }\r\n\r\n            if (show.tmdb.production_companies){\r\n                let newCompanies = \"\"\r\n                for (let i = 0; i < show.tmdb.production_companies.length; i++){\r\n                    newCompanies += show.tmdb.production_companies[i].name;\r\n                    if (i !== show.tmdb.production_companies.length - 1)\r\n                        newCompanies += \", \";\r\n                }\r\n                setCompanies(newCompanies);   \r\n            }\r\n\r\n            \r\n            switch (show.tmdb.status){\r\n                case 'Ended':\r\n                    setShowStatus('Окончен');break;\r\n                case 'Returning Series':\r\n                    setShowStatus('Продолжается');break;\r\n                case 'Pilot':\r\n                    setShowStatus('Пилот');break;\r\n                case 'Canceled':\r\n                    setShowStatus('Отменен');break;\r\n                case 'In Production':\r\n                    setShowStatus('В производстве');break;\r\n                case 'Planned':\r\n                    setShowStatus('Запланирован');break;\r\n                default:\r\n                    setShowStatus(show.tmdb.status);\r\n            } \r\n\r\n            if (show.tmdb.first_air_date){\r\n                let mas = show.tmdb.first_air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setFirstDate(newDate);\r\n            }else\r\n                setFirstDate(\"\");\r\n\r\n            if (show.tmdb.last_air_date){\r\n                let mas = show.tmdb.last_air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setLastDate(newDate);\r\n            }else\r\n                setLastDate(\"\");\r\n\r\n            if (show.user_info){\r\n                setReview(show.user_info.review);\r\n            }\r\n\r\n            document.title = show.tmdb.name;\r\n\t\t},\r\n\t\t[show]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + show.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={showIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"showContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"showContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\" className=\"posterBlock\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + show.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{show.tmdb.name}</h1>\r\n                                        <h5 style={{marginBottom: \"10px\", marginTop: \"-10px\"}}>{show.tmdb.original_name}</h5>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p>Жанр: {genres}</p>\r\n                                            <p>Компания: {companies}</p>\r\n                                            <p hidden={firstDate===''}>Дата выхода первой серии: {firstDate}</p>\r\n                                            <p hidden={lastDate===''}>Дата выхода последней серии: {lastDate}</p>\r\n                                            <p hidden={show.tmdb.episode_run_time?false:true}>Продолжительность (мин): {show.tmdb.episode_run_time?show.tmdb.episode_run_time[0]:0}</p>\r\n                                            <p>Количество сезонов: {show.tmdb.number_of_seasons}</p>\r\n                                            <p>Количество серий: {show.tmdb.number_of_episodes}</p>\r\n                                            <p>Статус: {showStatus}</p>\r\n                                        </div>\r\n                                        <Rating stop={10}\r\n                                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                            initialRating={show.user_info?show.user_info.score:0}\r\n                                            readonly={!loggedIn | (!show.user_info)}\r\n                                            onChange={(score) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setShowUserStatus({score: score, review: document.getElementById('reviewInput').value });\r\n                                                }}\r\n                                            }\r\n                                        /> <br/>\r\n                                        <StatusButtonGroup loggedIn={loggedIn} \r\n                                            statuses={['Не смотрел', 'Буду смотреть', 'Смотрю', 'Дропнул', 'Посмотрел']}\r\n                                            activeColor='#4527a0' \r\n                                            userStatus={show.user_info?show.user_info.status:'Не смотрел'}\r\n                                            onChangeStatus={(status) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setShowUserStatus({ status: status, review: document.getElementById('reviewInput').value });\r\n                                                }\r\n                                            }}/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"showContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: show.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <div className=\"showContentBody\"> \r\n                                    <h3 style={{paddingTop: \"15px\"}}>Список серий</h3>\r\n                                    <SeasonsBlock seasons={show.tmdb.seasons} showID={show.tmdb.id} loggedIn={loggedIn} setShowEpisodeUserStatus={setShowEpisodeUserStatus}/>\r\n                                </div>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"10px\"}}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        \r\n                                    <MDBInput \r\n                                        type=\"textarea\" \r\n                                        id=\"reviewInput\"\r\n                                        label=\"Ваш отзыв\" \r\n                                        value={review}\r\n                                        onChange={(event) =>setReview(event.target.value)}\r\n                                        outline\r\n                                    />\r\n                                    <button \r\n                                        className={'savePreviewButton'} \r\n                                        disabled={!loggedIn | (!show.user_info)}\r\n                                        onClick={() => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setShowUserStatus({ review: document.getElementById('reviewInput').value });\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        >\r\n                                        Сохранить\r\n                                    </button>\r\n                                </MDBCol>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={showFriends.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={showFriends}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getShowRequestError(state),\r\n    show: selectors.getContentShow(state),\r\n    showIsLoading: selectors.getIsLoadingContentShow(state),\r\n    showFriends: selectors.getContentShowFriends(state),\r\n    showFriendsIsLoading: selectors.getIsLoadingContentShowFriends(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestShow: (id) => {\r\n            dispatch(actions.requestShow(id));\r\n        },\r\n        setShowUserStatus: (status) => {\r\n            dispatch(actions.setShowStatus(status));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        requestShowFriends: (id, page) => {\r\n            dispatch(actions.requestShowFriends(id, page));\r\n        },\r\n        setShowEpisodeUserStatus: (status, showID, seasonNumber, episodeNumber) => {\r\n            dispatch(actions.setShowEpisodeStatusInRow(status, showID, seasonNumber, episodeNumber));\r\n        },\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowPage);\r\n","import React, { useEffect} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './style.css';\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction DetailedEpisodeRow ( {episode, showID, setShowEpisodeUserStatus, loggedIn} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [episode]\r\n    );\r\n\r\n    function parseDate(date){\r\n        let newDate = new Date(date);\r\n        return newDate.toLocaleDateString(\"ru-RU\");\r\n    }\r\n\r\n    return(\r\n        <div className=\"episodeRow detailRow\">\r\n            <p className=\"episodeDate\">{parseDate(episode.air_date)}</p>\r\n            <a className=\"episodeRowName episodeLink\" \r\n                href={window.location.origin + '/show/' + showID + '/season/' + episode.season_number + '/episode/'+ episode.episode_number} \r\n                onClick={(e) => { history.push('/show/' + showID + '/season/' + episode.season_number + '/episode/'+ episode.episode_number); e.preventDefault();}}\r\n                >\r\n                Серия {episode.episode_number} - {episode.name}\r\n            </a>  \r\n            <Rating start={-1} stop={10}\r\n                emptySymbol={[<MDBIcon icon=\"eye-slash\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon far icon=\"star\" size=\"1x\" />))}\r\n                fullSymbol={[<MDBIcon icon=\"eye\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\"title={n}/>))}\r\n                readonly={!loggedIn}\r\n                initialRating={episode.user_info?episode.user_info.score:-1}\r\n                onChange={(score) => {\r\n                        setShowEpisodeUserStatus({score: score}, showID, episode.season_number, episode.episode_number );\r\n                    }\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailedEpisodeRow;","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport {\r\n    AreaChart , linearGradient, XAxis, Tooltip, YAxis, Area  \r\n  } from 'recharts';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\nimport DetailedEpisodeRow from \"./DetailedEpisodeRow\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ShowPage ( {requestShowSeason, showSeason, showSeasonIsLoading, setShowUserStatus, \r\n                    setShowEpisodeUserStatus,\r\n                    requestShowSeasonFriends, showFriends, showFriendsIsLoading,\r\n                    loggedIn, openLoginForm\r\n    } ) {\r\n    let history = useHistory();\r\n    let { show_id, number } = useParams();\r\n    const [date, setDate] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [chartData, setChartData] = useState([]);\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestShowSeason(show_id, number);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[show_id, number, requestShowSeason]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestShowSeasonFriends(show_id, number, 1);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n\r\n            if (showSeason.tmdb.air_date){\r\n                let mas = showSeason.tmdb.air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (showSeason.user_info){\r\n                setReview(showSeason.user_info.review);\r\n            }else\r\n                setReview(\"\");\r\n            document.title = showSeason.tmdb.show_name + ' - ' + showSeason.tmdb.name;\r\n\t\t},\r\n\t\t[showSeason]\r\n    );\r\n    \r\n    useEffect(\r\n\t\t() => {\r\n            setChartData([]);\r\n            if (showSeason.tmdb.episodes)\r\n            if (showSeason.tmdb.episodes.length > 0){\r\n                let newData = [];\r\n                for (let episode in showSeason.tmdb.episodes){\r\n                    if (showSeason.tmdb.episodes[episode].vote_average > 0)\r\n                        newData.push({ \"name\": 'Ep ' + showSeason.tmdb.episodes[episode].episode_number,  \"Оценка\": showSeason.tmdb.episodes[episode].vote_average });\r\n                }\r\n                setChartData(newData);\r\n            }\r\n\t\t},\r\n\t\t[showSeason]\r\n    );\r\n\r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + showSeason.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={showSeasonIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"showContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"showContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"3\" className=\"posterBlock\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + showSeason.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"9\">\r\n                                        <h1>\r\n                                            <a href={window.location.origin + '/show/' + show_id} \r\n                                                onClick={(e) => { history.push('/show/' + show_id ); e.preventDefault();}}\r\n                                                >\r\n                                                {showSeason.tmdb.show_name}\r\n                                            </a>  \r\n                                            { ' - ' + showSeason.tmdb.name}\r\n                                        </h1>\r\n                                        <h5 style={{marginBottom: \"10px\", marginTop: \"-10px\"}}>{showSeason.tmdb.show_original_name + ' - Season ' + showSeason.tmdb.season_number}</h5>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p hidden={date===''}>Дата выхода: {date}</p>\r\n                                            <p>Количество серий: {showSeason.tmdb.episodes?showSeason.tmdb.episodes.length:0}</p>\r\n                                        </div>\r\n                                        <div hidden={!loggedIn | (!showSeason.user_watched_show)}>\r\n                                            <Rating stop={10}\r\n                                                emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                                fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                                initialRating={showSeason.user_info?showSeason.user_info.score:0}\r\n                                                onChange={(score) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setShowUserStatus({score: score, review: document.getElementById('reviewSeasonInput').value }, show_id, showSeason.tmdb.season_number);\r\n                                                    }}\r\n                                                }\r\n                                            />\r\n                                            <MDBInput \r\n                                                type=\"textarea\" \r\n                                                id=\"reviewSeasonInput\"\r\n                                                label=\"Ваш отзыв\" \r\n                                                value={review}\r\n                                                onChange={(event) =>setReview(event.target.value)}\r\n                                                outline\r\n                                            />\r\n                                            <button \r\n                                                className={'savePreviewButton'} \r\n                                                hidden={!loggedIn | (!showSeason.user_watched_show)}\r\n                                                onClick={() => {\r\n                                                        if (!loggedIn){\r\n                                                            openLoginForm();\r\n                                                        }else{\r\n                                                            setShowUserStatus({ review: document.getElementById('reviewSeasonInput').value }, show_id, showSeason.tmdb.season_number);\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                >\r\n                                                Сохранить\r\n                                            </button>\r\n                                        </div>\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"showContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: showSeason.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <div className=\"showContentBody\"> \r\n                                    <h3 style={{paddingTop: \"15px\"}}>Список серий</h3>\r\n                                    <details open={false} className='episodeRows'>\r\n                                        <summary>Развернуть</summary>\r\n                                            <ul>\r\n                                                {  showSeason.tmdb.episodes?showSeason.tmdb.episodes.map((episode) => <li className=\"episode\" key={showSeason.tmdb.id+episode.episode_number}><DetailedEpisodeRow episode={episode} showID={show_id} loggedIn={loggedIn} setShowEpisodeUserStatus={setShowEpisodeUserStatus}/></li>):'' }\r\n                                            </ul>\r\n                                    </details>\r\n                                    <div hidden={!(chartData.length > 0)}>\r\n                                        <AreaChart width={700} height={250} data={chartData}\r\n                                            margin={{ top: 20, right: 20, left: 15, bottom: 0 }}\r\n                                            >\r\n                                            <defs>\r\n                                                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                                    <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\r\n                                                    <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/>\r\n                                                </linearGradient>\r\n                                            </defs>\r\n                                            <XAxis dataKey=\"name\" interval={0} />\r\n                                            <YAxis tickLine={false}/>\r\n                                            <Tooltip contentStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)'}}/>\r\n                                            <Area type=\"monotone\" dataKey=\"Оценка\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorUv)\" />\r\n                                        </AreaChart>\r\n                                    </div>\r\n                                </div>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={showFriends.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={showFriends}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getShowRequestError(state),\r\n    showSeason: selectors.getContentShow(state),\r\n    showSeasonIsLoading: selectors.getIsLoadingContentShow(state),\r\n    showFriends: selectors.getContentShowFriends(state),\r\n    showFriendsIsLoading: selectors.getIsLoadingContentShowFriends(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestShowSeason: (showID, seasonNumber) => {\r\n            dispatch(actions.requestShowSeason(showID, seasonNumber));\r\n        },\r\n        setShowUserStatus: (status, showID, seasonNumber) => {\r\n            dispatch(actions.setShowSeasonStatus(status, showID, seasonNumber));\r\n        },\r\n        setShowEpisodeUserStatus: (status, showID, seasonNumber, episodeNumber) => {\r\n            dispatch(actions.setShowEpisodeStatusInRow(status, showID, seasonNumber, episodeNumber));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        requestShowSeasonFriends: (showID, seasonID, page) => {\r\n            dispatch(actions.requestShowSeasonFriends(showID, seasonID, page));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowPage);\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction EpisodePage ( {requestShowEpisode, showEpisode, showEpisodeIsLoading, setShowUserStatus,\r\n                    requestShowEpisodeFriends, showFriends, showFriendsIsLoading,\r\n                    loggedIn, openLoginForm\r\n    } ) {\r\n    let history = useHistory();\r\n    let { show_id, season_number, episode_number } = useParams();\r\n    const [date, setDate] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestShowEpisode(show_id, season_number, episode_number);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[show_id, season_number, episode_number, requestShowEpisode]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestShowEpisodeFriends(show_id, season_number, episode_number, 1);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n\r\n            if (showEpisode.tmdb.air_date){\r\n                let mas = showEpisode.tmdb.air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (showEpisode.user_info){\r\n                setReview(showEpisode.user_info.review);\r\n            }else\r\n                setReview(\"\");\r\n\r\n            if (showEpisode.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{showEpisode.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            document.title = showEpisode.tmdb.show_name + ' - ' + showEpisode.tmdb.name;\r\n\t\t},\r\n\t\t[showEpisode]\r\n    );\r\n    \r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + showEpisode.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={showEpisodeIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"showContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"showContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"3\" className=\"posterBlock\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + showEpisode.tmdb.still_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"8\">\r\n                                        <h1>\r\n                                            <a href={window.location.origin + '/show/' + show_id} \r\n                                                onClick={(e) => { history.push('/show/' + show_id ); e.preventDefault();}}\r\n                                                >\r\n                                                {showEpisode.tmdb.show_name}\r\n                                            </a>  \r\n                                            { ' - ' + showEpisode.tmdb.name}\r\n                                        </h1>\r\n                                        <h5 style={{marginBottom: \"10px\", marginTop: \"-10px\"}}>{showEpisode.tmdb.show_original_name + ' - Season ' + showEpisode.tmdb.season_number + ' - Episode ' + showEpisode.tmdb.episode_number} </h5>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p hidden={date===''}>Дата выхода: {date}</p>\r\n                                            <a href={window.location.origin + '/show/' + show_id + '/season/' + season_number} \r\n                                                onClick={(e) => { history.push('/show/' + show_id + '/season/' + season_number); e.preventDefault();}}\r\n                                                >\r\n                                                Сезон: {showEpisode.tmdb.season_number}\r\n                                            </a> \r\n                                        </div>\r\n                                        <div hidden={!loggedIn | (!showEpisode.user_watched_show)}>\r\n                                            <Rating start={-1} stop={10}\r\n                                                emptySymbol={[<MDBIcon icon=\"eye-slash\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>))}\r\n                                                fullSymbol={[<MDBIcon icon=\"eye\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>))}\r\n                                                initialRating={showEpisode.user_info?showEpisode.user_info.score:-1}\r\n                                                onChange={(score) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setShowUserStatus({score: score, review: document.getElementById('reviewSeasonInput').value }, show_id, season_number, episode_number );\r\n                                                    }}\r\n                                                }\r\n                                            />\r\n                                            <MDBInput \r\n                                                type=\"textarea\" \r\n                                                id=\"reviewSeasonInput\"\r\n                                                label=\"Ваш отзыв\" \r\n                                                value={review}\r\n                                                onChange={(event) =>setReview(event.target.value)}\r\n                                                outline\r\n                                            />\r\n                                            <button \r\n                                                className={'savePreviewButton'} \r\n                                                hidden={!loggedIn | (!showEpisode.user_watched_show)}\r\n                                                onClick={() => {\r\n                                                        if (!loggedIn){\r\n                                                            openLoginForm();\r\n                                                        }else{\r\n                                                            setShowUserStatus({ review: document.getElementById('reviewSeasonInput').value }, show_id, season_number, episode_number);\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                >\r\n                                                Сохранить\r\n                                            </button>\r\n                                        </div>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"showContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: showEpisode.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={showFriends.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={showFriends}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getShowRequestError(state),\r\n    showEpisode: selectors.getContentShow(state),\r\n    showEpisodeIsLoading: selectors.getIsLoadingContentShow(state),\r\n    showFriends: selectors.getContentShowFriends(state),\r\n    showFriendsIsLoading: selectors.getIsLoadingContentShowFriends(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestShowEpisode: (showID, seasonNumber, episodeNumber) => {\r\n            dispatch(actions.requestShowEpisode(showID, seasonNumber, episodeNumber));\r\n        },\r\n        setShowUserStatus: (status, showID, seasonNumber, episodeNumber) => {\r\n            dispatch(actions.setShowEpisodeStatus(status, showID, seasonNumber, episodeNumber));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        requestShowEpisodeFriends: (showID, seasonID, episodeID, page) => {\r\n            dispatch(actions.requestShowEpisodeFriends(showID, seasonID, episodeID, page));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EpisodePage);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\n\r\nfunction CardGame( {game} ) {\r\n    let history = useHistory();\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (game.released){\r\n                let mas = game.released.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (game.name.length > 55){\r\n                let newName = game.name.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(game.name);\r\n        },\r\n        [game]\r\n    );\r\n\r\n    /*const mouseDownHandler = ( event ) => {\r\n        if( event.button === 1 ) {\r\n            console.log(window.location.origin + '/game/' + game.slug );\r\n\r\n        }\r\n      }*/\r\n\r\n    return(\r\n        <div className=\"searchCardGame\" >\r\n            <div className=\"searchCardGameImage\" style={{backgroundImage: `url(${game.background_image})`}}> </div>\r\n            <div className=\"searchCardGameText\">\r\n                <a href={window.location.origin + '/game/' + game.slug} \r\n                    onClick={(e) => { history.push('/game/' + game.slug); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n//onMouseDown={mouseDownHandler} \r\n\r\nexport default CardGame;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardMovie ( {movie} ) {\r\n    let history = useHistory();\r\n\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (movie.release_date){\r\n                let mas = movie.release_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (movie.title.length > 55){\r\n                let newName = movie.title.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(movie.title);\r\n        },\r\n        [movie]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardMovie\" >\r\n            <div className=\"searchCardMovieImage\" style={{backgroundImage: `url(${\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.poster_path})`}}> </div>\r\n            <div className=\"searchCardMovieText\">\r\n                <a href={window.location.origin + '/movie/' + movie.id} \r\n                    onClick={(e) => { history.push('/movie/' + movie.id); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardMovie;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardShow ( {show} ) {\r\n    let history = useHistory();\r\n\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (show.first_air_date){\r\n                let mas = show.first_air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (show.name.length > 55){\r\n                let newName = show.name.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(show.name);\r\n        },\r\n        [show]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardMovie\" >\r\n            <div className=\"searchCardMovieImage\" style={{backgroundImage: `url(${\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + show.poster_path})`}}> </div>\r\n            <div className=\"searchCardMovieText\">\r\n                <a href={window.location.origin + '/show/' + show.id} \r\n                    onClick={(e) => { history.push('/show/' + show.id); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardShow;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardUser ( {user} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [user]\r\n    );\r\n\r\n    return(\r\n        <a href={window.location.origin + '/user/' + user.id} \r\n                    onClick={(e) => { history.push('/user/' + user.id); e.preventDefault();}}>\r\n            <div className=\"cardUser\" >\r\n                <div className=\"cardUserImage\" style={{backgroundImage: `url(${'http://upload.wikimedia.org/wikipedia/commons/f/f4/User_Avatar_2.png'})`}}> </div>\r\n                <div className=\"cardUserText\">\r\n                    <h4 >{user.username}</h4>\r\n                </div>\r\n            </div> \r\n        </a>\r\n        \r\n    )\r\n}\r\n\r\nexport default CardUser;\r\n","import React, {useState} from \"react\";\r\nimport './style.css';\r\n\r\nfunction CategoriesTab( {categories, activeColor, onChangeCategory} ) {\r\n    const [activeCategory, setActiveCategory] = useState(categories[0]);\r\n\r\n    return(\r\n        <div>\r\n            {categories.map((category) => <button className={'categoriesTab'} \r\n                                            key={category}\r\n                                            style={{color: (activeCategory === category?activeColor:'rgb(207, 207, 207)')}}\r\n                                            onClick={()=>{ \r\n                                                setActiveCategory(category);\r\n                                                onChangeCategory(category);\r\n                                            }}>\r\n                                            {category}\r\n                                        </button>) }\r\n           <hr style={{  backgroundColor: activeColor, height: 2.5, marginTop: \"0px\", marginBottom: \"10px\" }}/>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default CategoriesTab;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBFormInline\r\n} from \"mdbreact\";\r\nimport './style.css';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport CardGame from './CardGame';\r\nimport CardMovie from './CardMovie';\r\nimport CardShow from './CardShow';\r\nimport CardUser from '../Common/CardUser';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction SearchPage ( { loggedIn, gamesIsLoading, moviesIsLoading, showsIsLoading, usersIsLoading, searchGame, games, searchMovie, movies, searchShow, shows, searchUsers, users } ) {\r\n    let history = useHistory();\r\n    let { query } = useParams();\r\n    const [queryText, setQueryText] = useState(\"\");\r\n    const [gamesCards, setGamesCards] = useState(\"\");\r\n    const [moviesCards, setMoviesCards] = useState(\"\");\r\n    const [showsCards, setShowsCards] = useState(\"\");\r\n    const [usersCards, setUsersCards] = useState(\"\");\r\n    const [gamesPage, setGamesPage] = useState(1);\r\n    const [moviesPage, setMoviesPage] = useState(1);\r\n    const [showsPage, setShowsPage] = useState(1);\r\n\r\n    const [activeCategory, setActiveCategory] = useState(\"Всё\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            searchGame(query, 1, 6);\r\n            searchMovie(query, 1);\r\n            searchShow(query, 1);\r\n            searchUsers(query);\r\n            setQueryText(query);\r\n            document.title = 'Поиск';\r\n            setGamesPage(1);\r\n            setMoviesPage(1);\r\n            setShowsPage(1);\r\n\t\t},\r\n\t\t[query, searchGame, searchMovie, searchUsers, searchShow]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setGamesCards(<div className=\"searchCardsGroup\">{games.map(game => <CardGame game={game} key={game.id}/>)}</div>);\r\n\t\t},\r\n\t\t[games]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setMoviesCards(<div className=\"searchCardsGroup\">{movies.map(movie => <CardMovie movie={movie} key={movie.id}/>)}</div>);\r\n\t\t},\r\n\t\t[movies]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setShowsCards(<div className=\"searchCardsGroup\">{shows.map(show => <CardShow show={show} key={show.id}/>)}</div>);\r\n\t\t},\r\n\t\t[shows]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setUsersCards(<div className=\"searchCardsGroup\">{users.map(user => <CardUser user={user} key={user.username}/>)}</div>);\r\n\t\t},\r\n\t\t[users]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg searchBG\"/> \r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"searchPage\"> \r\n                            <h1>Поиск</h1>\r\n                            <MDBFormInline className=\"md-form\"\r\n                                onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput2').value); return false; }}>\r\n                                <MDBIcon icon=\"search\" />\r\n                                <input \r\n                                    className=\"form-control form-control-sm ml-3 w-50\" \r\n                                    type=\"text\" \r\n                                    placeholder=\"Найти\" \r\n                                    aria-label=\"Search\" \r\n                                    id=\"searchInput2\" \r\n                                    value={queryText} \r\n                                    onChange={(event) =>setQueryText(event.target.value)}/>\r\n                            </MDBFormInline>\r\n\r\n                            <h1>Результаты поиска</h1>\r\n                                <CategoriesTab\r\n                                    categories={['Всё', 'Игры', 'Фильмы', 'Сериалы', 'Пользователи']}\r\n                                    activeColor='#7654de' \r\n                                    onChangeCategory={(category) => {\r\n                                        setActiveCategory(category);\r\n                                    }}/>\r\n\r\n                                <LoadingOverlay\r\n                                    active={gamesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем игры...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Игры'}>\r\n                                        <h3>Игры</h3>\r\n                                        <div className=\"reslutsBlock\">\r\n                                            <button className=\"paginationButton\" \r\n                                                disabled={gamesPage===1}\r\n                                                onClick={() => {searchGame(query, gamesPage-1, 6); setGamesPage(gamesPage-1)}}\r\n                                                >\r\n                                                &lt;\r\n                                            </button>\r\n                                            {gamesCards}\r\n                                            <button className=\"paginationButton\"\r\n                                                disabled={games.length < 6}\r\n                                                onClick={() => {searchGame(query, gamesPage+1, 6); setGamesPage(gamesPage+1)}}\r\n                                                >\r\n                                                &gt;\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </LoadingOverlay>\r\n\r\n                                <LoadingOverlay\r\n                                    active={moviesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем фильмы...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Фильмы'}>\r\n                                        <h3>Фильмы</h3>\r\n                                        <div className=\"reslutsBlock\">\r\n                                            <button className=\"paginationButton\" \r\n                                                disabled={moviesPage===1}\r\n                                                onClick={() => {searchMovie(query, moviesPage-1); setMoviesPage(moviesPage-1)}}\r\n                                                >\r\n                                                &lt;\r\n                                            </button>\r\n                                            {moviesCards}\r\n                                            <button className=\"paginationButton\"\r\n                                                disabled={movies.length < 20}\r\n                                                onClick={() => {searchMovie(query, moviesPage+1); setMoviesPage(moviesPage+1)}}\r\n                                                >\r\n                                                &gt;\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>       \r\n                                </LoadingOverlay>\r\n\r\n                                <LoadingOverlay\r\n                                    active={showsIsLoading}\r\n                                    spinner\r\n                                    text='Ищем сериалы...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Сериалы'}>\r\n                                        <h3>Сериалы</h3>\r\n                                        <div className=\"reslutsBlock\">\r\n                                            <button className=\"paginationButton\" \r\n                                                disabled={showsPage===1}\r\n                                                onClick={() => {searchShow(query, showsPage-1); setShowsPage(showsPage-1)}}\r\n                                                >\r\n                                                &lt;\r\n                                            </button>\r\n                                            {showsCards}\r\n                                            <button className=\"paginationButton\"\r\n                                                disabled={shows.length < 20}\r\n                                                onClick={() => {searchShow(query, showsPage+1); setShowsPage(showsPage+1)}}\r\n                                                >\r\n                                                &gt;\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>       \r\n                                </LoadingOverlay>\r\n                                \r\n                                <LoadingOverlay\r\n                                    active={usersIsLoading}\r\n                                    spinner\r\n                                    text='Ищем пользователей...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Пользователи'}>\r\n                                        <h3>Пользователи</h3>\r\n                                        {usersCards}\r\n                                    </div>    \r\n                                </LoadingOverlay>\r\n                                \r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    gamesIsLoading: selectors.getIsLoadingSearchGames(state),\r\n    moviesIsLoading: selectors.getIsLoadingSearchMovies(state),\r\n    showsIsLoading: selectors.getIsLoadingSearchShows(state),\r\n    usersIsLoading: selectors.getIsLoadingSearchUsers(state),\r\n    games: selectors.getSearchContentGames(state),\r\n    movies: selectors.getSearchContentMovies(state),\r\n    shows: selectors.getSearchContentShows(state),\r\n    users: selectors.getSearchContentUsers(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        searchGame: (query, page, gamesCount) => {\r\n            dispatch(actions.searchGames(query, page, gamesCount));\r\n        },\r\n        searchMovie: (query, page) => {\r\n            dispatch(actions.searchMovies(query, page));\r\n        },\r\n        searchShow: (query, page) => {\r\n            dispatch(actions.searchShows(query, page));\r\n        },\r\n        searchUsers: (query) => {\r\n            dispatch(actions.searchUsers(query));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);\r\n","import React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction LoginForm( {isOpen, closeForm, logIn, authError, openResetPasswordForm} ) {\r\n\tconst [password, setPassword] = useState(\"\");\r\n\tconst [login, setLogin] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody className=\"loginBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form onSubmit={(event) => {event.preventDefault(); logIn(login, password)}}>\r\n\t              <p className=\"h4 text-center mb-4\">Войти</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!authError} >Неверный логин или пароль!</p>\r\n\r\n\t              <label htmlFor=\"loginInput\" className=\"grey-text\">\r\n\t                Логин\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={login}\r\n\t\t\t\t\tonChange={(event) =>setLogin(event.target.value)}/>\r\n\t\t\t\t\t\r\n\t              <label htmlFor=\"passwordInput\" className=\"grey-text\">\r\n\t                Пароль\r\n\t              </label>\r\n\t              <input type=\"password\" id=\"passwordInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={password}\r\n\t\t\t\t\tonChange={(event) =>setPassword(event.target.value)}/>\r\n\t\t\t\t\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"submit\" className=\"confirmButton\">\r\n\t\t\t\t\t\tВойти\r\n\t\t\t\t\t</MDBBtn>\r\n\t\t\t\t\t<label className=\"passwordResetLabel\" onClick={() => {closeForm(); openResetPasswordForm()}}>\r\n\t\t\t\t\t\tВосстановить пароль\r\n\t              \t</label>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getLoginForm(state),\r\n\tauthError: selectors.getAuthError(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeLoginForm());\r\n\t\t},\r\n\t\tlogIn: (login, password) => {\r\n\t\t\tdispatch(actions.tryAuth(login, password));\r\n\t\t},\r\n\t\topenResetPasswordForm: () => {\r\n\t\t\tdispatch(actions.openResetPasswordForm());\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n","\r\nimport React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction RegistrationForm( {isOpen, closeForm, registrate, registrateArror, user} ) {\r\n\tconst [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n\tconst [password, setPassword] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\tconst [login, setLogin] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered >\r\n\t    <MDBModalBody className=\"registrationBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form>\r\n\t\t\t      <p className=\"note note-danger\" hidden={!registrateArror} >Ошибка регистрации!</p>\r\n                  <p className=\"note note-success\" hidden={user.email===\"\"} >{user.login}, добро пожаловать! Осталось только подтвердить вашу почту</p>\r\n\t              <h4>Регистрация</h4>\r\n\r\n\t              <label htmlFor=\"loginInput\">\r\n\t                Никнейм\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" \r\n\t\t\t\t\t\tvalue={login}\r\n\t\t\t\t\t\tonChange={(event) =>setLogin(event.target.value)}/>\r\n\r\n                  <label htmlFor=\"emailInput\">\r\n\t                Электронная почта\r\n\t              </label>\r\n\t\t\t\t  <input type=\"email\"  id=\"emailInput\"  className=\"form-control\" \r\n\t\t\t\t\t  value={email} \r\n\t\t\t\t\t  onChange={(event) =>setEmail(event.target.value)} />\r\n\r\n\t              <label htmlFor=\"passwordInput\">\r\n\t                Пароль\r\n\t              </label>\r\n\t\t\t\t  <input type=\"password\"id=\"passwordInput\" className=\"form-control\"\r\n\t\t\t\t  \t\tvalue={password}\r\n\t\t\t\t\t\tonChange={(event) =>setPassword(event.target.value)}/>\r\n\r\n\t\t\t\t  <label htmlFor=\"passwordConfirmInput\">\r\n\t                Подтверждение пароля\r\n\t              </label>\r\n\t\t\t\t  <input type=\"password\" id=\"passwordConfirmInput\" className=\"form-control\"\r\n\t\t\t\t  \t\tstyle={passwordConfirm===password?{outlineColor: 'green'}:{outlineColor: 'red'}}\r\n\t\t\t\t\t\tvalue={passwordConfirm}\r\n\t\t\t\t\t\tonChange={(event) =>setPasswordConfirm(event.target.value)}/>\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"button\" className=\"confirmButton\" \r\n\t\t\t\t\t\tdisabled={password!==passwordConfirm || login.length < 1  || email.length < 1 || password.length < 1}\r\n\t\t\t\t\t\tonClick={() => registrate(login, email, password)}>\r\n\t\t\t\t\t\tЗарегистрироваться\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getRegistrateForm(state),\r\n    registrateArror: selectors.getRegistrateError(state),\r\n    user: selectors.getUser(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeRegistrateForm());\r\n\t\t},\r\n\t\tregistrate: (login, email, password) => {\r\n\t\t\tdispatch(actions.registrationRequest(login, email, password));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);\r\n","import React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы сброса пароля\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction ResetPasswordForm( {isOpen, closeForm, resetPassword, resetPasswordError} ) {\r\n\tconst [email, setEmail] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody className=\"loginBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form onSubmit={(event) => {event.preventDefault(); resetPassword(email)}}>\r\n\t              <p className=\"h4 text-center mb-4\">Сбросить пароль</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!resetPasswordError | resetPasswordError === 'ok'} >{resetPasswordError}</p>\r\n                  <p className=\"note note-success\" hidden={resetPasswordError !== 'ok'} >На вашу почту отправлено письмо</p>\r\n\r\n\t              <label htmlFor=\"emailInput\" className=\"grey-text\">\r\n\t                Почта\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"emailInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={email}\r\n\t\t\t\t\tonChange={(event) =>setEmail(event.target.value)}/>\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"submit\" className=\"confirmButton\">\r\n\t\t\t\t\t\tСбросить\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getResetPasswordForm(state),\r\n\tresetPasswordError: selectors.getResetPasswordError(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeResetPasswordForm());\r\n\t\t},\r\n\t\tresetPassword: (email) => {\r\n\t\t\tdispatch(actions.resetPassword(email));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPasswordForm);\r\n","import React, {\r\n    useEffect\r\n} from \"react\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ConfirmPage ( {confirmEmailRequest} ) \r\n{\r\n\tlet search = window.location.search;\r\n\tlet params = new URLSearchParams(search);\r\n\tlet uid64 = params.get('uid64');\r\n\tlet token = params.get('token');\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconfirmEmailRequest(uid64, token);\r\n\t\t},\r\n\t\t// eslint-disable-next-line\r\n\t\t[]\r\n\t);\r\n\t\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        confirmEmailRequest: (uid64, token) => {\r\n            dispatch(actions.confirmEmailRequest(uid64, token));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmPage);","import React, {\r\n    useState\r\n} from \"react\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../store/actions';\r\nimport * as selectors from '../store/reducers';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ConfirmPasswordPage ( {confirmPassword, confirmPasswordError} ) \r\n{\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n    \r\n\tlet search = window.location.search;\r\n\tlet params = new URLSearchParams(search);\r\n\tlet token = params.get('token');\r\n\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n                <form onSubmit={(event) => {event.preventDefault(); confirmPassword(token, password)}} className=\"confirmPasswordForm\">\r\n                    <p className=\"h4\">Обновить пароль</p>\r\n                    <p className=\"note note-danger\" hidden={!confirmPasswordError | confirmPasswordError==='ok'} >{confirmPasswordError}</p>\r\n                    <p className=\"note note-success\" hidden={confirmPasswordError !== 'ok'} >Пароль обновлен!</p>\r\n\r\n                    <label htmlFor=\"passwordInput\" className=\"confirmPasswordLabel\">\r\n                        Новый пароль\r\n                    </label><br/>\r\n                    <input type=\"password\" id=\"passwordInput\" className=\"confirmPasswordInput\" \r\n                        value={password}\r\n                        onChange={(event) =>setPassword(event.target.value)}/>\r\n                    <br/>\r\n\r\n                    <label htmlFor=\"passwordConfurmInput\" className='confirmPasswordLabel'>\r\n                        Подтверждение пароля\r\n                    </label><br/>\r\n                    <input type=\"password\" id=\"passwordConfurmInput\" className=\"confirmPasswordInput\"\r\n                        value={passwordConfirm}\r\n                        onChange={(event) =>setPasswordConfirm(event.target.value)}/>\r\n                    <br/>\r\n\r\n                    <button type=\"submit\" \r\n                        className=\"confirmPasswordButton\"\r\n                        disabled={password!==passwordConfirm | password.length < 1}>\r\n                        Обновить\r\n                    </button>\r\n                </form>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    confirmPasswordError: selectors.getConfirmPasswordError(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        confirmPassword: (token, password) => {\r\n            dispatch(actions.confirmPassword(token, password));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmPasswordPage);","import React, { useEffect, useState} from \"react\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction GameBlock ( {games, stats} ) {\r\n\r\n    const gameColumns = [\r\n        {\r\n          label: 'Название',\r\n          field: 'name',\r\n          sort: 'disabled'\r\n        },\r\n        {\r\n          label: 'Статус',\r\n          field: 'status',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Оценка',\r\n          field: 'score',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Отзыв',\r\n          field: 'review',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Время прохождения',\r\n          field: 'spent_time',\r\n          sort: 'asc'\r\n        }\r\n      ];\r\n\r\n    const [gameTableData, setGameTableData] = useState({\r\n        columns: gameColumns,\r\n        rows: [\r\n        ]\r\n    });\r\n\r\n    useEffect(() =>{\r\n            if (games)\r\n            {\r\n                setGameTableData({\r\n                    columns: gameColumns,\r\n                    rows: games.map((game) => {\r\n                        return {\r\n                                name: <a className=\"dataTable\" href={window.location.origin + '/game/' + game.game.rawg_slug}>{game.game.rawg_name}</a>,\r\n                                name2: game.game.rawg_name,\r\n                                status: game.status,\r\n                                score: game.score,\r\n                                review: game.review,\r\n                                spent_time: parseFloat(game.spent_time),\r\n                                /*clickEvent: (e) => {\r\n                                    //window.open('/game/' + game.game.rawg_slug);\r\n                                    history.push('/game/' + game.game.rawg_slug);\r\n                                }*/\r\n                            }      \r\n                    })\r\n                });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [games]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            <p>Игр сыграно: {stats.games?stats.games.count:0}, часов наиграно: {stats.games?stats.games.total_spent_time:0}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={gameTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать игр на странице\"\r\n                searchLabel='Поиск'\r\n                className='dataTable'\r\n                />\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default GameBlock;\r\n","import React from \"react\";\r\n\r\nimport CardUser from '../Common/CardUser';\r\n\r\nfunction FriendBlock ( {users} ) {\r\n\r\n    return(\r\n        <div className=\"friendsBlock\">\r\n            { users.map((user) => <CardUser user={user} key={user.id}/>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FriendBlock;\r\n","import React, { useEffect, useState} from \"react\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction MovieBlock ( {movies, stats} ) {\r\n\r\n    const movieColumns = [\r\n      {\r\n        label: 'Название',\r\n        field: 'name',\r\n        sort: 'disabled'\r\n      },\r\n      {\r\n        label: 'Статус',\r\n        field: 'status',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Оценка',\r\n        field: 'score',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Отзыв',\r\n        field: 'review',\r\n        sort: 'asc'\r\n      }\r\n    ];\r\n\r\n  const [movieTableData, setMovieTableData] = useState({\r\n      columns: movieColumns,\r\n      rows: [\r\n      ]\r\n  });\r\n\r\n    useEffect(() =>{\r\n            if (movies)\r\n            {\r\n              setMovieTableData({\r\n                columns: movieColumns,\r\n                rows: movies.map((movie) => {\r\n                    return {\r\n                            name: <a className=\"dataTable\" href={window.location.origin + '/movie/' + movie.movie.tmdb_id}>{movie.movie.tmdb_name}</a>,\r\n                            name2: movie.movie.tmdb_name,\r\n                            status: movie.status,\r\n                            score: movie.score,\r\n                            review: movie.review,\r\n                            /*clickEvent: (e) => {\r\n                                //window.open('/game/' + game.game.rawg_slug);\r\n                                history.push('/movie/' + movie.movie.tmdb_id)\r\n                            }*/\r\n                        }      \r\n                  })\r\n              });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [movies]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            <p>Фильмов посмотрено: {stats.movies?stats.movies.count:0}, часов просмотра: {stats.movies?stats.movies.total_spent_time:0}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={movieTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать фильмов на странице\"\r\n                searchLabel='Поиск'\r\n                />\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default MovieBlock;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport './style.css';\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction LogRow ( {log, showUsername} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [log]\r\n    );\r\n\r\n    function translateActionType(action, actionResult){\r\n        switch (action) {\r\n            case 'score':\r\n                if (actionResult !== '0')\r\n                    return 'оценил(а)';\r\n                else\r\n                    return 'посмотрел(а)';\r\n            case 'status':\r\n                return 'изменил(а) статус';\r\n            case 'review':\r\n                return 'оставил(а) отзыв на';\r\n            case 'spent_time':\r\n                return 'изменил(а) время прохождения';\r\n            case 'is_following':\r\n                if (actionResult === 'True')\r\n                    return 'подписан(а) на';\r\n                else\r\n                    return 'отписан(а) от';\r\n            default:\r\n                return action;\r\n        }\r\n    }\r\n\r\n    function translateType(type, actionType){\r\n        switch (type) {\r\n            case 'game':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'игру';\r\n                else\r\n                    return 'игры';\r\n            case 'movie':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'фильм';\r\n                else\r\n                    return 'фильма';\r\n            case 'show':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'сериал';\r\n                else\r\n                    return 'сериала';\r\n            case 'season':\r\n                return '';\r\n            case 'episode':\r\n                return '';\r\n            case 'user':\r\n                return 'пользователя';\r\n            default:\r\n                return type;\r\n        }\r\n    }\r\n\r\n    function nameToLink(name, type, id){\r\n        switch (type){\r\n            case 'game':\r\n                return  <a href={window.location.origin + '/game/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/game/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'movie':\r\n                return  <a href={window.location.origin + '/movie/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/movie/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'show':\r\n                return  <a href={window.location.origin + '/show/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/show/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'season':\r\n                return  <div style={{display: 'inline-block'}}>\r\n                            <a href={window.location.origin + '/show/' + id.show_id + '/season/' + id.season_number} \r\n                                className=\"logLink\"\r\n                                onClick={(e) => { history.push('/show/' + id.show_id  + '/season/' + id.season_number); e.preventDefault();}}>\r\n                                    {name.name}\r\n                            </a>\r\n                            &nbsp;сериала&nbsp;\r\n                            <a href={window.location.origin + '/show/' + id.show_id} \r\n                                className=\"logLink\"\r\n                                onClick={(e) => { history.push('/show/' + id.show_id); e.preventDefault();}}>\r\n                                    {name.parent_name}\r\n                            </a>\r\n                            \r\n                        </div>\r\n                        ;\r\n            case 'episode':\r\n                return  <div style={{display: 'inline-block'}}>\r\n                            \r\n                            <a href={window.location.origin + '/show/' + id.show_id + '/season/' + id.season_number + '/episode/' + id.episode_number} \r\n                                className=\"logLink\"\r\n                                onClick={(e) => { history.push('/show/' + id.show_id  + '/season/' + id.season_number + '/episode/' + id.episode_number); e.preventDefault();}}>\r\n                                    [s{id.season_number}e{id.episode_number}] серию\r\n                            </a>\r\n                            &nbsp;сериала&nbsp;\r\n                            <a href={window.location.origin + '/show/' + id.show_id} \r\n                                className=\"logLink\"\r\n                                onClick={(e) => { history.push('/show/' + id.show_id); e.preventDefault();}}>\r\n                                    {name.parent_name}\r\n                            </a>\r\n                            \r\n                        </div>\r\n                        ;\r\n            case 'user':\r\n                return  <a href={window.location.origin + '/user/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/user/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            default:\r\n                return name;\r\n        }\r\n    }\r\n\r\n    function userToLink(username, userID){\r\n            return  <a href={window.location.origin + '/user/' + userID} \r\n                        className=\"logLink\"\r\n                        onClick={(e) => { history.push('/user/' + userID); e.preventDefault();}}>\r\n                            {username}\r\n                    </a>;\r\n    }\r\n\r\n    function actionResultToStr(actionType, actionResult, target){\r\n        switch (actionType){\r\n            case 'score':\r\n                if (target !== 'episode' | actionResult > 0)\r\n                    return  <Rating stop={10}\r\n                                emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\"/>}\r\n                                fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" title={n}/>)}\r\n                                initialRating={actionResult}\r\n                                readonly={true}\r\n                            />\r\n                else\r\n                    return '';\r\n            case 'status':\r\n                return '\"' + actionResult + '\"';\r\n            case 'review':\r\n                return '\"' + actionResult + '\"';\r\n            case 'spent_time':\r\n                return actionResult + ' ' + intToHours(actionResult);\r\n            case 'is_following':\r\n                return '';\r\n            default:\r\n                return actionResult;\r\n        }\r\n    }\r\n\r\n    function parseDate(date){\r\n        let newDate = new Date(date);\r\n        return newDate.toLocaleTimeString(\"ru-RU\");\r\n    }\r\n\r\n    return(\r\n            <div className=\"logRow\">{parseDate(log.created)} {showUsername?userToLink(log.user, log.user_id):''} {translateActionType(log.action_type, log.action_result)} {translateType(log.type, log.action_type)} {nameToLink(log.target, log.type, log.target_id)}{(log.type==='user'|log.action_result===\"0\")?'':':'} {actionResultToStr(log.action_type, log.action_result, log.type)}</div>\r\n    )\r\n}\r\n\r\nfunction intToHours(number){\r\n    if (11 <= number && number <= 14)\r\n        return 'часов'\r\n    else if (number % 10 === 1)\r\n        return 'час'\r\n    else if (2 <= number % 10 && number % 10 <= 4)\r\n        return 'часа'\r\n    else\r\n        return 'часов'\r\n}\r\n\r\nexport default LogRow;","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\nimport './style.css';\r\nimport LogRow from './LogRow';\r\n\r\nfunction UserLogBlock ( {logs, showUsername, onChangePage} ) {\r\n    const [logsByDay, setLogsByDay] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    useEffect(() =>{\r\n            setLogsByDay(groupLogsByDay(logs.log));\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [logs]\r\n    );\r\n\r\n    function groupLogsByDay(logs){\r\n        let newLogs = [];\r\n\r\n        for (let i in logs){\r\n            let date = new Date(logs[i].created);\r\n\r\n            if (newLogs.length === 0)\r\n                newLogs.push({\r\n                    date: date,\r\n                    logs: [logs[i]]\r\n                });\r\n            else if (date.getDay() === newLogs[newLogs.length - 1].date.getDay())\r\n                newLogs[newLogs.length - 1].logs.push(logs[i]);\r\n            else\r\n                newLogs.push({\r\n                    date: date,\r\n                    logs: [logs[i]]\r\n                });\r\n        }\r\n        return newLogs;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            { \r\n                logsByDay.map((dayLog) => \r\n                    <div key={dayLog.logs[0].id} className=\"logDay\">\r\n                        <h5 className='logDate'>\r\n                            {dayLog.date.toLocaleDateString(\"ru-RU\")}\r\n                        </h5>\r\n                        <div className='logRows'>\r\n                            { dayLog.logs.map((log) => <LogRow log={log} showUsername={showUsername} key={log.id + log.created}/>) }\r\n                        </div>\r\n                    </div>\r\n                )  \r\n            } \r\n            <button \r\n                className=\"logPaginationButton\" \r\n                disabled={!logs.has_next_page}\r\n                onClick={() => {\r\n                        if (logs.has_next_page){\r\n                            onChangePage(currentPage+1);\r\n                            setCurrentPage(currentPage+1);\r\n                        } \r\n                    }}\r\n                >\r\n                <MDBIcon icon=\"arrow-down\" />\r\n            </button> \r\n\r\n            <button \r\n                className=\"logPaginationButton\" \r\n                disabled={currentPage===1}\r\n                onClick={() => {\r\n                        if (currentPage>1){\r\n                            onChangePage(currentPage-1);\r\n                            setCurrentPage(currentPage-1);\r\n                        } \r\n                    }}\r\n                >\r\n                <MDBIcon icon=\"arrow-up\" />\r\n            </button>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default UserLogBlock;\r\n","import React, { useEffect, useState} from \"react\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction ShowBlock ( {shows, stats} ) {\r\n\r\n    const showColumns = [\r\n      {\r\n        label: 'Название',\r\n        field: 'name',\r\n        sort: 'disabled'\r\n      },\r\n      {\r\n        label: 'Статус',\r\n        field: 'status',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Оценка',\r\n        field: 'score',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Отзыв',\r\n        field: 'review',\r\n        sort: 'asc'\r\n      }\r\n    ];\r\n\r\n  const [showTableData, setShowTableData] = useState({\r\n      columns: showColumns,\r\n      rows: [\r\n      ]\r\n  });\r\n\r\n    useEffect(() =>{\r\n            if (shows)\r\n            {\r\n              setShowTableData({\r\n                columns: showColumns,\r\n                rows: shows.map((show) => {\r\n                    return {\r\n                            name: <a className=\"dataTable\" href={window.location.origin + '/show/' + show.show.tmdb_id}>{show.show.tmdb_name}</a>,\r\n                            name2: show.show.tmdb_name,\r\n                            status: show.status,\r\n                            score: show.score,\r\n                            review: show.review,\r\n                            /*clickEvent: (e) => {\r\n                                //window.open('/game/' + game.game.rawg_slug);\r\n                                history.push('/movie/' + movie.movie.tmdb_id)\r\n                            }*/\r\n                        }      \r\n                  })\r\n              });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [shows]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            <p>Серий сериалов посмотрено: {stats.episodes?stats.episodes.count:0}, часов просмотра: {stats.episodes?stats.episodes.total_spent_time:0}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={showTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать сериалов на странице\"\r\n                searchLabel='Поиск'\r\n                />\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default ShowBlock;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer\r\n} from \"mdbreact\";\r\nimport {\r\n    PieChart, Pie, Legend, Cell\r\n  } from 'recharts';\r\nimport './style.css';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport GameBlock from './GameBlock';\r\nimport FriendBlock from './FriendBlock';\r\nimport MovieBlock from './MovieBlock';\r\nimport UserLogBlock from './UserLogBlock';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\nimport ShowBlock from \"./ShowBlock\";\r\n\r\nconst LOG_ROWS_COUNT = 15; \r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction UserPage ( { loggedIn, userInfo, \r\n                    userIsLoading, getUserInfo, currentUserInfo, setUserStatus, \r\n                    getUserLogs, userLogs, userLogsIsLoading,\r\n                    getUserFriendsLogs, userFriendsLogs, userFriendsLogsIsLoading}) \r\n{ \r\n    let { userID } = useParams();\r\n    const [activeCategory, setActiveCategory] = useState(\"Профиль\");\r\n    const [chartData, setChartData] = useState([]);\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            getUserInfo(userID);\r\n            getUserLogs(userID, 1, LOG_ROWS_COUNT);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[userID, getUserInfo, getUserLogs, getUserFriendsLogs]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                getUserFriendsLogs(userID, 1, LOG_ROWS_COUNT);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setChartData([]);\r\n            document.title = 'Профиль ' + userInfo.username;\r\n            if (userInfo.stats.games){\r\n                let newData = [];\r\n                if (userInfo.stats.games.total_spent_time > 0)\r\n                    newData.push({name: 'Часов в играх', value: userInfo.stats.games.total_spent_time});\r\n                if (userInfo.stats.movies.total_spent_time > 0)\r\n                    newData.push({name: 'Часов в фильмах', value: userInfo.stats.movies.total_spent_time});\r\n                if (userInfo.stats.episodes.total_spent_time > 0)\r\n                    newData.push({name: 'Часов в сериалах', value: userInfo.stats.episodes.total_spent_time});\r\n                setChartData(newData);\r\n            }\r\n\t\t},\r\n\t\t[userInfo]\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"bg searchBG\"/> \r\n            <LoadingOverlay\r\n                active={userIsLoading}\r\n                spinner\r\n                text='Загрузка...'\r\n                >\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                    <MDBCol className=\"userPage\"> \r\n                        <h1>Информация о пользователе {userInfo.username}</h1>\r\n                        <button \r\n                            hidden={currentUserInfo.username === userInfo.username}\r\n                            className='addFriendButton'\r\n                            onClick={ () => {\r\n                                setUserStatus({is_following: userInfo.is_followed?false:true}, userInfo.id);\r\n                            }}>\r\n                            {userInfo.is_followed?'Отписаться':'Подписаться'}\r\n                        </button>\r\n                        <CategoriesTab\r\n                            categories={['Профиль', 'Игры', 'Фильмы', 'Сериалы', 'Друзья']}\r\n                            activeColor='#7654de' \r\n                            onChangeCategory={(category) => { setActiveCategory(category) }}/>\r\n\r\n                            <div hidden={activeCategory!=='Профиль'}>\r\n                                <h4>Моя активность: </h4>\r\n                                <LoadingOverlay\r\n                                    active={userLogsIsLoading}\r\n                                    spinner\r\n                                    text='Загрузка активности...'\r\n                                    >\r\n\r\n                                    <div hidden={chartData.length < 1}>\r\n                                        <PieChart width={300} height={220} hidden={chartData.length < 1}>\r\n                                            <Pie dataKey=\"value\" \r\n                                                data={chartData} \r\n                                                cx=\"50%\" cy=\"50%\"\r\n                                                outerRadius={80} \r\n                                                fill=\"#8884d8\" \r\n                                                labelLine={true}\r\n                                                label\r\n                                                >\r\n                                            {\r\n                                                chartData.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]} key={index}/>)\r\n                                            }\r\n                                            </Pie>\r\n                                            <Legend verticalAlign=\"bottom\" horizontalAlign=\"center\"/>\r\n                                        </PieChart>\r\n                                    </div>\r\n\r\n                                    <UserLogBlock logs={userLogs} onChangePage={(pageNumber) => getUserLogs(userID, pageNumber, LOG_ROWS_COUNT)}/>\r\n                                </LoadingOverlay>\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Игры'}>\r\n                                <GameBlock games={userInfo.games} stats={userInfo.stats} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Фильмы'}>\r\n                                <MovieBlock movies={userInfo.movies} stats={userInfo.stats} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Сериалы'}>\r\n                                <ShowBlock shows={userInfo.shows} stats={userInfo.stats} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Друзья'}>\r\n                                <FriendBlock users={userInfo.followed_users?userInfo.followed_users:[]} />\r\n                                <h4>Активность друзей: </h4>\r\n                                <LoadingOverlay\r\n                                    active={userFriendsLogsIsLoading}\r\n                                    spinner\r\n                                    text='Загрузка активности...'\r\n                                    >\r\n                                    <UserLogBlock logs={userFriendsLogs} onChangePage={(pageNumber) => getUserFriendsLogs(userID, pageNumber, LOG_ROWS_COUNT)} showUsername={true}/>\r\n                                </LoadingOverlay>\r\n                                \r\n                            </div>\r\n                    </MDBCol>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n            </LoadingOverlay>\r\n        </div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    userIsLoading: selectors.getIsLoadingUserPageContent(state),\r\n    userInfo: selectors.getUserPageContent(state),\r\n    userLogs: selectors.getUserPageLogs(state),\r\n    userLogsIsLoading: selectors.getIsLoadingUserPageLogs(state),\r\n    userFriendsLogs: selectors.getUserPageFriendsLogs(state),\r\n    userFriendsLogsIsLoading: selectors.getIsLoadingUserPageFriendsLogs(state),\r\n    currentUserInfo: selectors.getUser(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        getUserInfo: (user_id) => {\r\n            dispatch(actions.requestUserPageContent(user_id));\r\n        },\r\n        setUserStatus: (is_following, userID) => {\r\n            dispatch(actions.setUserStatus(is_following, userID));\r\n        },\r\n        getUserLogs: (userID, page, resultsOnPage) => {\r\n            dispatch(actions.requestUserPageLogs(userID, page, resultsOnPage));\r\n        },\r\n        getUserFriendsLogs: (userID, page, resultsOnPage) => {\r\n            dispatch(actions.requestUserPageFriendsLogs(userID, page, resultsOnPage));\r\n        },\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage);\r\n","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nimport {\r\n\tMDBNavbar,\r\n    MDBNavItem,\r\n    MDBNavbarBrand,\r\n    MDBNavbarNav,\r\n    MDBNavLink,\r\n    MDBIcon,\r\n    MDBFormInline,\r\n    MDBDropdown,\r\n    MDBDropdownItem,\r\n    MDBDropdownMenu,\r\n    MDBDropdownToggle\r\n} from \"mdbreact\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\nfunction Navbar( {loggedIn, onLoginClick, onLogoutClick, onRegistrationClick, user} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n            <MDBNavbar style={{ backgroundColor: \"#4527a0\" }} dark expand=\"md\" fixed=\"top\">\r\n            <MDBNavbarBrand onClick={ (event) => {event.preventDefault(); history.push('/'); return false; }}>\r\n                <strong className=\"white-text\" style={{cursor: 'pointer'}}>Interests</strong>\r\n            </MDBNavbarBrand>\r\n            <MDBNavbarNav left>\r\n                \r\n            </MDBNavbarNav>\r\n\r\n            <MDBNavbarNav right>\r\n                <MDBNavItem>\r\n                    <MDBFormInline onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput').value); return false; }}>\r\n                        <div className=\"md-form my-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Найти\" aria-label=\"Найти\"\r\n                            id=\"searchInput\"/>\r\n                        </div>\r\n                    </MDBFormInline>\r\n                </MDBNavItem>\r\n\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onLoginClick} >\r\n                        <MDBIcon icon=\"sign-in-alt\" /> Войти\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onRegistrationClick} >\r\n                        <MDBIcon icon=\"user-plus\" /> Зарегистрироваться\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem hidden={!loggedIn} className=\"font-weight-bold\">\r\n                    <MDBDropdown>\r\n                        <MDBDropdownToggle nav caret>\r\n                        <span className=\"mr-2\">{user.username}</span>\r\n                        </MDBDropdownToggle>\r\n                        <MDBDropdownMenu>\r\n                            <MDBDropdownItem href={\"/user/\"+user.id}>Профиль</MDBDropdownItem>\r\n                            <MDBDropdownItem onClick={ onLogoutClick }>\r\n                                <MDBIcon icon=\"sign-out-alt\"/> Выйти\r\n                            </MDBDropdownItem>\r\n                        </MDBDropdownMenu>\r\n                    </MDBDropdown>\r\n                </MDBNavItem>\r\n            </MDBNavbarNav>\r\n        </MDBNavbar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    user: selectors.getUser(state)\r\n});\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonLoginClick: () => {\r\n\t\t\tdispatch(actions.openLoginForm());\r\n        },\r\n        onLogoutClick: () =>{\r\n            dispatch(actions.resetAuthorization());\r\n        },\r\n        onRegistrationClick: () =>{\r\n            dispatch(actions.openRegistrateForm());\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport HomePage from \"./components/HomePage\";\r\nimport GamePage from \"./components/Game/GamePage\";\r\nimport MoviePage from \"./components/Movie/MoviePage\";\r\nimport ShowPage from \"./components/Show/ShowPage\";\r\nimport SeasonPage from \"./components/Show/SeasonPage\";\r\nimport EpisodePage from \"./components/Show/EpisodePage\";\r\nimport SearchPage from \"./components/Search/SearchPage\";\r\nimport LoginForm from \"./components/Modals/LoginForm\";\r\nimport RegistrationForm from \"./components/Modals/RegistrationForm\";\r\nimport ResetPasswordForm from \"./components/Modals/ResetPasswordForm\";\r\nimport ConfirmPage from \"./components/ConfirmPage\";\r\nimport ConfirmPasswordPage from \"./components/ConfirmPasswordPage\";\r\nimport UserPage from \"./components/UserPage/UserPage\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar/>\r\n        <div className=\"navbar\"></div>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route exact path=\"/game/:id\" component={GamePage} />\r\n            <Route exact path=\"/movie/:id\" component={MoviePage} />\r\n            <Route exact path=\"/show/:id\" component={ShowPage} />\r\n            <Route exact path=\"/show/:show_id/season/:number\" component={SeasonPage} />\r\n            <Route exact path=\"/show/:show_id/season/:season_number/episode/:episode_number\" component={EpisodePage} />\r\n            <Route exact path=\"/search/:query\" component={SearchPage} />\r\n            <Route exact path=\"/confirm/\" component={ConfirmPage} />\r\n            <Route exact path=\"/confirm_password/\" component={ConfirmPasswordPage} />\r\n            <Route exact path=\"/user/:userID\" component={UserPage} />\r\n            <Route render={function () { return <h1>Not Found</h1>; }} />\r\n            \r\n        </Switch>\r\n      <ToastContainer position=\"top-center\" hideProgressBar newestOnTop closeOnClick/>\r\n      <LoginForm/>\r\n      <RegistrationForm/>\r\n      <ResetPasswordForm/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// \r\nexport default Routes;","import React, {useEffect} from \"react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { connect } from 'react-redux'; \r\nimport Routes from \"./Routes\";\r\nimport * as actions from \"./store/actions\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App({onLoad}) {\r\n\r\n  useEffect(\r\n    () => {\r\n        onLoad();\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"flyout\">\r\n        <main>\r\n          <Routes />\r\n        </main>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n    onLoad: () => {\r\n      dispatch(actions.checkAuthorization());\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore, \r\n  applyMiddleware, \r\n  //combineReducers,\r\n   compose } from 'redux';\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './store/reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk) ) );\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\nexport default store;\r\n\r\n"],"sourceRoot":""}