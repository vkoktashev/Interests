{"version":3,"sources":["store/actionTypes.js","store/reducers.js","components/HomePage.js","settings.js","services/jwtAuth.js","services/requests.js","store/actions.js","components/Common/StatusButtonGroup.js","components/Common/FriendsActivityRow.js","components/Common/FriendsActivity.js","components/Game/GamePage.js","components/Movie/MoviePage.js","components/Show/DetailedEpisodeRow.js","components/Show/SeasonBlock.js","components/Show/SeasonsBlock.js","components/Show/ShowPage.js","components/Show/SeasonPage.js","components/Show/EpisodePage.js","components/Search/CardGame.js","components/Search/CardMovie.js","components/Search/CardShow.js","components/Common/CardUser.js","components/Common/CategoriesTab.js","components/Search/SearchPage.js","components/Modals/LoginForm.js","components/Modals/RegistrationForm.js","components/Modals/ResetPasswordForm.js","components/ConfirmPage.js","components/ConfirmPasswordPage.js","components/UserPage/Colors.js","components/UserPage/GameBlock.js","components/UserPage/FriendBlock.js","components/UserPage/MovieBlock.js","components/UserPage/LogRow.js","components/UserPage/UserLogBlock.js","components/UserPage/ShowBlock.js","components/UserPage/UserPage.js","components/Navbar.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["SET_USER","SET_AUTH","SET_LOGINFORM","SET_REGISTRATEFORM","SET_RESET_PASSWORD_FORM","SET_CONTENT_GAME","SET_CONTENT_GAME_USER_INFO","SET_CONTENT_MOVIE","SET_CONTENT_MOVIE_USER_INFO","SET_CONTENT_SHOW_SEASONS","SET_CONTENT_SHOW_SEASONS_USER_INFO","SET_CONTENT_SHOW_SEASONS_EPISODE_SCORE","SET_CONTENT_SHOW","SET_CONTENT_SHOW_USER_INFO","SET_SEARCH_CONTENT_GAMES","SET_SEARCH_CONTENT_MOVIES","SET_SEARCH_CONTENT_SHOWS","SET_SEARCH_CONTENT_USERS","SET_USER_PAGE_CONTENT","SET_USER_PAGE_FOLLOWING","SET_USER_PAGE_LOGs","SET_USER_PAGE_FRIENDS_LOGS","SET_IS_LOADING_CONTENT_GAME","SET_IS_LOADING_CONTENT_GAME_USER_INFO","SET_IS_LOADING_CONTENT_MOVIE","SET_IS_LOADING_CONTENT_MOVIE_USER_INFO","SET_IS_LOADING_CONTENT_SHOW","SET_IS_LOADING_CONTENT_SHOW_USER_INFO","SET_IS_LOADING_CONTENT_SHOW_SEASONS","SET_IS_LOADING_SEARCH_GAMES","SET_IS_LOADING_SEARCH_MOVIES","SET_IS_LOADING_SEARCH_SHOWS","SET_IS_LOADING_SEARCH_USERS","SET_IS_LOADING_USER_PAGE_CONTENT","SET_IS_LOADING_USER_PAGE_LOGS","SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS","AUTH_ERROR","REGISTRATE_ERROR","GAME_REQUEST_ERROR","MOVIE_REQUEST_ERROR","SHOW_REQUEST_ERROR","USER_PAGE_ERROR","RESET_PASSWORD_ERROR","CONFIRM_PASSWORD_ERROR","initialState","Map","auth","loggedIn","user","username","email","id","content","game","main_info","rawg","name","background_image","background_image_additional","developers","hltb","game_image_url","user_info","status","review","score","spent_time","friends_info","movie","tmdb","title","poster_path","show","episode_run_time","showSeasons","searchContent","games","movies","shows","users","userPageContent","stats","userLogs","log","userFriendsLogs","openedPages","LoginForm","RegistrateForm","ResetPasswordForm","errors","registrate","gameRequest","movieRequest","userPage","resetPassword","confirmPassword","isLoading","contentGame","contentGameUserInfo","contentMovie","contentMovieUserInfo","contentShow","contentShowUserInfo","contentShowSeasons","userPageLogs","userPageFriendsLogs","searchGames","searchMovies","searchShows","searchUsers","getLoggedIn","state","get","getUser","getContentGame","getContentGameUserInfo","getContentMovie","getContentMovieUserInfo","getContentShow","getContentShowUserInfo","getContentShowSeasons","seasonNumber","getContentShowSeasonsUserInfo","getSearchContentGames","getSearchContentMovies","getSearchContentShows","getSearchContentUsers","getAuthError","getRegistrateError","getGameRequestError","getMovieRequestError","getShowRequestError","showRequest","getResetPasswordError","getConfirmPasswordError","getLoginForm","getRegistrateForm","getResetPasswordForm","getIsLoadingContentGame","getIsLoadingContentGameUserInfo","getIsLoadingContentMovie","getIsLoadingContentMovieUserInfo","getIsLoadingContentShow","getIsLoadingContentShowUserInfo","getIsLoadingContentShowSeasons","getIsLoadingSearchGames","getIsLoadingSearchMovies","getIsLoadingSearchShows","getIsLoadingSearchUsers","getIsLoadingUserPageContent","getIsLoadingUserPageLogs","getIsLoadingUserPageFriendsLogs","getUserPageContent","getUserPageLogs","getUserPageFriendsLogs","connect","selectors","className","style","marginTop","marginLeft","href","fontWeight","src","alt","BACKEND_URL","GET_TOKEN_URL","REFRESH_TOKEN_URL","REGISTRATE_URL","CONFIRM_URL","RESET_PASSWORD_URL","CONFIRM_PASSWORD_URL","GET_GAME_URL","SEARCH_GAMES_URL","GET_MOVIE_URL","SEARCH_MOVIES_URL","GET_SHOW_URL","SEARCH_SHOWS_URL","USER_INFO_URL","SEARCH_USERS_URL","axiosConfig","headers","getToken","password","a","axios","post","urls","res","userData","jwt_decode","data","access","user_id","token","refreshToken","refresh","console","updateToken","registration","response","confirmation","uid64","patch","put","getGame","AuthStr","getMovie","getShow","getShowSeason","showID","getShowEpisode","episodeNumber","setGameStatus","gameSlug","setMovieStatus","setShowStatus","setShowSeasonStatus","setShowEpisodesStatus","episodesList","query","page","gamesCount","params","page_size","getUserInfo","userID","setUserStatus","is_following","getUserLog","resultsOnPage","getUserFriendsLog","getGameUserInfo","slug","getMovieUserInfo","getShowUserInfo","getShowSeasonUserInfo","seasonID","getShowEpisodeUserInfo","episodeID","checkAuthorization","dispatch","localStorage","getItem","Date","now","type","actionTypes","setItem","resetAuthorization","removeItem","requestShowSeasonsUserInfo","Requests","then","result","newResult","user_watched_show","episodes","episodes_user_info","toast","error","needUpdate","seasons","episode","indexOf","season_number","push","season","openLoginForm","isOpen","setLoading","setError","isError","defaults","common","StatusButtonGroup","statuses","activeColor","onChangeStatus","userStatus","map","backgroundColor","onClick","intToHours","number","FriendsActivityRow","info","history","useHistory","window","location","origin","e","preventDefault","stop","emptySymbol","far","icon","size","fullSymbol","n","initialRating","readonly","hidden","FriendsActivity","friendInfo","requestError","gameIsLoading","gameUserInfo","gameUserInfoIsLoading","requestGame","actions","requestGameUserInfo","getState","useParams","useState","genres","setGenres","metascoreBlock","setMetascoreBlock","setReview","spentTime","setSpentTime","userRate","setUserRate","setDevelopers","date","setDate","gameplay_main_extra","gameplay_main","gameplay_comletionist","hltbInfo","setHtlbInfo","setClear","gameplay_completionist","useEffect","newGenres","i","length","metacritic","playtime","newDevelopers","released","mas","split","newDate","document","backgroundImage","active","spinner","text","md","display","gameplay_main_unit","gameplay_main_extra_unit","gameplay_completionist_unit","fontSize","onChange","marginBottom","paddingTop","dangerouslySetInnerHTML","__html","description","paddingLeft","label","value","event","target","outline","disabled","getElementById","movieIsLoading","movieUserInfo","movieUserInfoIsLoading","requestMovie","requestMovieUserInfo","companies","setCompanies","cast","setCast","director","setDirector","vote_average","production_companies","newCompanies","newCast","crew","newDirector","job","backdrop_path","original_title","release_date","runtime","tagline","overview","DetailedEpisodeRow","setShowEpisodeUserStatus","userInfo","checkAll","isChecked","setIsChecked","addEpisode","episode_number","checked","air_date","toLocaleDateString","start","concat","ownProps","showSeason","showSeasonIsLoading","showUserInfo","requestShowSeason","requestShowSeasonUserInfo","getEpisodeByNumber","open","counter","SeasonsBlock","needHeader","setNeedHeader","changedEpisodes","setChangedEpisodes","onChangeEpisodes","newChangedEpisodes","index","findIndex","splice","updateEpisodes","showIsLoading","showUserInfoIsLoading","requestShow","setShowUserStatus","requestShowUserInfo","showStatus","firstDate","setFirstDate","lastDate","setLastDate","first_air_date","last_air_date","original_name","number_of_seasons","number_of_episodes","show_id","chartData","setChartData","show_name","newData","show_original_name","width","height","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","interval","tick","fill","tickLine","domain","tickCount","contentStyle","color","stroke","fillOpacity","showEpisode","showEpisodeIsLoading","requestShowEpisode","setEpisodeUserStatus","requestShowEpisodeUserInfo","still_path","CardGame","setName","newName","substr","CardMovie","CardShow","CardUser","CategoriesTab","categories","onChangeCategory","activeCategory","setActiveCategory","category","gamesIsLoading","moviesIsLoading","showsIsLoading","usersIsLoading","searchGame","searchMovie","results","searchShow","queryText","setQueryText","gamesCards","setGamesCards","moviesCards","setMoviesCards","showsCards","setShowsCards","usersCards","setUsersCards","gamesPage","setGamesPage","moviesPage","setMoviesPage","showsPage","setShowsPage","onSubmit","placeholder","aria-label","authError","closeForm","logIn","login","openResetPasswordForm","setPassword","setLogin","toggle","centered","htmlFor","registrateArror","passwordConfirm","setPasswordConfirm","setEmail","outlineColor","resetPasswordError","confirmEmailRequest","success","search","URLSearchParams","confirmPasswordError","COLORS","GameBlock","gameChartData","setGameChartData","gameColumns","field","sort","columns","rows","gameTableData","setGameTableData","rawg_slug","rawg_name","name2","parseFloat","genre","spent_time_percent","b","count","total_spent_time","striped","bordered","small","barReverse","noBottomColumns","noRecordsFoundLabel","paginationLabel","entriesLabel","searchLabel","angle","tickMargin","itemStyle","borderRadius","cursor","entry","FriendBlock","MovieBlock","movieChartData","setMovieChartData","movieColumns","movieTableData","setMovieTableData","tmdb_id","tmdb_name","LogRow","showUsername","created","toLocaleTimeString","action","actionResult","translateActionType","action_type","action_result","actionType","translateType","parent_name","nameToLink","target_id","actionResultToStr","UserLogBlock","logs","onChangePage","logsByDay","setLogsByDay","currentPage","setCurrentPage","newLogs","getDay","groupLogsByDay","dayLog","has_next_page","ShowBlock","showChartData","setShowChartData","showColumns","showTableData","setShowTableData","userIsLoading","userLogsIsLoading","userFriendsLogsIsLoading","currentUserInfo","getUserLogs","getUserFriendsLogs","is_followed","cx","cy","outerRadius","labelLine","minAngle","verticalAlign","horizontalAlign","pageNumber","followed_users","onLoginClick","onLogoutClick","onRegistrationClick","dark","expand","fixed","to","nav","caret","Routes","exact","path","component","HomePage","GamePage","MoviePage","ShowPage","SeasonPage","EpisodePage","SearchPage","ConfirmPage","ConfirmPasswordPage","UserPage","render","position","hideProgressBar","newestOnTop","closeOnClick","React","Component","onLoad","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","types","setIn","applyMiddleware","thunk","ReactDOM","URL","process","addEventListener","fetch","contentType","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kcAAaA,G,OAAW,YACXC,EAAW,WAEXC,EAAgB,gBAChBC,EAAqB,qBACrBC,EAA0B,0BAE1BC,EAAmB,mBACnBC,EAA6B,6BAE7BC,EAAoB,oBACpBC,EAA8B,8BAE9BC,EAA2B,2BAC3BC,EAAqC,qCACrCC,EAAyC,yCAEzCC,EAAmB,mBACnBC,EAA6B,6BAE7BC,EAA2B,2BAC3BC,EAA4B,4BAC5BC,EAA2B,2BAC3BC,EAA2B,2BAE3BC,EAAwB,wBACxBC,EAA0B,0BAC1BC,EAAqB,qBACrBC,EAA6B,6BAE7BC,EAA8B,8BAC9BC,EAAwC,wCACxCC,EAA+B,+BAC/BC,EAAyC,yCACzCC,EAA8B,8BAC9BC,EAAwC,wCACxCC,EAAsC,sCACtCC,EAA8B,8BAC9BC,EAA+B,+BAC/BC,EAA8B,8BAC9BC,EAA8B,8BAC9BC,EAAmC,mCACnCC,EAAgC,gCAChCC,EAAwC,wCAExCC,EAAa,aACbC,EAAmB,mBACnBC,GAAqB,qBACrBC,GAAsB,sBACtBC,GAAqB,qBACrBC,GAAkB,kBAClBC,GAAuB,uBACvBC,GAAyB,yB,UChDhCC,GAAeC,aACjB,CACIC,KAAM,CAAEC,UAAU,GAClBC,KAAM,CAAEC,SAAS,GAAIC,MAAM,GAAIC,GAAI,MACnCC,QAAS,CACLC,KAAM,CAAEC,UAAU,CAAEC,KAAM,CAAEC,KAAM,GAAIC,iBAAkB,GAAIC,4BAA6B,GAAIC,WAAY,CAAC,KACtFC,KAAK,CAAEC,eAAgB,KACnCC,UAAU,CAAEC,OAAQ,KAAMC,OAAQ,GAAIC,MAAO,EAAGC,WAAY,EAAGC,aAAc,KAErFC,MAAO,CAAEd,UAAU,CAAEe,KAAM,CAAGC,MAAO,GAAIC,YAAa,GAAIZ,WAAY,CAAC,MAC9DG,UAAU,CAAEC,OAAQ,KAAOC,OAAQ,GAAIC,MAAO,EAAGE,aAAc,KAExEK,KAAM,CAAElB,UAAU,CAAEe,KAAM,CAAGC,MAAO,GAAIC,YAAa,GAAGZ,WAAY,CAAC,IAAKc,iBAAkB,KACpFX,UAAU,CAAEC,OAAQ,KAAMC,OAAQ,GAAIC,MAAO,EAAGE,aAAc,KAEtEO,YAAa,IAEjBC,cAAe,CAAEC,MAAO,GAAIC,OAAQ,GAAIC,MAAO,GAAIC,MAAO,IAC1DC,gBAAiB,CACbhC,KAAM,CACFiC,MAAO,IAEXC,SAAU,CAACC,IAAK,IAChBC,gBAAiB,CAACD,IAAK,KAE3BE,YAAa,CAAEC,WAAW,EAAOC,gBAAgB,EAAOC,mBAAmB,GAC3EC,OAAQ,CAAC3C,MAAM,EAAO4C,YAAY,EAAOC,aAAa,EAAOC,cAAc,EAAOC,UAAU,EAAOC,eAAe,EAAOC,iBAAiB,GAC1IC,UAAW,CAAKC,aAAa,EAAOC,qBAAqB,EACzCC,cAAc,EAAOC,sBAAsB,EAC3CC,aAAa,EAAOC,qBAAqB,EACzCC,mBAAoB,GACpBvB,iBAAiB,EAAOwB,cAAc,EAAOC,qBAAqB,EAClEC,aAAa,EAAOC,cAAc,EAAOC,aAAa,EAAQC,aAAa,KA4E5F,SAASC,GAAYC,GAAS,OAAOA,EAAMC,IAAI,QAAQjE,SAEvD,SAASkE,GAAQF,GAAU,OAAOA,EAAMC,IAAI,QAG5C,SAASE,GAAeH,GAAU,OAAOA,EAAMC,IAAI,WAAW3D,KAAKC,UACnE,SAAS6D,GAAuBJ,GAAU,OAAOA,EAAMC,IAAI,WAAW3D,KAAKS,UAC3E,SAASsD,GAAgBL,GAAS,OAAOA,EAAMC,IAAI,WAAW5C,MAAMd,UACpE,SAAS+D,GAAwBN,GAAU,OAAOA,EAAMC,IAAI,WAAW5C,MAAMN,UAC7E,SAASwD,GAAeP,GAAS,OAAOA,EAAMC,IAAI,WAAWxC,KAAKlB,UAClE,SAASiE,GAAuBR,GAAU,OAAOA,EAAMC,IAAI,WAAWxC,KAAKV,UAC3E,SAAS0D,GAAsBT,EAAOU,GAAe,IAAD,EAAE,iBAAOV,EAAMC,IAAI,WAAWtC,YAAY+C,UAAxC,aAAO,EAAgDnE,UAC7G,SAASoE,GAA8BX,EAAOU,GAAe,IAAD,EAAG,iBAAOV,EAAMC,IAAI,WAAWtC,YAAY+C,UAAxC,aAAO,EAAgD3D,UAGtH,SAAS6D,GAAsBZ,GAAS,OAAOA,EAAMC,IAAI,iBAAiBpC,MAC1E,SAASgD,GAAuBb,GAAS,OAAOA,EAAMC,IAAI,iBAAiBnC,OAC3E,SAASgD,GAAsBd,GAAS,OAAOA,EAAMC,IAAI,iBAAiBlC,MAC1E,SAASgD,GAAsBf,GAAS,OAAOA,EAAMC,IAAI,iBAAiBjC,MAG1E,SAASgD,GAAahB,GAAS,OAAOA,EAAMC,IAAI,UAAUlE,KAC1D,SAASkF,GAAmBjB,GAAS,OAAOA,EAAMC,IAAI,UAAUtB,WAChE,SAASuC,GAAoBlB,GAAU,OAAOA,EAAMC,IAAI,UAAUrB,YAClE,SAASuC,GAAqBnB,GAAS,OAAOA,EAAMC,IAAI,UAAUpB,aAClE,SAASuC,GAAoBpB,GAAS,OAAOA,EAAMC,IAAI,UAAUoB,YAEjE,SAASC,GAAsBtB,GAAU,OAAOA,EAAMC,IAAI,UAAUlB,cACpE,SAASwC,GAAwBvB,GAAU,OAAOA,EAAMC,IAAI,UAAUjB,gBAGtE,SAASwC,GAAaxB,GAAS,OAAOA,EAAMC,IAAI,eAAe1B,UAC/D,SAASkD,GAAmBzB,GAAS,OAAOA,EAAMC,IAAI,eAAezB,eACrE,SAASkD,GAAsB1B,GAAS,OAAOA,EAAMC,IAAI,eAAexB,kBAGxE,SAASkD,GAAwB3B,GAAS,OAAOA,EAAMC,IAAI,aAAaf,YACxE,SAAS0C,GAAgC5B,GAAS,OAAOA,EAAMC,IAAI,aAAad,oBAChF,SAAS0C,GAAyB7B,GAAU,OAAOA,EAAMC,IAAI,aAAab,aAC1E,SAAS0C,GAAiC9B,GAAS,OAAOA,EAAMC,IAAI,aAAaZ,qBACjF,SAAS0C,GAAwB/B,GAAU,OAAOA,EAAMC,IAAI,aAAaX,YACzE,SAAS0C,GAAgChC,GAAS,OAAOA,EAAMC,IAAI,aAAaV,oBAChF,SAAS0C,GAA+BjC,EAAOU,GAAiB,OAAOV,EAAMC,IAAI,aAAaT,mBAAmBkB,GACjH,SAASwB,GAAwBlC,GAAS,OAAOA,EAAMC,IAAI,aAAaN,YACxE,SAASwC,GAAyBnC,GAAS,OAAOA,EAAMC,IAAI,aAAaL,aACzE,SAASwC,GAAwBpC,GAAS,OAAOA,EAAMC,IAAI,aAAaJ,YACxE,SAASwC,GAAwBrC,GAAS,OAAOA,EAAMC,IAAI,aAAaH,YAExE,SAASwC,GAA4BtC,GAAS,OAAOA,EAAMC,IAAI,aAAahC,gBAC5E,SAASsE,GAAyBvC,GAAS,OAAOA,EAAMC,IAAI,aAAaR,aACzE,SAAS+C,GAAgCxC,GAAS,OAAOA,EAAMC,IAAI,aAAaP,oBAGhF,SAAS+C,GAAmBzC,GAAS,OAAOA,EAAMC,IAAI,mBAAmBhE,KACzE,SAASyG,GAAgB1C,GAAQ,OAAOA,EAAMC,IAAI,mBAAmB9B,SACrE,SAASwE,GAAuB3C,GAAS,OAAOA,EAAMC,IAAI,mBAAmB5B,gBCjJpF,IASeuE,gBATS,SAAA5C,GAAK,MAAK,CAC9B/D,KAAM4G,GAAkB7C,OAGC,WAC5B,MAAO,KAIO4C,EAtBf,YACC,IADmB3G,EACpB,EADoBA,KAEhB,OACD,sBAAK6G,UAAU,KAAf,UACC,oBAAIC,MAAO,CAACC,UAAW,OAAQC,WAAY,QAA3C,iIACA,qBAAIF,MAAO,CAACE,WAAY,QAAxB,8UAC8D,mBAAGC,KAAK,kBAAkBH,MAAO,CAACI,WAAY,OAA9C,wDAD9D,uGACmJ,mBAAGD,KAAM,SAASjH,EAAKG,GAAI2G,MAAO,CAACI,WAAY,OAA/C,wDADnJ,iKAGA,qBAAKC,IAAI,qBAAqBL,MAAO,CAACE,WAAY,QAASI,IAAI,2D,kICdtDC,GAAc,8BAEdC,GAAgBD,GAAc,oBAE9BE,GAAoBF,GAAc,4BAElCG,GAAiBH,GAAc,qBAE/BI,GAAcJ,GAAc,4BAE5BK,GAAqBL,GAAc,6BAEnCM,GAAuBN,GAAc,qCAErCO,GAAeP,GAAc,cAE7BQ,GAAmBR,GAAc,gBAEjCS,GAAgBT,GAAc,gBAE9BU,GAAoBV,GAAc,iBAElCW,GAAeX,GAAc,cAE7BY,GAAmBZ,GAAc,gBAEjCa,GAAgBb,GAAc,cAE9Bc,GAAmBd,GAAc,gBC3B1Ce,GAAc,CACdC,QAAS,CACL,eAAgB,mCASjB,SAAeC,GAAtB,qC,gDAAO,WAAwBrI,EAAUsI,GAAlC,oBAAAC,EAAA,+EAEmBC,KAAMC,KAAKC,GAAoB,CACrC1I,SAAUA,EACVsI,SAAUA,GACXH,IALZ,cAEOQ,EAFP,OAOKC,EAAWC,KAAWF,EAAIG,KAAKC,QAC/BhJ,EAAO,CAACC,SAAU4I,EAAS5I,SAAUE,GAAI0I,EAASI,QAAS/I,MAAO2I,EAAS3I,OARhF,kBAUQ,CAACgJ,MAAON,EAAIG,KAAKC,OAAQG,aAAcP,EAAIG,KAAKK,QAASpJ,KAAMA,IAVvE,uCAYCqJ,QAAQlH,IAAI,sBAZb,kBAaQ,MAbR,0D,sBAoBA,SAAemH,GAAtB,mC,gDAAO,WAA2BH,GAA3B,oBAAAX,EAAA,2DACyB,qBAAjBW,EAA+C,MAAhBA,GADvC,0CAGuBV,KAAMC,KAAKC,GAAwB,CACzCS,QAASD,GACVf,IALhB,cAGWQ,EAHX,OAOSC,EAAWC,KAAWF,EAAIG,KAAKC,QAC/BhJ,EAAO,CAACC,SAAU4I,EAAS5I,SAAUE,GAAI0I,EAASI,QAAS/I,MAAO2I,EAAS3I,OARpF,kBAUY,CAACgJ,MAAON,EAAIG,KAAKC,OAAQhJ,KAAMA,IAV3C,yCAYKqJ,QAAQlH,IAAI,sBAZjB,kBAaY,MAbZ,iCAeI,MAfJ,2D,sBAkBA,SAAeoH,GAAtB,uC,gDAAO,WAA4BtJ,EAAUC,EAAOqI,GAA7C,kBAAAC,EAAA,+EAEmBC,KAAMC,KAAKC,GACzB,CACI1I,SAAUA,EACVC,MAAOA,EACPqI,SAAUA,GACXH,IAPR,cAEOQ,EAFP,QAQKG,EAAOH,EAAIG,MACVhI,OAAS6H,EAAI7H,OATnB,kBAUQgI,GAVR,uCAYCM,QAAQlH,IAAI,gBAAiB,KAAEqH,UAZhC,kBAaQ,KAAEA,UAbV,0D,sBAiBA,SAAeC,GAAtB,qC,gDAAO,WAA4BC,EAAOR,GAAnC,gBAAAV,EAAA,+EAEmBC,KAAMkB,MAAMhB,GAAmB,UAAYe,EAAQ,UAAYR,GAFlF,cAEON,EAFP,yBAGQA,GAHR,uCAKES,QAAQlH,IAAI,gBAAiB,KAAEqH,UALjC,kBAMS,KAAEA,UANX,0D,sBAUC,SAAe1G,GAAtB,mC,gDAAO,WAA6B5C,GAA7B,gBAAAsI,EAAA,+EAEkBC,KAAMmB,IAAIjB,GAA0B,CAAGzI,MAAOA,GAASkI,IAFzE,cAEMQ,EAFN,yBAGOA,GAHP,uCAKCS,QAAQlH,IAAI,gBAAiB,KAAEqH,UALhC,kBAMQ,KAAEA,UANV,0D,sBAUA,SAAezG,GAAtB,qC,gDAAO,WAA+BmG,EAAOX,GAAtC,gBAAAC,EAAA,+EAEkBC,KAAMkB,MAAMhB,GAA4B,gBAAkBO,EAAQ,CAAEX,SAAUA,GAAYH,IAF5G,cAEMQ,EAFN,yBAGOA,GAHP,uCAKCS,QAAQlH,IAAI,gBAAiB,KAAEqH,UALhC,kBAMQ,KAAEA,UANV,0D,sBCvFR,IAAIpB,GAAc,CACdC,QAAS,CACL,eAAgB,mCAcjB,SAAewB,GAAtB,qC,gDAAO,WAAuBX,EAAO/I,GAA9B,sBAAAqI,EAAA,mEAGKU,EAHL,uBAISY,EAAU,UAAYZ,EAJ/B,SAKuBT,KAAMzE,IAAI4D,GAAezH,EAAK,IAAK,CAAE,QAAW,CAAE,cAAiB2J,KAL1F,OAKWlB,EALX,OAMKG,EAAOH,EAAIG,KANhB,wCAQuBN,KAAMzE,IAAI4D,GAAezH,EAAK,IAAKiI,IAR1D,QAQWQ,EARX,OASKG,EAAOH,EAAIG,KAThB,iCAWQA,GAXR,yCAaCM,QAAQlH,IAAI,gBAAZ,MAbD,kBAcQ,MAdR,2D,sBAyBA,SAAe4H,GAAtB,qC,gDAAO,WAAwBb,EAAO/I,GAA/B,sBAAAqI,EAAA,mEAGKU,EAHL,uBAISY,EAAU,UAAYZ,EAJ/B,SAKuBT,KAAMzE,IAAI8D,GAAgB3H,EAAK,IAAK,CAAE,QAAW,CAAE,cAAiB2J,KAL3F,OAKWlB,EALX,OAMKG,EAAOH,EAAIG,KANhB,wCAQuBN,KAAMzE,IAAI8D,GAAgB3H,EAAK,IAAKiI,IAR3D,QAQWQ,EARX,OASKG,EAAOH,EAAIG,KAThB,iCAWQA,GAXR,yCAaCM,QAAQlH,IAAI,gBAAZ,MAbD,kBAcQ,MAdR,2D,sBAwBA,SAAe6H,GAAtB,qC,gDAAO,WAAuBd,EAAO/I,GAA9B,sBAAAqI,EAAA,mEAGKU,EAHL,uBAISY,EAAU,UAAYZ,EAJ/B,SAKuBT,KAAMzE,IAAIgE,GAAe7H,EAAK,IAAK,CAAE,QAAW,CAAE,cAAiB2J,KAL1F,OAKWlB,EALX,OAMKG,EAAOH,EAAIG,KANhB,wCAQuBN,KAAMzE,IAAIgE,GAAe7H,EAAK,IAAKiI,IAR1D,QAQWQ,EARX,OASKG,EAAOH,EAAIG,KAThB,iCAWQA,GAXR,yCAaCM,QAAQlH,IAAI,gBAAZ,MAbD,kBAcQ,MAdR,2D,sBAyBA,SAAe8H,GAAtB,uC,gDAAO,WAA6Bf,EAAOgB,EAAQzF,GAA5C,sBAAA+D,EAAA,mEAGKU,EAHL,uBAISY,EAAU,UAAYZ,EAJ/B,SAKuBT,KAAMzE,IAAIgE,GAAekC,EAAS,WAAazF,EAAc,CAAE,QAAW,CAAE,cAAiBqF,KALpH,OAKWlB,EALX,OAMKG,EAAOH,EAAIG,KANhB,wCAQuBN,KAAMzE,IAAIgE,GAAekC,EAAS,WAAazF,EAAc2D,IARpF,QAQWQ,EARX,OASKG,EAAOH,EAAIG,KAThB,iCAWQA,GAXR,yCAaCM,QAAQlH,IAAI,gBAAZ,MAbD,kBAcQ,MAdR,2D,sBA0BA,SAAegI,GAAtB,yC,gDAAO,WAA8BjB,EAAOgB,EAAQzF,EAAc2F,GAA3D,sBAAA5B,EAAA,mEAGKU,EAHL,uBAISY,EAAU,UAAYZ,EAJ/B,SAKuBT,KAAMzE,IAAIgE,GAAekC,EAAS,WAAazF,EAAe,YAAc2F,EAAe,CAAE,QAAW,CAAE,cAAiBN,KALlJ,OAKWlB,EALX,OAMKG,EAAOH,EAAIG,KANhB,wCAQuBN,KAAMzE,IAAIgE,GAAekC,EAAS,WAAazF,EAAe,YAAc2F,EAAehC,IARlH,QAQWQ,EARX,OASKG,EAAOH,EAAIG,KAThB,iCAWQA,GAXR,yCAaCM,QAAQlH,IAAI,gBAAZ,MAbD,kBAcQ,MAdR,2D,sBAwBA,SAAekI,GAAtB,uC,gDAAO,WAA6BnB,EAAOoB,EAAUxJ,GAA9C,kBAAA0H,EAAA,sEAEKsB,EAAU,UAAYZ,EAF3B,SAImBT,KAAMmB,IAAIhC,GAAe0C,EAAW,IAClDxJ,EAAW,CAAEuH,QAAS,CAAE,cAAiByB,KAL9C,UAOoB,OAHblB,EAJP,QAOS7H,QAAiC,MAAf6H,EAAI7H,QAAiC,MAAf6H,EAAI7H,OAPrD,yCAQY6H,EAAIG,MARhB,gCASa,MATb,iEAWCM,QAAQlH,IAAI,gBAAZ,MAXD,kBAYQ,MAZR,2D,sBAsBA,SAAeoI,GAAtB,uC,gDAAO,WAA8BrB,EAAO/I,EAAIW,GAAzC,kBAAA0H,EAAA,sEAEKsB,EAAU,UAAYZ,EAF3B,SAGmBT,KAAMmB,IAAI9B,GAAgB3H,EAAK,IAC7CW,EAAW,CAAEuH,QAAS,CAAE,cAAiByB,KAJ9C,UAKoB,OAFblB,EAHP,QAKS7H,QAAiC,MAAf6H,EAAI7H,QAAiC,MAAf6H,EAAI7H,OALrD,yCAMY6H,EAAIG,MANhB,gCAOa,MAPb,iEASCM,QAAQlH,IAAI,gBAAZ,MATD,kBAUQ,MAVR,2D,sBAoBA,SAAeqI,GAAtB,uC,gDAAO,WAA6BtB,EAAO/I,EAAIW,GAAxC,kBAAA0H,EAAA,sEAEKsB,EAAU,UAAYZ,EAF3B,SAGmBT,KAAMmB,IAAI5B,GAAe7H,EAAK,IAC5CW,EAAW,CAAEuH,QAAS,CAAE,cAAiByB,KAJ9C,UAKoB,OAFblB,EAHP,QAKS7H,QAAiC,MAAf6H,EAAI7H,QAAiC,MAAf6H,EAAI7H,OALrD,yCAMY6H,EAAIG,MANhB,gCAOa,MAPb,iEASCM,QAAQlH,IAAI,gBAAZ,MATD,kBAUQ,MAVR,2D,sBAqBA,SAAesI,GAAtB,yC,gDAAO,WAAmCvB,EAAOgB,EAAQzF,EAAc3D,GAAhE,kBAAA0H,EAAA,sEAEKsB,EAAU,UAAYZ,EAF3B,SAGmBT,KAAMmB,IAAI5B,GAAekC,EAAS,WAAazF,EAAe,IAC5E3D,EAAW,CAAEuH,QAAS,CAAE,cAAiByB,KAJ9C,UAKoB,OAFblB,EAHP,QAKS7H,QAAiC,MAAf6H,EAAI7H,QAAiC,MAAf6H,EAAI7H,OALrD,yCAMY6H,EAAIG,MANhB,gCAOa,MAPb,iEASCM,QAAQlH,IAAI,gBAAZ,MATD,kBAUQ,MAVR,2D,sBAoBA,SAAeuI,GAAtB,uC,gDAAO,WAAqCxB,EAAOgB,EAAQS,GAApD,kBAAAnC,EAAA,sEAEKsB,EAAU,UAAYZ,EAF3B,SAGmBT,KAAMmB,IAAI5B,GAAekC,EAAS,aAChDS,EAAc,CAAEtC,QAAS,CAAE,cAAiByB,KAJjD,cAGOlB,EAHP,yBAKQA,GALR,uCAOCS,QAAQlH,IAAI,gBAAZ,MAPD,kBAQQ,MARR,0D,sBAiBA,SAAeuB,GAAtB,uC,gDAAO,WAA2BkH,EAAOC,EAAMC,GAAxC,gBAAAtC,EAAA,+EAEmBC,KAAMzE,IAAI6D,GAAkB,CAAEkD,OAAS,CAACH,MAAOA,EAAOC,KAAMA,EAAMG,UAAWF,IAC3F,CAAE,QAAW,CAAE,eAAgB,oCAHpC,cAEOlC,EAFP,yBAIQA,EAAIG,MAJZ,uCAMCM,QAAQlH,IAAI,gBAAZ,MAND,kBAOQ,MAPR,0D,sBAgBA,SAAewB,GAAtB,qC,gDAAO,WAA4BiH,EAAOC,GAAnC,gBAAArC,EAAA,+EAEmBC,KAAMzE,IAAI+D,GAAmB,CAAEgD,OAAS,CAACH,MAAOA,EAAOC,KAAMA,IAC3E,CAAE,QAAW,CAAE,eAAgB,oCAHpC,cAEOjC,EAFP,yBAIQA,EAAIG,MAJZ,uCAMCM,QAAQlH,IAAI,gBAAZ,MAND,kBAOQ,MAPR,0D,sBAgBA,SAAeyB,GAAtB,qC,gDAAO,WAA2BgH,EAAOC,GAAlC,gBAAArC,EAAA,+EAEmBC,KAAMzE,IAAIiE,GAAkB,CAAE8C,OAAS,CAACH,MAAOA,EAAOC,KAAMA,IAC1E,CAAE,QAAW,CAAE,eAAgB,oCAHpC,cAEOjC,EAFP,yBAIQA,EAAIG,MAJZ,uCAMCM,QAAQlH,IAAI,gBAAZ,MAND,kBAOQ,MAPR,0D,sBAeA,SAAe0B,GAAtB,mC,gDAAO,WAA2B+G,GAA3B,gBAAApC,EAAA,+EAEmBC,KAAMzE,IAAImE,GAAkB,CAAE4C,OAAS,CAACH,MAAOA,IAC7D,CAAE,QAAW,CAAE,eAAgB,oCAHpC,cAEOhC,EAFP,yBAIQA,EAAIG,MAJZ,uCAMCM,QAAQlH,IAAI,gBAAZ,MAND,kBAOQ,MAPR,0D,sBAiBA,SAAe8I,GAAtB,qC,gDAAO,WAA2B/B,EAAOgC,GAAlC,sBAAA1C,EAAA,mEAGKU,EAHL,uBAISY,EAAU,UAAYZ,EAJ/B,SAKuBT,KAAMzE,IAAIkE,GAAgBgD,EAAS,IAAK,CAAE,QAAW,CAAE,cAAiBpB,KAL/F,OAKWlB,EALX,OAMKG,EAAOH,EAAIG,KANhB,wCAQuBN,KAAMzE,IAAIkE,GAAgBgD,EAAS,IAAK9C,IAR/D,QAQWQ,EARX,OASKG,EAAOH,EAAIG,KAThB,iCAWQA,GAXR,yCAaCM,QAAQlH,IAAI,gBAAZ,MAbD,kBAcQ,MAdR,2D,sBAwBA,SAAegJ,GAAtB,uC,gDAAO,WAA6BjC,EAAOkC,EAAcF,GAAlD,kBAAA1C,EAAA,sEAEKsB,EAAU,UAAYZ,EAF3B,SAGmBT,KAAMmB,IAAI1B,GAAgBgD,EAAS,WACjDE,EAAc,CAAE/C,QAAS,CAAE,cAAiByB,KAJjD,UAKoB,OAFblB,EAHP,QAKS7H,QAAiC,MAAf6H,EAAI7H,QAAiC,MAAf6H,EAAI7H,OALrD,yCAMY6H,EAAIG,MANhB,gCAOa,MAPb,iEASCM,QAAQlH,IAAI,gBAAZ,MATD,kBAUQ,MAVR,2D,sBAoBA,SAAekJ,GAAtB,yC,gDAAO,WAA0BnC,EAAOgC,EAAQL,EAAMS,GAA/C,sBAAA9C,EAAA,mEAGKU,EAHL,uBAISY,EAAU,UAAYZ,EAJ/B,SAKuBT,KAAMzE,IAAIkE,GAAgBgD,EAAS,QAAS,CAAEH,OAAS,CAAEF,KAAMA,EAAMG,UAAWM,IAAmB,CAAE,QAAW,CAAE,cAAiBxB,KAL1J,OAKWlB,EALX,OAMKG,EAAOH,EAAIG,KANhB,wCAQuBN,KAAMzE,IAAIkE,GAAgBgD,EAAS,QAAS,CAAEH,OAAS,CAAEF,KAAMA,EAAMG,UAAWM,IAAmBlD,IAR1H,QAQWQ,EARX,OASKG,EAAOH,EAAIG,KAThB,iCAWQA,GAXR,yCAaCM,QAAQlH,IAAI,gBAAZ,MAbD,kBAcQ,MAdR,2D,sBAwBA,SAAeoJ,GAAtB,yC,gDAAO,WAAiCrC,EAAOgC,EAAQL,EAAMS,GAAtD,oBAAA9C,EAAA,sEAGKsB,EAAU,UAAYZ,EAH3B,SAImBT,KAAMzE,IAAIkE,GAAgBgD,EAAS,gBAAiB,CAAEH,OAAS,CAAEF,KAAMA,EAAMG,UAAWM,GAAiB,QAAW,CAAE,cAAiBxB,KAJ1J,cAIOlB,EAJP,OAKCG,EAAOH,EAAIG,KALZ,kBAMQA,GANR,uCAQCM,QAAQlH,IAAI,gBAAZ,MARD,kBASQ,MATR,0D,sBAkBA,SAAeqJ,GAAtB,qC,gDAAO,WAA+BtC,EAAOuC,GAAtC,oBAAAjD,EAAA,sEAGKsB,EAAU,UAAYZ,EAH3B,SAImBT,KAAMzE,IAAI4D,GAAe6D,EAAO,cAAe,CAAC,QAAW,CAAE,cAAiB3B,KAJjG,cAIOlB,EAJP,OAKCG,EAAOH,EAAIG,KALZ,kBAMQA,GANR,uCAQCM,QAAQlH,IAAI,gBAAZ,MARD,kBASQ,MATR,0D,sBAkBA,SAAeuJ,GAAtB,qC,gDAAO,WAAgCxC,EAAO/I,GAAvC,oBAAAqI,EAAA,sEAGKsB,EAAU,UAAYZ,EAH3B,SAImBT,KAAMzE,IAAI8D,GAAgB3H,EAAK,cAAe,CAAC,QAAW,CAAE,cAAiB2J,KAJhG,cAIOlB,EAJP,OAKCG,EAAOH,EAAIG,KALZ,kBAMQA,GANR,uCAQCM,QAAQlH,IAAI,gBAAZ,MARD,kBASQ,MATR,0D,sBAiBA,SAAewJ,GAAtB,qC,gDAAO,WAA+BzC,EAAOgB,GAAtC,oBAAA1B,EAAA,sEAGKsB,EAAU,UAAYZ,EAH3B,SAImBT,KAAMzE,IAAIgE,GAAekC,EAAS,cAAe,CAAE,QAAW,CAAE,cAAiBJ,KAJpG,cAIOlB,EAJP,OAKCG,EAAOH,EAAIG,KALZ,kBAMQA,GANR,uCAQCM,QAAQlH,IAAI,gBAAZ,MARD,kBASQ,MATR,0D,sBAiBA,SAAeyJ,GAAtB,uC,gDAAO,WAAqC1C,EAAOgB,EAAQ2B,GAApD,oBAAArD,EAAA,sEAGKsB,EAAU,UAAYZ,EAH3B,SAImBT,KAAMzE,IAAIgE,GAAekC,EAAS,WAAa2B,EAAW,cAAe,CAAE,QAAW,CAAE,cAAiB/B,KAJ5H,cAIOlB,EAJP,OAKCG,EAAOH,EAAIG,KALZ,kBAMQA,GANR,uCAQCM,QAAQlH,IAAI,gBAAZ,MARD,kBASQ,MATR,0D,sBAkBA,SAAe2J,GAAtB,yC,gDAAO,WAAsC5C,EAAOgB,EAAQ2B,EAAUE,GAA/D,oBAAAvD,EAAA,sEAGKsB,EAAU,UAAYZ,EAH3B,SAImBT,KAAMzE,IAAIgE,GAAekC,EAAS,WAAa2B,EAAW,YAAcE,EAAY,cAAe,CAAE,QAAW,CAAE,cAAiBjC,KAJtJ,cAIOlB,EAJP,OAKCG,EAAOH,EAAIG,KALZ,kBAMQA,GANR,uCAQCM,QAAQlH,IAAI,gBAAZ,MARD,kBASQ,MATR,0D,sBCraA,SAAS6J,KACZ,gDAAO,WAAMC,GAAN,oBAAAzD,EAAA,2DACmC,OAAlC0D,aAAaC,QAAQ,SAAoBC,KAAKC,MAAQH,aAAaC,QAAQ,aH3CzD,MG0CnB,iCAEmBrM,GAAiBoM,aAAaC,QAAQ,iBAFzD,UAGa,QADNvD,EAFP,gCAIKqD,EAAS,CACLK,KAAMC,EACNzM,KAAM,CAAEC,UAAU,KAEtBkM,EAAS,CACLK,KAAMC,EACNvM,KAAM4I,EAAI5I,OAEdkM,aAAaM,QAAQ,QAAS5D,EAAIM,OAClCgD,aAAaM,QAAQ,YAAaJ,KAAKC,OAb5C,mBAcY,GAdZ,eAiBKJ,EAASQ,MAjBd,mBAkBY,GAlBZ,uCAqBK5D,EAAWC,KAAWoD,aAAaC,QAAQ,UAC3CnM,EAAO,CAACC,SAAU4I,EAAS5I,SAAUE,GAAI0I,EAASI,QAAS/I,MAAO2I,EAAS3I,OAC/E+L,EAAS,CACLK,KAAMC,EACNvM,KAAMA,IAEViM,EAAS,CACLK,KAAMC,EACNzM,KAAM,CAAEC,UAAU,KA7BvB,mBA+BQ,GA/BR,4CAAP,sDAqCG,SAAS0M,KACZ,gDAAO,WAAMR,GAAN,UAAAzD,EAAA,sDACH0D,aAAaQ,WAAW,gBACxBR,aAAaQ,WAAW,SACxBR,aAAaQ,WAAW,aACxBT,EAAS,CACLK,KAAMC,EACNzM,KAAM,CAAEC,UAAU,KAEtBkM,EAAS,CACLK,KAAMC,EACNvM,KAAM,CAAEC,SAAS,GAAIE,GAAI,KAAMD,MAAM,MAVtC,2CAAP,sDA6PG,SAASyM,GAA2BzC,EAAQ2B,GAC/C,gDAAO,WAAMI,GAAN,UAAAzD,EAAA,sDACHyD,EAAS,CACLK,KAAMC,EACN9H,aAAcoH,EACd7I,WAAW,IAEf4J,GAA+BV,aAAaC,QAAQ,SAAUjC,EAAQ2B,GAAUgB,MAAK,SAACC,GAClF,GAAc,MAAVA,EAAe,CACf,IAAIC,EAAS,6BAAOD,EAAOhM,WAAd,IAAyBkM,kBAAmBF,EAAOE,kBAAmBC,SAAUH,EAAOI,mBAAoB/L,aAAc2L,EAAO3L,eAC7I8K,EAAS,CACLK,KAAMC,EACN9H,aAAcoH,EACd/K,UAAWiM,SAIfI,IAAMC,MAAM,+HAEhBnB,EAAS,CACLK,KAAMC,EACN9H,aAAcoH,EACd7I,WAAW,OArBhB,2CAAP,sDAqOG,SAAS0H,GAAsBC,EAAcT,GAA0B,IAAlBmD,EAAiB,wDACzE,gDAAO,WAAMpB,GAAN,UAAAzD,EAAA,sEACOyD,EAASD,MADhB,kCAECY,GAA+BV,aAAaC,QAAQ,SAAUjC,EAAQS,GAAckC,MAAK,SAACC,GACtF,GAAsB,MAAlBA,EAAO/L,OAAmC,MAAlB+L,EAAO/L,OAAmC,MAAlB+L,EAAO/L,OACvDoM,IAAMC,MAAM,qJAEZ,GAAIC,EAAW,CACX,IAAIC,EAAU,GACd,IAAK,IAAIC,KAAW5C,EAAasC,UAC2C,IAAnEK,EAAQE,QAAQ7C,EAAasC,SAASM,GAASE,gBAChDH,EAAQI,KAAK/C,EAAasC,SAASM,GAASE,eAEpD,IAAK,IAAIE,KAAUL,EACfrB,EAASU,GAA2BzC,EAAQoD,EAAQK,SAbrE,2CAAP,sDA2GG,SAASC,KACZ,MAAO,CAAEtB,KAAMC,EAA2BsB,QAAQ,GAuBtD,SAASC,GAAW7B,EAAUK,EAAMtJ,GAChCiJ,EAAS,CACLK,KAAMA,EACNtJ,UAAWA,IAInB,SAAS+K,GAAS9B,EAAUK,EAAM0B,GAC9B/B,EAAS,CACLK,KAAMA,EACNc,MAAOY,IDzrBfvF,KAAMwF,SAAS5F,QAAQ6F,OAAS,CAC5B,eAAgB,oB,OEOLC,OAdf,YAAmF,IAAtDC,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WAEhE,OACI,8BACKH,EAASI,KAAI,SAACzN,GAAD,OAAY,wBAAQ8F,UAAW,kBAEbC,MAAO,CAAC2H,gBAAkBF,IAAexN,EAAOsN,EAAY,WAC5DK,QAAS,WAAOJ,EAAevN,IAHrC,SAIOA,GAHIA,SC6BjD,SAAS4N,GAAWC,GAChB,OAAI,IAAMA,GAAUA,GAAU,GACnB,iCACFA,EAAS,KAAO,EACd,qBACF,GAAKA,EAAS,IAAMA,EAAS,IAAM,EACjC,2BAEA,iCAGAC,OAvCf,YAAwC,IAATC,EAAQ,EAARA,KACvBC,EAAUC,cAEd,OACI,sBAAKnI,UAAU,iBAAf,UACI,oBAAIA,UAAU,gBAAd,SACI,mBAAGI,KAAMgI,OAAOC,SAASC,OAAS,SAAWL,EAAK9O,KAAKG,GAC/CuO,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWoB,EAAK9O,KAAKG,IAAKiP,EAAEC,kBADnE,SAGKP,EAAK9O,KAAKC,aAGnB,sBAAK4G,UAAU,gBAAf,UACI,cAAC,KAAD,CAAQyI,KAAM,GACMC,YAAa,cAAC,KAAD,CAASC,KAAG,EAACC,KAAK,OAAOC,KAAK,OAC3CC,WAAY,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAInB,KAAI,SAAAoB,GAAC,OAAI,cAAC,KAAD,CAASH,KAAK,OAAOC,KAAK,KAAKpO,MAAOsO,OAClFC,cAAef,EAAK7N,MACpB4F,UAAU,oBACViJ,UAAU,IAE9B,oBAAGjJ,UAAU,oBAAb,mDAA0CiI,EAAK/N,OAA/C,OACA,oBAAG8F,UAAU,oBAAoBkJ,QAAUjB,EAAK5N,WAAhD,0GAAgF4N,EAAK5N,WAArF,IAAkGyN,GAAWG,EAAK5N,eAClH,oBAAG2F,UAAU,oBAAoBkJ,OAAsB,KAAdjB,EAAK9N,OAA9C,6CAAmE8N,EAAK9N,iBCnBzEgP,OATf,YAAqC,IAATlB,EAAQ,EAARA,KAExB,OACI,qBAAKjI,UAAU,eAAf,SACuB,qBAATiI,EAAR,OAA8BA,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAMN,KAAI,SAACyB,GAAD,OAAgB,cAAC,GAAD,CAAoBnB,KAAMmB,GAAiBA,EAAWjQ,KAAKG,OAAO,MC6QxI,IA0BewG,gBA1BS,SAAA5C,GAAK,MAAK,CAC9BhE,SAAU6G,GAAsB7C,GAChCmM,aAActJ,GAA8B7C,GAC5C1D,KAAMuG,GAAyB7C,GAC/BoM,cAAevJ,GAAkC7C,GACjDqM,aAAcxJ,GAAiC7C,GAC/CsM,sBAAuBzJ,GAA0C7C,OAG1C,SAACkI,GAC3B,MAAO,CACNqE,YAAa,SAACnQ,GACJ8L,EJ9JL,SAAqB9L,GACxB,gDAAO,WAAM8L,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAAyC,GAC9DwB,GAAS9B,EAAUM,IAAgC,GACnDK,GAAiBV,aAAaC,QAAQ,SAAUhM,GAAI0M,MAAK,SAACC,GACxC,MAAVA,EACAb,EAAS,CACLK,KAAMC,EACNlM,KAAMyM,KAIVK,IAAMC,MAAM,qFACZW,GAAS9B,EAAUM,IAAgC,IAEvDuB,GAAW7B,EAAUM,GAAyC,MAd/D,2CAAP,sDI6JiBgE,CAAoBpQ,KAEjCqQ,oBAAqB,SAAC/E,GAClBQ,EJ5IL,SAA6BR,GAChC,gDAAO,WAAMQ,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAAmD,GACxEK,GAAyBV,aAAaC,QAAQ,SAAUV,GAAMoB,MAAK,SAACC,GAChE,GAAc,MAAVA,EAAe,CACf,IAAIC,EAAS,6BAAOD,EAAOhM,WAAd,IAAyBK,aAAc2L,EAAO3L,eAC3D8K,EAAS,CACLK,KAAMC,EACNzL,UAAWiM,SAIfI,IAAMC,MAAM,yHAEhBU,GAAW7B,EAAUM,GAAmD,MAbzE,2CAAP,sDI2IiBgE,CAA4B9E,KAEzCmC,cAAe,WACX3B,EAASsE,OAEblG,cAAe,SAACtJ,GJqFjB,IAAuBD,EIpFlBmL,GJoFkBnL,EIpFaC,EJqFvC,yCAAO,WAAMkL,EAAUwE,GAAhB,UAAAjI,EAAA,sEACOyD,EAASD,MADhB,kCAECY,GAAuBV,aAAaC,QAAQ,SAAUvF,GAAyB6J,KAAYlQ,KAAKkL,KAAM3K,GAAW+L,MAAK,SAACC,GAC9GA,GACDK,IAAMC,MAAM,mJAJrB,2CAAP,8DIhFWzG,EAlRf,YAES,IAAD,EAFa2J,EAEb,EAFaA,YAAa1C,EAE1B,EAF0BA,cAAevD,EAEzC,EAFyCA,cAAemG,EAExD,EAFwDA,oBACxDzQ,EACA,EADAA,SAAUM,EACV,EADUA,KAAM8P,EAChB,EADgBA,cAAgBC,EAChC,EADgCA,aAAcC,EAC9C,EAD8CA,sBAE5ClQ,EAAOuQ,cAAPvQ,GADF,EAEwBwQ,mBAAS,IAFjC,oBAEGC,EAFH,KAEWC,EAFX,OAGwCF,mBAAS,IAHjD,oBAGGG,EAHH,KAGmBC,EAHnB,OAIwBJ,mBAAS,IAJjC,oBAIG3P,EAJH,KAIWgQ,EAJX,OAK8BL,mBAAS,GALvC,oBAKGM,EALH,KAKcC,EALd,OAMgCP,mBAAS,+CANzC,oBAMGpC,EANH,KAMepD,EANf,OAO4BwF,mBAAS,GAPrC,oBAOGQ,EAPH,KAOaC,EAPb,OAQgCT,mBAAS,IARzC,oBAQGhQ,EARH,KAQe0Q,EARf,OASoBV,mBAAS,IAT7B,oBASGW,EATH,KASSC,EATT,OAU4BZ,mBAAS,CAACa,qBAAsB,EAAGC,eAAgB,EAAGC,uBAAwB,IAV1G,oBAUGC,EAVH,KAUaC,EAVb,KA6GJ,SAASC,IACLhB,EAAU,IACVE,EAAkB,IAClBa,EAAY,CAACJ,qBAAsB,EAAGC,eAAgB,EAAGK,wBAAyB,IAClFT,EAAc,IACdE,EAAQ,IAGZ,OAzGAQ,qBACF,WACUF,IACAb,EAAU,IACVE,EAAa,GACb/F,EAAc,+CACdiG,EAAY,GACZd,EAAYnQ,KAGtB,CAACA,EAAImQ,IAGHyB,qBACF,WACchS,EACAyQ,EAAoBrQ,IAEpB6Q,EAAU,IACVE,EAAa,KACb/F,EAAc,+CACdiG,EAAY,MAI1B,CAACjR,EAAIJ,IAGHgS,qBACF,WAEU,GADAF,IACIxR,EAAKE,KAAKqQ,OAAO,CAEjB,IADA,IAAIoB,EAAY,GACPC,EAAI,EAAGA,EAAI5R,EAAKE,KAAKqQ,OAAOsB,OAAQD,IACzCD,GAAa3R,EAAKE,KAAKqQ,OAAOqB,GAAGzR,KAC7ByR,IAAM5R,EAAKE,KAAKqQ,OAAOsB,OAAS,IAChCF,GAAa,MAEpBnB,EAAUmB,GAoBf,GAjBI3R,EAAKE,KAAK4R,YACVpB,EACI,gCACI,qBAAKlK,UAAU,aAAf,SACI,4BAAIxG,EAAKE,KAAK4R,eAElB,mBAAGtL,UAAU,iBAAb,2BAKRxG,EAAKO,KACLgR,EAAYvR,EAAKO,MACXP,EAAKE,KAAK6R,UAChBR,EAAY,CAACJ,oBAAqBnR,EAAKE,KAAK6R,SAAUX,eAAgB,EAAGK,wBAAyB,IAGlGzR,EAAKE,KAAKI,WAAW,CAErB,IADA,IAAI0R,EAAgB,GACXJ,EAAI,EAAGA,EAAI5R,EAAKE,KAAKI,WAAWuR,OAAQD,IAC7CI,GAAiBhS,EAAKE,KAAKI,WAAWsR,GAAGzR,KACrCyR,IAAM5R,EAAKE,KAAKI,WAAWuR,OAAS,IACxCG,GAAiB,MAErBhB,EAAcgB,GAGlB,GAAIhS,EAAKE,KAAK+R,SAAS,CACnB,IAAIC,EAAMlS,EAAKE,KAAK+R,SAASE,MAAM,KAC/BC,EAAUF,EAAI,GAAK,IAAMA,EAAI,GAAK,IAAMA,EAAI,GAChDhB,EAAQkB,GAGZC,SAASpR,MAAQjB,EAAKE,KAAKC,OAErC,CAACH,IAGC0R,qBACF,YACU,OAAI3B,QAAJ,IAAIA,OAAJ,EAAIA,EAAcrP,SACdiQ,EAAUZ,EAAapP,QACvBkQ,EAAad,EAAalP,YAC1BiK,EAAciF,EAAarP,QAC3BqQ,EAAYhB,EAAanP,SAEzB+P,EAAU,IACVE,EAAa,GACb/F,EAAc,+CACdiG,EAAY,MAI1B,CAAChB,IAYS,gCACT,qBAAKvJ,UAAU,KAAKC,MAAO,CAAC6L,gBAAgB,OAAD,OAAStS,EAAKE,KAAKG,4BAA4BL,EAAKE,KAAKG,4BAA4BL,EAAKE,KAAKE,iBAA/F,QAC9B,cAAC,KAAD,CACImS,OAAQzC,EACR0C,SAAO,EACPC,KAAK,sDAHT,SAKA,cAAC,KAAD,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAQC,GAAG,QACX,eAAC,KAAD,CAAQlM,UAAU,kBAAlB,UACI,eAAC,KAAD,WACI,eAAC,KAAD,CAAQA,UAAU,gCAAlB,UACI,cAAC,KAAD,CAAQ6I,KAAK,IAAI7I,UAAU,cAA3B,SACI,qBAAKM,IAAK9G,EAAKE,KAAKE,iBAAkBoG,UAAU,YAAYO,IAAI,OAEpE,eAAC,KAAD,CAAQsI,KAAK,IAAb,UACI,6BAAKrP,EAAKE,KAAKC,OACf,sBAAKqG,UAAU,WAAf,UACI,2GAAkBlG,KAClB,gGAAiB2Q,KACjB,2DAAUV,KACV,mBAAG9J,MAAO,CAACkM,QAAS,UAApB,iHACA,sBAAKjD,OAAQ4B,EAASF,cAAgB,EAAG3K,MAAO,CAACkM,QAAS,UAA1D,UACI,cAAC,KAAD,CAASxD,KAAG,EAACC,KAAK,QAAQ5I,UAAU,mBAAmBvF,MAAO,8EAAkB,sBAAMuF,UAAU,OAAO8K,EAASF,cADpH,IACoIE,EAASsB,mBAAmB,sBAAMpM,UAAU,UANpL,IAOW,mBAAGC,MAAO,CAACkM,QAAS,UAApB,eACP,sBAAKjD,OAAQ4B,EAASH,oBAAsB,EAAG1K,MAAO,CAACkM,QAAS,UAAhE,UACI,cAAC,KAAD,CAASxD,KAAG,EAACC,KAAK,QAAQ5I,UAAU,cAAcvF,MAAO,4KAAqC,sBAAMuF,UAAU,OAAO8K,EAASH,oBADlI,IACwJG,EAASuB,yBAAyB,sBAAMrM,UAAU,UAT9M,IAUW,mBAAGC,MAAO,CAACkM,QAAS,UAApB,eACP,sBAAKjD,OAAQ4B,EAASG,uBAAyB,EAAGhL,MAAO,CAACkM,QAAS,UAAnE,UACI,cAAC,KAAD,CAASxD,KAAG,EAACC,KAAK,QAAQ5I,UAAU,WAAWvF,MAAO,4GAAuB,sBAAMuF,UAAU,OAAO8K,EAASG,uBADjH,IAC0IH,EAASwB,kCAGvJ,eAAC,KAAD,CAAgBP,OAAQvC,EAAuBwC,SAAO,EAACC,KAAK,sDAA5D,UACI,cAAC,KAAD,CAAQxD,KAAM,GACVC,YAAa,cAAC,KAAD,CAASC,KAAG,EAACC,KAAK,OAAOC,KAAK,KAAK5I,MAAO,CAACsM,SAAU,UAClEzD,WAAY,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAInB,KAAI,SAAAoB,GAAC,OAAI,cAAC,KAAD,CAASH,KAAK,OAAOC,KAAK,KAAK5I,MAAO,CAACsM,SAAU,QAAS9R,MAAOsO,OAC7GC,cAAesB,EACfrB,UAAW/P,EAAwB,gDAAbwO,EACtB8E,SAAU,SAACpS,GACFlB,GAGDqR,EAAYnQ,GACZoJ,EAAc,CAACpJ,MAAOA,KAHtB2M,KAMR9G,MAAO,CAACwM,aAAc,UAd9B,IAeO,uBACH,cAAC,GAAD,CACIlF,SAAU,CAAC,8CAAY,gEAAe,iCAAS,6CAAW,wCAC1DC,YAAY,UACZE,WAAYA,EACZD,eAAgB,SAACvN,GACRhB,GAGDoL,EAAcpK,GACdsJ,EAAe,CAAEtJ,OAAQA,IACV,gDAAXA,IACAiQ,EAAU,IACVI,EAAY,KANhBxD,aAapB,cAAC,KAAD,CAAQ8B,KAAK,IAAb,SACMoB,OAGV,cAAC,KAAD,CAAQjK,UAAU,kBAAlB,SACI,eAAC,KAAD,WACI,oBAAIC,MAAO,CAACyM,WAAY,QAAxB,8DACA,qBAAKC,wBAAyB,CAACC,OAAQpT,EAAKE,KAAKmT,oBAGzD,cAAC,KAAD,UACA,eAAC,KAAD,CAAQhE,KAAK,IAAI5I,MAAO,CAAC6M,YAAa,QAAS5D,QAAShQ,EAAxD,UACI,oBAAI+G,MAAO,CAACyM,WAAY,QAAxB,kDACI,eAAC,KAAD,CAAgBX,OAAQvC,EAAuBwC,SAAO,EAACC,KAAK,sDAA5D,UACI,cAAC,KAAD,CACIxG,KAAK,WACLnM,GAAG,cACHyT,MAAM,oDACNC,MAAO7S,EACPqS,SAAU,SAACS,GAAD,OAAU9C,EAAU8C,EAAMC,OAAOF,QAC3CG,SAAO,IAEX,cAAC,KAAD,CACI1H,KAAK,SACLnM,GAAG,iBACHyT,MAAM,+HACNC,MAAO5C,EACPoC,SAAU,SAACS,GAAD,OAAU5C,EAAa4C,EAAMC,OAAOF,UAElD,wBACIhN,UAAW,oBACXoN,UAAWlU,EAAwB,gDAAbwO,EACtBG,QAAS,WACI3O,EAGDsK,EAAc,CAAIrJ,OAAQ0R,SAASwB,eAAe,eAAeL,MAAO3S,WAAYwR,SAASwB,eAAe,kBAAkBL,QAF9HjG,KALhB,+EAkBhB,sBAAK/G,UAAU,mBAAmBkJ,QAAShQ,GAAuB,OAAZqQ,QAAY,IAAZA,GAAA,UAAAA,EAAcjP,oBAAd,eAA4B+Q,QAAS,EAA3F,UACI,2GACA,cAAC,GAAD,CAAiBpD,KAAI,OAAEsB,QAAF,IAAEA,OAAF,EAAEA,EAAcjP,qBAG7C,cAAC,KAAD,CAAQ4R,GAAG,qB,OCDnC,IA0BepM,gBA1BS,SAAA5C,GAAK,MAAK,CAC9BhE,SAAU6G,GAAsB7C,GAChCmM,aAActJ,GAA+B7C,GAC7C3C,MAAOwF,GAA0B7C,GACjCoQ,eAAgBvN,GAAmC7C,GACnDqQ,cAAexN,GAAkC7C,GACjDsQ,uBAAwBzN,GAA2C7C,OAG5C,SAACkI,GAC3B,MAAO,CACNqI,aAAc,SAACnU,GACL8L,EL7GL,SAAsB9L,GACzB,gDAAO,WAAM8L,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAA0C,GAC/DwB,GAAS9B,EAAUM,IAAiC,GACpDK,GAAkBV,aAAaC,QAAQ,SAAUhM,GAAI0M,MAAK,SAACC,GACzC,MAAVA,EACAb,EAAS,CACLK,KAAMC,EACNnL,MAAO0L,KAIXK,IAAMC,MAAM,qFACZW,GAAS9B,EAAUM,IAAiC,IAExDuB,GAAW7B,EAAUM,GAA0C,MAdhE,2CAAP,sDK4GiBgE,CAAqBpQ,KAElCyN,cAAe,WACX3B,EAASsE,OAEbhG,eAAgB,SAACxJ,GLkOlB,IAAwBD,EKjOnBmL,GLiOmBnL,EKjOaC,ELkOxC,yCAAO,WAAMkL,EAAUwE,GAAhB,UAAAjI,EAAA,sEACOyD,EAASD,MADhB,kCAECY,GAAwBV,aAAaC,QAAQ,SAAUvF,GAA0B6J,KAAYpP,KAAKlB,GAAIW,GAAW+L,MAAK,SAACC,GAC9GA,GACDK,IAAMC,MAAM,mJAJrB,2CAAP,2DKhOImH,qBAAsB,SAACpU,GACnB8L,ELlGL,SAA8B9L,GACjC,gDAAO,WAAM8L,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAAoD,GACzEK,GAA0BV,aAAaC,QAAQ,SAAUhM,GAAI0M,MAAK,SAACC,GAC/D,GAAc,MAAVA,EAAe,CACf,IAAIC,EAAS,6BAAOD,EAAOhM,WAAd,IAAyBK,aAAc2L,EAAO3L,eAC3D8K,EAAS,CACLK,KAAMC,EACNzL,UAAWiM,SAIfI,IAAMC,MAAM,yHAEhBU,GAAW7B,EAAUM,GAAoD,MAb1E,2CAAP,sDKiGiBgE,CAA6BpQ,QAKnCwG,EA1Qf,YAIS,IAAD,EAHA2N,EAGA,EAHAA,aAAclT,EAGd,EAHcA,MAAO+S,EAGrB,EAHqBA,eAAgB5J,EAGrC,EAHqCA,eACrCgK,EAEA,EAFAA,qBAAsBH,EAEtB,EAFsBA,cAAeC,EAErC,EAFqCA,uBACrCtU,EACA,EADAA,SAAU6N,EACV,EADUA,cAERzN,EAAOuQ,cAAPvQ,GADF,EAEwCwQ,mBAAS,IAFjD,oBAEGG,EAFH,KAEmBC,EAFnB,OAGwBJ,mBAAS,IAHjC,oBAGGC,EAHH,KAGWC,EAHX,OAI8BF,mBAAS,IAJvC,oBAIG6D,EAJH,KAIcC,EAJd,OAKoB9D,mBAAS,IAL7B,oBAKG+D,EALH,KAKSC,EALT,OAM4BhE,mBAAS,IANrC,oBAMGiE,EANH,KAMaC,EANb,OAOwBlE,mBAAS,IAPjC,oBAOG3P,EAPH,KAOWgQ,EAPX,OAQgCL,mBAAS,2DARzC,oBAQGpC,EARH,KAQepD,EARf,OAS4BwF,mBAAS,GATrC,oBASGQ,EATH,KASaC,EATb,KAkHJ,SAASS,IACLgD,EAAY,IACZF,EAAQ,IACRF,EAAa,IACb5D,EAAU,IACVE,EAAkB,IAGtB,OA/GAgB,qBACF,WACUF,IACAb,EAAU,IACV7F,EAAc,2DACdiG,EAAY,GACZkD,EAAanU,KAGvB,CAACA,EAAImU,IAGHvC,qBACF,WACchS,EACAwU,EAAqBpU,IAErB6Q,EAAU,IACVI,EAAY,GACZjG,EAAc,8DAI5B,CAACpL,EAAUI,IAGT4R,qBACF,WAaU,GAZAF,IACIzQ,EAAMC,KAAKyT,cACX/D,EACI,gCACI,qBAAKlK,UAAU,aAAf,SACI,4BAA8B,GAA1BzF,EAAMC,KAAKyT,iBAEnB,mBAAGjO,UAAU,iBAAb,4BAKRzF,EAAMC,KAAKuP,OAAO,CAElB,IADA,IAAIoB,EAAY,GACPC,EAAI,EAAGA,EAAI7Q,EAAMC,KAAKuP,OAAOsB,OAAQD,IAC1CD,GAAa5Q,EAAMC,KAAKuP,OAAOqB,GAAGzR,KAC9ByR,IAAM7Q,EAAMC,KAAKuP,OAAOsB,OAAS,IACjCF,GAAa,MAErBnB,EAAUmB,GAGd,GAAI5Q,EAAMC,KAAK0T,qBAAqB,CAEhC,IADA,IAAIC,EAAe,GACV/C,EAAI,EAAGA,EAAI7Q,EAAMC,KAAK0T,qBAAqB7C,OAAQD,IACxD+C,GAAgB5T,EAAMC,KAAK0T,qBAAqB9C,GAAGzR,KAC/CyR,IAAM7Q,EAAMC,KAAK0T,qBAAqB7C,OAAS,IAC/C8C,GAAgB,MAExBP,EAAaO,GAGjB,GAAI5T,EAAMC,KAAKqT,KAAK,CAGhB,IAFA,IAAIO,EAAU,GACV/C,EAAS9Q,EAAMC,KAAKqT,KAAKxC,OAAO,EAAE,EAAE9Q,EAAMC,KAAKqT,KAAKxC,OAC/CD,EAAI,EAAGA,EAAIC,EAAQD,IACxBgD,GAAW7T,EAAMC,KAAKqT,KAAKzC,GAAGzR,KAC1ByR,IAAMC,EAAS,IACf+C,GAAW,MAEnBN,EAAQM,GAGZ,GAAI7T,EAAMC,KAAK6T,KAAK,CAEhB,IADA,IAAIC,EAAc,GACTlD,EAAI,EAAGA,EAAI7Q,EAAMC,KAAK6T,KAAKhD,OAAQD,IACxC,GAA+B,aAA3B7Q,EAAMC,KAAK6T,KAAKjD,GAAGmD,IAAmB,CACtCD,EAAc/T,EAAMC,KAAK6T,KAAKjD,GAAGzR,KACjC,MAGRqU,EAAYM,GAGhBzC,SAASpR,MAAQF,EAAMC,KAAKC,QAEtC,CAACF,IAGC2Q,qBACF,YACU,OAAIqC,QAAJ,IAAIA,OAAJ,EAAIA,EAAerT,SACfiQ,EAAUoD,EAAcpT,QACxBmK,EAAciJ,EAAcrT,QAC5BqQ,EAAYgD,EAAcnT,SAE1B+P,EAAU,IACVI,EAAY,GACZjG,EAAc,8DAI5B,CAACiJ,IAYS,gCACT,qBAAKvN,UAAU,KAAKC,MAAO,CAAC6L,gBAAgB,OAAD,OAAU,uDAAyDvR,EAAMC,KAAKgU,cAA9E,QAC9B,cAAC,KAAD,CACIzC,OAAQuB,EACRtB,SAAO,EACPC,KAAK,sDAHT,SAKA,cAAC,KAAD,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAQC,GAAG,QACX,eAAC,KAAD,CAAQlM,UAAU,mBAAlB,UACI,eAAC,KAAD,WACI,eAAC,KAAD,CAAQA,UAAU,iCAAlB,UACI,cAAC,KAAD,CAAQ6I,KAAK,IAAI7I,UAAU,cAA3B,SACI,qBAAKM,IAAK,iDAAmD/F,EAAMC,KAAKE,YAAasF,UAAU,YAAYO,IAAI,OAEnH,eAAC,KAAD,CAAQsI,KAAK,IAAb,UACI,6BAAKtO,EAAMC,KAAKC,QAChB,oBAAIwF,MAAO,CAACwM,aAAc,OAAQvM,UAAW,SAA7C,SAAwD3F,EAAMC,KAAKiU,iBACnE,sBAAKzO,UAAU,WAAf,UACI,gGAAiBzF,EAAMC,KAAKkU,gBAC5B,8JAA6BnU,EAAMC,KAAKmU,WACxC,2DAAU5E,KACV,mFAAc4D,KACd,uEAAYpT,EAAMC,KAAKoU,WACvB,wEAAaf,KACb,mFAAcE,QAElB,eAAC,KAAD,CAAgBhC,OAAQyB,EAAwBxB,SAAO,EAACC,KAAK,sDAA7D,UACI,cAAC,KAAD,CAAQxD,KAAM,GACVC,YAAa,cAAC,KAAD,CAASC,KAAG,EAACC,KAAK,OAAOC,KAAK,KAAK5I,MAAO,CAACsM,SAAU,UAClEzD,WAAY,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAInB,KAAI,SAAAoB,GAAC,OAAI,cAAC,KAAD,CAASH,KAAK,OAAOC,KAAK,KAAK5I,MAAO,CAACsM,SAAU,QAAS9R,MAAOsO,OAC7GC,cAAesB,EACfrB,UAAW/P,EAAwB,4DAAbwO,EACtB8E,SAAU,SAACpS,GACFlB,GAGDqR,EAAYnQ,GACZsJ,EAAe,CAACtJ,MAAOA,KAHvB2M,OARhB,IAcO,uBACH,cAAC,GAAD,CACIQ,SAAU,CAAC,0DAAc,4EAAiB,6CAAW,0DACrDC,YAAY,UACZE,WAAYA,EACZD,eAAgB,SAACvN,GACRhB,GAGDoL,EAAcpK,GAClBwJ,EAAe,CAAExJ,OAAQA,IACV,4DAAXA,IACIiQ,EAAU,IACVI,EAAY,KANhBxD,aAapB,cAAC,KAAD,CAAQ8B,KAAK,IAAb,SACMoB,OAGV,cAAC,KAAD,CAAQjK,UAAU,mBAAlB,SACI,eAAC,KAAD,WACI,oBAAIC,MAAO,CAACyM,WAAY,QAAxB,8DACA,qBAAKC,wBAAyB,CAACC,OAAQrS,EAAMC,KAAKqU,iBAG1D,eAAC,KAAD,CAAQhG,KAAK,IAAI5I,MAAO,CAAC6M,YAAa,QAAS5D,QAAShQ,EAAxD,UACI,oBAAI+G,MAAO,CAACyM,WAAY,QAAxB,kDACI,eAAC,KAAD,CAAgBX,OAAQyB,EAAwBxB,SAAO,EAACC,KAAK,sDAA7D,UACI,cAAC,KAAD,CACIxG,KAAK,WACLnM,GAAG,cACHyT,MAAM,oDACNC,MAAO7S,EACPqS,SAAU,SAACS,GAAD,OAAU9C,EAAU8C,EAAMC,OAAOF,QAC3CG,SAAO,IAEX,wBACInN,UAAW,oBACXoN,UAAWlU,EAAwB,4DAAbwO,EACtBG,QAAS,WACI3O,EAGDwK,EAAe,CAAIvJ,OAAQ0R,SAASwB,eAAe,eAAeL,QAFlEjG,KALhB,6EAiBhB,sBAAK/G,UAAU,oBAAoBkJ,QAAShQ,GAAwB,OAAbqU,QAAa,IAAbA,GAAA,UAAAA,EAAejT,oBAAf,eAA6B+Q,QAAS,EAA7F,UACI,2GACA,cAAC,GAAD,CAAiBpD,KAAI,OAAEsF,QAAF,IAAEA,OAAF,EAAEA,EAAejT,qBAG9C,cAAC,KAAD,CAAQ4R,GAAG,qB,MCvJpB4C,OApGf,YAA2H,IAuCpGrE,EAvCQ/D,EAA2F,EAA3FA,QAASrD,EAAkF,EAAlFA,OAAQ0L,EAA0E,EAA1EA,yBAA0B7V,EAAgD,EAAhDA,SAAU8V,EAAsC,EAAtCA,SAAUvH,EAA4B,EAA5BA,eAAgBwH,EAAY,EAAZA,SACtG/G,EAAUC,cADwG,EAEtF2B,mBAAS,GAF6E,oBAE/GQ,EAF+G,KAErGC,EAFqG,OAGpFT,oBAAS,GAH2E,oBAG/GoF,EAH+G,KAGpGC,EAHoG,KA4CtH,OAvCAjE,qBAAU,WACFX,EAAW,OAACyE,QAAD,IAACA,OAAD,EAACA,EAAU5U,OACtB+U,GAAqB,OAARH,QAAQ,IAARA,OAAA,EAAAA,EAAU5U,QAAS,KAEpC,CAAC4U,IAGL9D,qBAAU,YACY,IAAd+D,GACAE,GAAa,GACb1H,EAAe,CACX2H,YAAY,IAAW9E,GAAY,EACnC5D,QAAS,CACLE,cAAeF,EAAQE,cACvByI,eAAgB3I,EAAQ2I,eACxBjV,OAAQ,MAGG,IAAb6U,IACNE,GAAa,GACb1H,EAAe,CACX2H,YAAY,IAAU9E,GAAY,EAClC5D,QAAS,CACLE,cAAeF,EAAQE,cACvByI,eAAgB3I,EAAQ2I,eACxBjV,MAAO,QAMvB,CAAC6U,IASG,sBAAKjP,UAAU,uBAAf,UACI,qBAAKA,UAAU,iBAAiBkJ,QAAShQ,GAAoC,qBAAjBuO,EAA5D,SACI,uBAAOhC,KAAK,WAAW6J,QAASJ,EAAW1C,SACvC,SAACzK,GACGoN,EAAapN,EAAImL,OAAOoC,SACxB7H,EAAe,CACX2H,WAAYrN,EAAImL,OAAOoC,UAAahF,GAAY,EAChD5D,QAAS,CACLE,cAAeF,EAAQE,cACvByI,eAAgB3I,EAAQ2I,eACxBjV,MAAQ2H,EAAImL,OAAOoC,QAAQ,GAAG,UAKlD,mBAAGtP,UAAU,cAAb,UArBWyK,EAqB2B/D,EAAQ6I,SApBpC,IAAIhK,KAAKkF,GACR+E,mBAAmB,YAoB9B,oBAAGxP,UAAU,uCACTI,KAAMgI,OAAOC,SAASC,OAAS,SAAWjF,EAAS,WAAaqD,EAAQE,cAAgB,YAAaF,EAAQ2I,eAC7GxH,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWxD,EAAS,WAAaqD,EAAQE,cAAgB,YAAaF,EAAQ2I,gBAAiB9G,EAAEC,kBAFpI,4CAIW9B,EAAQ2I,eAJnB,MAIsC3I,EAAQ/M,QAE9C,qBAAKuP,QAAShQ,EAAU8G,UAAU,iBAAlC,SACI,cAAC,KAAD,CAAQyP,OAAQ,EAAGhH,KAAM,GACrBC,YAAa,CAAC,cAAC,KAAD,CAASE,KAAK,eAAgB8G,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI/H,KAAI,SAAAoB,GAAC,OAAI,cAAC,KAAD,CAASJ,KAAG,EAACC,KAAK,OAAOC,KAAK,WACjHC,WAAY,CAAC,cAAC,KAAD,CAASF,KAAK,SAAU8G,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI/H,KAAI,SAAAoB,GAAC,OAAI,cAAC,KAAD,CAASH,KAAK,OAAOC,KAAK,KAAIpO,MAAOsO,QACjHE,UAAW/P,EACX8P,cAAesB,EACfkC,SAAU,SAACpS,GACHmQ,EAAYnQ,GACZ+U,EAAa/U,GAAS,GAUtB2U,EAAyB,CAAC3I,SAAU,CAAE,CAC9BQ,cAAeF,EAAQE,cACvByI,eAAgB3I,EAAQ2I,eACxBjV,MAAOA,KAEXiJ,YCtBhC,IAqBevD,gBArBS,SAAC5C,EAAOyS,GAAR,MAAsB,CAC1CzW,SAAU6G,GAAsB7C,GAChC0S,WAAY7P,GAAgC7C,EAAOyS,EAAS/R,cAC5DiS,oBAAqB9P,GAAyC7C,EAAOyS,EAAS/R,cAC9EkS,aAAc/P,GAAwC7C,EAAOyS,EAAS/R,kBAG/C,SAACwH,GAC3B,MAAO,CACN2K,kBAAmB,SAAC1M,EAAQzF,GAClBwH,EPmKL,SAA4B/B,EAAQzF,GACvC,gDAAO,WAAMwH,GAAN,UAAAzD,EAAA,sDACHyD,EAAS,CACLK,KAAMC,EACN9H,aAAcA,EACdzB,WAAW,IAEf4J,GAAuBV,aAAaC,QAAQ,SAAUjC,EAAQzF,GAAcoI,MAAK,SAACC,GAChE,MAAVA,EACAb,EAAS,CACLK,KAAMC,EACN9H,aAAcA,EACdqK,KAAMhC,IAIVK,IAAMC,MAAM,2FAEhBnB,EAAS,CACLK,KAAMC,EACN9H,aAAcA,EACdzB,WAAW,OApBhB,2CAAP,sDOpKiBuN,CAA2BrG,EAAQzF,KAEhDoS,0BAA2B,SAAC3M,EAAQzF,GAChCwH,EAASsE,GAAmCrG,EAAQzF,KAExDmR,yBAA0B,SAAC7U,EAAQmJ,GAC/B+B,EAASsE,GAA8BxP,EAAQmJ,QAK5CvD,EAtFf,YAEmG,IAAD,QAF1EuD,EAE0E,EAF1EA,OAAQzF,EAEkE,EAFlEA,aAAc1E,EAEoD,EAFpDA,SACtC0W,EAC0F,EAD1FA,WAAYC,EAC8E,EAD9EA,oBAAqBC,EACyD,EADzDA,aACjCC,EAA0F,EAA1FA,kBAAmBC,EAAuE,EAAvEA,0BAA2BjB,EAA4C,EAA5CA,yBAA0BtH,EAAkB,EAAlBA,eACxES,EAAUC,cADgF,EAE5D2B,mBAAS,GAFmD,oBAEvFoF,EAFuF,KAE5EC,EAF4E,KAuB9F,SAASc,EAAmB7J,EAAU2B,GAClC,IAAK,IAAIrB,KAAWN,EAChB,GAAIA,EAASM,GAAS2I,iBAAmBtH,EACrC,OAAO3B,EAASM,GAG5B,OAzBAwE,qBACF,WACUiE,EAAa,GACbY,EAAkB1M,EAAQzF,KAGpC,CAACyF,EAAQzF,EAAcmS,IAGrB7E,qBACF,WACUiE,EAAa,GACTjW,GACA8W,EAA0B3M,EAAQzF,KAGhD,CAAC1E,EAAUmK,EAAQzF,IAUb,cAAC,KAAD,CAAgBmO,OAAQ8D,EAAqB7D,SAAO,EAACC,KAAK,sDAA1D,SACA,sBAAgCjM,UAAU,cAA1C,UACI,qBAAKA,UAAU,aAAf,SACI,mBAAGI,KAAMgI,OAAOC,SAASC,OAAS,SAAWjF,EAAS,WAAazF,EAC/DiK,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWxD,EAAS,WAAazF,GAAe2K,EAAEC,kBADrF,SAGI,0CAAOoH,QAAP,IAAOA,GAAP,UAAOA,EAAYpV,YAAnB,aAAO,EAAkBb,KAAzB,WAGR,0BAASuW,MAAM,EAAOlQ,UAAU,cAAhC,UACI,mGACI,sBAAKC,MAAO,CAACE,WAAY,OAAQ+I,QAAShQ,EAA1C,8EAEI,uBAAOuM,KAAK,WAAW6J,QAASJ,EAAY,EAAG1C,SAAW,SAACzK,GAAUoN,EAAapN,EAAImL,OAAOoC,QAAQ,GAAG,SAE5G,oCACGM,QADH,IACGA,GADH,UACGA,EAAYpV,YADf,iBACG,EAAkB4L,gBADrB,aACG,EAA4BuB,KAAI,SAACjB,EAASyJ,GAAV,OAAsB,oBAAInQ,UAAU,UAAd,SACjD,cAAC,GAAD,CAAoB0G,QAASA,EAASrD,OAAQA,EAAQnK,SAAUA,EAC5D8V,SAAUiB,EAAkB,OAACH,QAAD,IAACA,OAAD,EAACA,EAAc1J,SAAf,OAAyBM,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAS2I,gBAC9DN,yBAA0BA,EAC1BtH,eAAgB,SAACvN,GAAD,OAAYuN,EAAevN,IAC3C+U,SAAUC,KALgEiB,aAflG,OAAUP,QAAV,IAAUA,GAAV,UAAUA,EAAYpV,YAAtB,aAAU,EAAkBlB,SCCrB8W,OAzCf,YAAuE,IAA9C/M,EAA6C,EAA7CA,OAAQoD,EAAqC,EAArCA,QAASsI,EAA4B,EAA5BA,yBAA4B,EAC9BjF,oBAAS,GADqB,oBAC3DuG,EAD2D,KAC/CC,EAD+C,OAEpBxG,mBAAS,IAFW,oBAE3DyG,EAF2D,KAE1CC,EAF0C,KAkBlE,OACI,uCAEQ/J,QAFR,IAEQA,OAFR,EAEQA,EAASkB,KAAI,SAACb,GAAD,OACT,cAAC,GAAD,CAAazD,OAAQA,EAAQzF,aAAckJ,EAAOF,cAC9C6J,iBAAkB,SAACrK,GAAc5D,QAAQlH,IAAI8K,IAC7CqB,eAAgB,SAACvN,GAAD,OApBpC,SAAwBwM,GACpB,IAAIgK,EAAqBH,EACzB,GAAI7J,EAAQ0I,WACRsB,EAAmB7J,KAAKH,EAAQA,aAChC,CACA,IAAMiK,EAAQD,EAAmBE,WAAW,SAAAxF,GAAC,OAAIA,EAAEiE,iBAAmB3I,EAAQA,QAAQ2I,gBAAkBjE,EAAExE,gBAAkBF,EAAQA,QAAQE,iBACxI+J,GAAS,GACTD,EAAmBG,OAAOF,EAAO,GAEzCL,EAAcI,EAAmBrF,OAAS,GAC1CmF,EAAmBE,GACnBlO,QAAQlH,IAAIoV,GASgCI,CAAe5W,KADmB4M,EAAOF,kBAIjF,qBAAK5G,UAAU,qBAAqBkJ,QAASmH,EAA7C,SACI,wBAAQrQ,UAAU,qBACd6H,QAAS,WACLkH,EAAyB,CAAC3I,SAAUmK,GAAmBlN,GACvDiN,GAAc,IAHtB,0ECqPhB,IA6BexQ,gBA7BS,SAAA5C,GAAK,MAAK,CAC9BhE,SAAU6G,GAAsB7C,GAChCmM,aAActJ,GAA8B7C,GAC5CvC,KAAMoF,GAAyB7C,GAC/B6T,cAAehR,GAAkC7C,GACjD4S,aAAc/P,GAAiC7C,GAC/C8T,sBAAuBjR,GAA0C7C,OAG1C,SAACkI,GAC3B,MAAO,CACN6L,YAAa,SAAC3X,GACJ8L,EThFL,SAAqB9L,GACxB,gDAAO,WAAM8L,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAAyC,GAC9DwB,GAAS9B,EAAUM,IAAgC,GACnDK,GAAiBV,aAAaC,QAAQ,SAAUhM,GAAI0M,MAAK,SAACC,GACxC,MAAVA,EACAb,EAAS,CACLK,KAAMC,EACN/K,KAAMsL,KAIVK,IAAMC,MAAM,2FACZW,GAAS9B,EAAUM,IAAgC,IAEvDuB,GAAW7B,EAAUM,GAAyC,MAd/D,2CAAP,sDS+EiBgE,CAAoBpQ,KAEjC4X,kBAAmB,SAAChX,GT6OrB,IAAuBD,ES5OlBmL,GT4OkBnL,ES5OaC,ET6OvC,yCAAO,WAAMkL,EAAUwE,GAAhB,UAAAjI,EAAA,sEACOyD,EAASD,MADhB,kCAECY,GAAuBV,aAAaC,QAAQ,SAAUvF,GAAyB6J,KAAYpP,KAAKlB,GAAIW,GAAW+L,MAAK,SAACC,GAC5GA,GACDK,IAAMC,MAAM,mJAJrB,2CAAP,2DS3OIQ,cAAe,WACX3B,EAASsE,OAEbyH,oBAAqB,SAAC7X,GAClB8L,ETFL,SAA6B9L,GAChC,gDAAO,WAAM8L,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAAmD,GACxEK,GAAyBV,aAAaC,QAAQ,SAAUhM,GAAI0M,MAAK,SAACC,GAC9D,GAAc,MAAVA,EAAe,CACf,IAAIC,EAAS,6BAAOD,EAAOhM,WAAd,IAAyBK,aAAc2L,EAAO3L,eAC3D8K,EAAS,CACLK,KAAMC,EACNzL,UAAWiM,SAIfI,IAAMC,MAAM,yHAEhBU,GAAW7B,EAAUM,GAAmD,MAbzE,2CAAP,sDSCiBgE,CAA4BpQ,KAEzCyV,yBAA0B,SAAC7U,EAAQmJ,GAC/B+B,EAASsE,GAA8BxP,EAAQmJ,GAAQ,QAKpDvD,EAtRf,YAGS,IAHYmR,EAGb,EAHaA,YAAatW,EAG1B,EAH0BA,KAAMoW,EAGhC,EAHgCA,cAAeG,EAG/C,EAH+CA,kBAAmBnC,EAGlE,EAHkEA,yBACtDoC,EAEZ,EAFYA,oBAAqBrB,EAEjC,EAFiCA,aAAckB,EAE/C,EAF+CA,sBACnC9X,EACZ,EADYA,SAAU6N,EACtB,EADsBA,cAEpBzN,EAAOuQ,cAAPvQ,GADF,EAEwCwQ,mBAAS,IAFjD,oBAEGG,EAFH,KAEmBC,EAFnB,OAGwBJ,mBAAS,IAHjC,oBAGGC,EAHH,KAGWC,EAHX,OAI8BF,mBAAS,IAJvC,oBAIG6D,EAJH,KAIcC,EAJd,OAKgC9D,mBAAS,IALzC,oBAKGsH,EALH,KAKezN,EALf,OAM8BmG,mBAAS,IANvC,oBAMGuH,EANH,KAMcC,EANd,OAO4BxH,mBAAS,IAPrC,oBAOGyH,EAPH,KAOaC,EAPb,OAQwB1H,mBAAS,IARjC,oBAQG3P,EARH,KAQWgQ,EARX,OASgCL,mBAAS,2DATzC,oBASGpC,EATH,KASepD,EATf,OAU4BwF,mBAAS,GAVrC,oBAUGQ,EAVH,KAUaC,EAVb,KA0HJ,SAASS,IACLwG,EAAY,IACZF,EAAa,IACb3N,EAAc,IACdiK,EAAa,IACb5D,EAAU,IACVE,EAAkB,IAGtB,OAvHAgB,qBACF,WACUF,IACAb,EAAU,IACV7F,EAAc,2DACdiG,EAAY,GACZ0G,EAAY3X,KAGtB,CAACA,EAAI2X,IAGH/F,qBACF,WACchS,EACAiY,EAAoB7X,IAEpB6Q,EAAU,IACVI,EAAY,GACZjG,EAAc,8DAI5B,CAACpL,EAAUI,IAGT4R,qBACF,WAaU,GAZAF,IACIrQ,EAAKH,KAAKyT,cACV/D,EACI,gCACI,qBAAKlK,UAAU,aAAf,SACI,4BAA6B,GAAzBrF,EAAKH,KAAKyT,iBAElB,mBAAGjO,UAAU,iBAAb,4BAKRrF,EAAKH,KAAKuP,OAAO,CAEjB,IADA,IAAIoB,EAAY,GACPC,EAAI,EAAGA,EAAIzQ,EAAKH,KAAKuP,OAAOsB,OAAQD,IACzCD,GAAaxQ,EAAKH,KAAKuP,OAAOqB,GAAGzR,KAC7ByR,IAAMzQ,EAAKH,KAAKuP,OAAOsB,OAAS,IAChCF,GAAa,MAErBnB,EAAUmB,GAGd,GAAIxQ,EAAKH,KAAK0T,qBAAqB,CAE/B,IADA,IAAIC,EAAe,GACV/C,EAAI,EAAGA,EAAIzQ,EAAKH,KAAK0T,qBAAqB7C,OAAQD,IACvD+C,GAAgBxT,EAAKH,KAAK0T,qBAAqB9C,GAAGzR,KAC9CyR,IAAMzQ,EAAKH,KAAK0T,qBAAqB7C,OAAS,IAC9C8C,GAAgB,MAExBP,EAAaO,GAGjB,OAAQxT,EAAKH,KAAKN,QACd,IAAK,QACDyJ,EAAc,8CAAW,MAC7B,IAAK,mBACDA,EAAc,4EAAgB,MAClC,IAAK,QACDA,EAAc,kCAAS,MAC3B,IAAK,WACDA,EAAc,8CAAW,MAC7B,IAAK,gBACDA,EAAc,mFAAkB,MACpC,IAAK,UACDA,EAAc,4EAAgB,MAClC,QACIA,EAAchJ,EAAKH,KAAKN,QAGhC,GAAIS,EAAKH,KAAKiX,eAAe,CACzB,IAAI/F,EAAM/Q,EAAKH,KAAKiX,eAAe9F,MAAM,KACrCC,EAAUF,EAAI,GAAK,IAAMA,EAAI,GAAK,IAAMA,EAAI,GAChD4F,EAAa1F,GAGjB,GAAIjR,EAAKH,KAAKkX,cAAc,CACxB,IAAIhG,EAAM/Q,EAAKH,KAAKkX,cAAc/F,MAAM,KACpCC,EAAUF,EAAI,GAAK,IAAMA,EAAI,GAAK,IAAMA,EAAI,GAChD8F,EAAY5F,GAGhBC,SAASpR,MAAQE,EAAKH,KAAKb,OAErC,CAACgB,IAGCuQ,qBACF,YACU,OAAI4E,QAAJ,IAAIA,OAAJ,EAAIA,EAAc5V,SACdiQ,EAAU2F,EAAa3V,QACvBmK,EAAcwL,EAAa5V,QAC3BqQ,EAAYuF,EAAa1V,SAEzB+P,EAAU,IACVI,EAAY,GACZjG,EAAc,8DAI5B,CAACwL,IAaS,gCACT,qBAAK9P,UAAU,KAAKC,MAAO,CAAC6L,gBAAgB,OAAD,OAAU,uDAAyDnR,EAAKH,KAAKgU,cAA7E,QAC9B,cAAC,KAAD,CAAgBzC,OAAQgF,EAAe/E,SAAO,EAACC,KAAK,sDAApD,SACA,cAAC,KAAD,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAQC,GAAG,QACX,eAAC,KAAD,CAAQlM,UAAU,kBAAlB,UACI,eAAC,KAAD,WACI,eAAC,KAAD,CAAQA,UAAU,gCAAlB,UACI,cAAC,KAAD,CAAQ6I,KAAK,IAAI7I,UAAU,cAA3B,SACI,qBAAKM,IAAK,iDAAmD3F,EAAKH,KAAKE,YAAasF,UAAU,YAAYO,IAAI,OAElH,eAAC,KAAD,CAAQsI,KAAK,IAAb,UACI,6BAAKlO,EAAKH,KAAKb,OACf,oBAAIsG,MAAO,CAACwM,aAAc,OAAQvM,UAAW,SAA7C,SAAwDvF,EAAKH,KAAKmX,gBAClE,sBAAK3R,UAAU,WAAf,UACI,2DAAU+J,KACV,mFAAc4D,KACd,oBAAGzE,OAAoB,KAAZmI,EAAX,gJAAsDA,KACtD,oBAAGnI,OAAmB,KAAXqI,EAAX,kKAAwDA,KACxD,oBAAGrI,QAAQvO,EAAKH,KAAKI,iBAArB,0IAA4ED,EAAKH,KAAKI,iBAAiBD,EAAKH,KAAKI,iBAAiB,GAAG,KACrI,0IAAwBD,EAAKH,KAAKoX,qBAClC,8HAAsBjX,EAAKH,KAAKqX,sBAChC,uEAAYT,QAEhB,eAAC,KAAD,CAAgBrF,OAAQiF,EAAuBhF,SAAO,EAACC,KAAK,sDAA5D,UACI,cAAC,KAAD,CAAQxD,KAAM,GACVC,YAAa,cAAC,KAAD,CAASC,KAAG,EAACC,KAAK,OAAOC,KAAK,KAAK5I,MAAO,CAACsM,SAAU,UAClEzD,WAAY,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAInB,KAAI,SAAAoB,GAAC,OAAI,cAAC,KAAD,CAASH,KAAK,OAAOC,KAAK,KAAK5I,MAAO,CAACsM,SAAU,QAAS9R,MAAOsO,OAC7GC,cAAesB,EACfrB,UAAW/P,EAAwB,4DAAbwO,EACtB8E,SAAU,SAACpS,GACFlB,GAGDqR,EAAYnQ,GACZ8W,EAAkB,CAAC9W,MAAOA,KAH1B2M,OARhB,IAcO,uBACH,cAAC,GAAD,CAAmB7N,SAAUA,EACzBqO,SAAU,CAAC,0DAAc,4EAAiB,uCAAU,6CAAW,0DAC/DC,YAAY,UACZE,WAAYA,EACZD,eAAgB,SAACvN,GACRhB,GAGDoL,EAAcpK,GACdgX,EAAkB,CAAEhX,OAAQA,IACb,4DAAXA,IACAiQ,EAAU,IACVI,EAAY,KANhBxD,aAYpB,cAAC,KAAD,CAAQ8B,KAAK,IAAb,SACMoB,OAGV,cAAC,KAAD,CAAQjK,UAAU,kBAAlB,SACI,eAAC,KAAD,WACI,oBAAIC,MAAO,CAACyM,WAAY,QAAxB,8DACA,qBAAKC,wBAAyB,CAACC,OAAQjS,EAAKH,KAAKqU,iBAGzD,sBAAK7O,UAAU,kBAAf,UACI,oBAAIC,MAAO,CAACyM,WAAY,QAAxB,iFACA,cAAC,GAAD,CAAcrJ,OAAQ1I,EAAKH,KAAKlB,GAAImN,QAAS9L,EAAKH,KAAKiM,QACnDsI,yBAA0BA,OAElC,eAAC,KAAD,CAAQlG,KAAK,IAAI5I,MAAO,CAAC6M,YAAa,QAAS5D,QAAShQ,EAAxD,UACI,oBAAI+G,MAAO,CAACyM,WAAY,QAAxB,kDACA,eAAC,KAAD,CAAgBX,OAAQiF,EAAuBhF,SAAO,EAACC,KAAK,sDAA5D,UACI,cAAC,KAAD,CACIxG,KAAK,WACLnM,GAAG,cACHyT,MAAM,oDACNC,MAAO7S,EACPqS,SAAU,SAACS,GAAD,OAAU9C,EAAU8C,EAAMC,OAAOF,QAC3CG,SAAO,IAEX,wBACInN,UAAW,oBACXoN,UAAWlU,EAAwB,4DAAbwO,EACtBG,QAAS,WACI3O,EAGDgY,EAAkB,CAAE/W,OAAQ0R,SAASwB,eAAe,eAAeL,QAFnEjG,KALhB,6EAiBZ,sBAAK/G,UAAU,oBAAoBkJ,OAAQ4G,EAAaxV,aAAa+Q,OAAS,EAA9E,UACI,2GACA,cAAC,GAAD,CAAiBpD,KAAM6H,EAAaxV,qBAG5C,cAAC,KAAD,CAAQ4R,GAAG,qB,SC7BnC,IA6BepM,gBA7BS,SAAA5C,GAAK,MAAK,CAC9BhE,SAAU6G,GAAsB7C,GAChCmM,aAActJ,GAA8B7C,GAC5C0S,WAAY7P,GAAyB7C,GACrC2S,oBAAqB9P,GAAkC7C,GACvD4S,aAAc/P,GAAiC7C,GAC/C8T,sBAAuBjR,GAA0C7C,OAG1C,SAACkI,GAC3B,MAAO,CACN2K,kBAAmB,SAAC1M,EAAQzF,GAClBwH,EVvBL,SAA2B/B,EAAQzF,GACtC,gDAAO,WAAMwH,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAAyC,GAC9DwB,GAAS9B,EAAUM,IAAgC,GACnDK,GAAuBV,aAAaC,QAAQ,SAAUjC,EAAQzF,GAAcoI,MAAK,SAACC,GAChE,MAAVA,EACAb,EAAS,CACLK,KAAMC,EACN/K,KAAMsL,KAIVK,IAAMC,MAAM,2FACZW,GAAS9B,EAAUM,IAAgC,IAEvDuB,GAAW7B,EAAUM,GAAyC,MAd/D,2CAAP,sDUsBiBgE,CAA0BrG,EAAQzF,KAE/CsT,kBAAmB,SAAChX,EAAQmJ,EAAQzF,GAChCwH,EVmSL,SAA6BnL,EAAWoJ,EAAQzF,GACnD,gDAAO,WAAMwH,GAAN,UAAAzD,EAAA,sEACOyD,EAASD,MADhB,kCAECY,GAA6BV,aAAaC,QAAQ,SAAUjC,EAAQzF,EAAc3D,GAAW+L,MAAK,SAACC,GAC1FA,GACDK,IAAMC,MAAM,mJAJrB,2CAAP,sDUpSiBmD,CAA4BxP,EAAQmJ,EAAQzF,KAEzDmR,yBAA0B,SAAC7U,EAAQmJ,GAC/B+B,EAASsE,GAA8BxP,EAAQmJ,KAEnD0D,cAAe,WACX3B,EAASsE,OAEbsG,0BAA2B,SAAC3M,EAAQ2B,GAChCI,EVmDL,SAAmC/B,EAAQ2B,GAC9C,gDAAO,WAAMI,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAAmD,GACxEK,GAA+BV,aAAaC,QAAQ,SAAUjC,EAAQ2B,GAAUgB,MAAK,SAACC,GAClF,GAAc,MAAVA,EAAe,CACf,IAAIC,EAAS,6BAAOD,EAAOhM,WAAd,IAAyBkM,kBAAmBF,EAAOE,kBAAmBC,SAAUH,EAAOI,mBAAoB/L,aAAc2L,EAAO3L,eAC7I8K,EAAS,CACLK,KAAMC,EACNzL,UAAWiM,SAIfI,IAAMC,MAAM,yHAEhBU,GAAW7B,EAAUM,GAAmD,MAbzE,2CAAP,sDUpDiBgE,CAAkCrG,EAAQ2B,QAKhDlF,EA9Of,YAIS,IAJYiQ,EAIb,EAJaA,kBAAmBH,EAIhC,EAJgCA,WAAYC,EAI5C,EAJ4CA,oBAAqBqB,EAIjE,EAJiEA,kBACrDnC,EAGZ,EAHYA,yBACAiB,EAEZ,EAFYA,0BAA2BF,EAEvC,EAFuCA,aAAckB,EAErD,EAFqDA,sBACzC9X,EACZ,EADYA,SAAU6N,EACtB,EADsBA,cAEtBmB,EAAUC,cADV,EAEsB0B,cAApBiI,EAFF,EAEEA,QAAS/J,EAFX,EAEWA,OAFX,EAGoB+B,mBAAS,IAH7B,oBAGGW,EAHH,KAGSC,EAHT,OAIwBZ,mBAAS,IAJjC,oBAIG3P,EAJH,KAIWgQ,EAJX,OAK4BL,mBAAS,GALrC,oBAKGQ,EALH,KAKaC,EALb,OAM8BT,mBAAS,IANvC,oBAMGiI,EANH,KAMcC,EANd,KA8EJ,SAAShH,IACLN,EAAQ,IAGZ,SAASuF,EAAmB7J,EAAU2B,GAClC,IAAK,IAAIrB,KAAWN,EAChB,GAAIA,EAASM,GAAS2I,iBAAmBtH,EACrC,OAAO3B,EAASM,GAG5B,OAhFAwE,qBACF,WACUF,IACAb,EAAU,IACVI,EAAY,GACZwF,EAAkB+B,EAAS/J,KAGrC,CAAC+J,EAAS/J,EAAQgI,IAGhB7E,qBACF,WACchS,EACA8W,EAA0B8B,EAAS/J,IAEnCoC,EAAU,IACVI,EAAY,MAI1B,CAACrR,EAAU4Y,EAAS/J,IAGlBmD,qBACF,WAEU,GADAF,IACI4E,EAAWpV,KAAK+U,SAAS,CACzB,IAAI7D,EAAMkE,EAAWpV,KAAK+U,SAAS5D,MAAM,KACrCC,EAAUF,EAAI,GAAK,IAAMA,EAAI,GAAK,IAAMA,EAAI,GAChDhB,EAAQkB,GAGZC,SAASpR,MAAQmV,EAAWpV,KAAKyX,UAAY,MAAQrC,EAAWpV,KAAKb,OAE/E,CAACiW,IAGC1E,qBACF,WAEU,GADA8G,EAAa,IACTpC,EAAWpV,KAAK4L,UAChBwJ,EAAWpV,KAAK4L,SAASiF,OAAS,EAAE,CACpC,IAAI6G,EAAU,GACd,IAAK,IAAIxL,KAAWkJ,EAAWpV,KAAK4L,SAC5BwJ,EAAWpV,KAAK4L,SAASM,GAASuH,aAAe,GACjDiE,EAAQrL,KAAK,CAAE,KAAQ,MAAQ+I,EAAWpV,KAAK4L,SAASM,GAAS2I,eAAiB,uCAAUO,EAAWpV,KAAK4L,SAASM,GAASuH,eAEtI+D,EAAaE,MAG3B,CAACtC,IAGC1E,qBACF,YACU,OAAI4E,QAAJ,IAAIA,OAAJ,EAAIA,EAAc3V,QACdgQ,EAAU2F,EAAa3V,QAEvBgQ,EAAU,KAEd,OAAI2F,QAAJ,IAAIA,OAAJ,EAAIA,EAAc1V,OACdmQ,EAAYuF,EAAa1V,OAEzBmQ,EAAY,KAG1B,CAACuF,IAcS,gCACT,qBAAK9P,UAAU,KAAKC,MAAO,CAAC6L,gBAAgB,OAAD,OAAU,uDAAyD8D,EAAWpV,KAAKgU,cAAnF,QAC9B,cAAC,KAAD,CACIzC,OAAQ8D,EACR7D,SAAO,EACPC,KAAK,sDAHT,SAKA,cAAC,KAAD,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAQC,GAAG,QACX,eAAC,KAAD,CAAQlM,UAAU,kBAAlB,UACI,eAAC,KAAD,WACI,eAAC,KAAD,CAAQA,UAAU,gCAAlB,UACI,cAAC,KAAD,CAAQ6I,KAAK,IAAI7I,UAAU,cAA3B,SACI,qBAAKM,IAAK,iDAAmDsP,EAAWpV,KAAKE,YAAasF,UAAU,YAAYO,IAAI,OAExH,eAAC,KAAD,CAAQsI,KAAK,IAAb,UACI,+BACI,mBAAGzI,KAAMgI,OAAOC,SAASC,OAAS,SAAWwJ,EACzCjK,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWiL,GAAWvJ,EAAEC,kBAD3D,SAGKoH,EAAWpV,KAAKyX,YAEnB,MAAQrC,EAAWpV,KAAKb,QAE9B,oBAAIsG,MAAO,CAACwM,aAAc,OAAQvM,UAAW,SAA7C,SAAwD0P,EAAWpV,KAAK2X,mBAAqB,aAAevC,EAAWpV,KAAKoM,gBAC5H,sBAAK5G,UAAU,WAAf,UACI,oBAAGkJ,OAAe,KAAPuB,EAAX,4EAAoCA,KACpC,8HAAsBmF,EAAWpV,KAAK4L,SAASwJ,EAAWpV,KAAK4L,SAASiF,OAAO,QAEnF,qBAAKnC,QAAShQ,IAAY,OAAC4W,QAAD,IAACA,OAAD,EAACA,EAAc3J,mBAAzC,SACA,eAAC,KAAD,CAAgB4F,OAAQiF,EAAuBhF,SAAO,EAACC,KAAK,sDAA5D,UACI,cAAC,KAAD,CAAQxD,KAAM,GACVC,YAAa,cAAC,KAAD,CAASC,KAAG,EAACC,KAAK,OAAOC,KAAK,KAAK5I,MAAO,CAACsM,SAAU,UAClEzD,WAAY,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAInB,KAAI,SAAAoB,GAAC,OAAI,cAAC,KAAD,CAASH,KAAK,OAAOC,KAAK,KAAK5I,MAAO,CAACsM,SAAU,QAAS9R,MAAOsO,OAC7GC,cAAesB,EACfkC,SAAU,SAACpS,GACFlB,GAGDqR,EAAYnQ,GACZ8W,EAAkB,CAAC9W,MAAOA,GAAS0X,EAASlC,EAAWpV,KAAKoM,gBAH5DG,OAOZ,cAAC,KAAD,CACItB,KAAK,WACLnM,GAAG,oBACHyT,MAAM,oDACNC,MAAO7S,EACPqS,SAAU,SAACS,GAAD,OAAU9C,EAAU8C,EAAMC,OAAOF,QAC3CG,SAAO,IAEX,wBACInN,UAAW,oBACXkJ,QAAShQ,IAAY,OAAC4W,QAAD,IAACA,OAAD,EAACA,EAAc3J,mBACpC0B,QAAS,WACI3O,EAGDgY,EAAkB,CAAE/W,OAAQ0R,SAASwB,eAAe,qBAAqBL,OAAS8E,EAASlC,EAAWpV,KAAKoM,eAF3GG,KALhB,+EAkBZ,cAAC,KAAD,CAAQ/G,UAAU,kBAAlB,SACI,eAAC,KAAD,WACI,oBAAIC,MAAO,CAACyM,WAAY,QAAxB,8DACA,qBAAKC,wBAAyB,CAACC,OAAQgD,EAAWpV,KAAKqU,iBAG/D,sBAAK7O,UAAU,kBAAf,UACI,oBAAIC,MAAO,CAACyM,WAAY,QAAxB,iFACA,0BAASwD,MAAM,EAAOlQ,UAAU,cAAhC,UACI,mGACI,6BACO4P,EAAWpV,KAAK4L,SAASwJ,EAAWpV,KAAK4L,SAASuB,KAAI,SAACjB,GAAD,OAAa,oBAAI1G,UAAU,UAAd,SAAwE,cAAC,GAAD,CAAoB0G,QAASA,EAASrD,OAAQyO,EAAS5Y,SAAUA,EAAU8V,SAAUiB,EAAmBH,EAAa1J,SAAUM,EAAQ2I,gBAAiBN,yBAA0BA,KAA7Na,EAAWpV,KAAKlB,GAAGoN,EAAQ2I,mBAAoO,QAG9W,qBAAKnG,SAAU6I,EAAU1G,OAAS,GAAlC,SACI,eAAC,KAAD,CAAW+G,MAAO,IAAKC,OAAQ,IAAKnQ,KAAM6P,EACtCO,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,GADpD,UAGI,+BACI,iCAAgBpZ,GAAG,UAAUqZ,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAArD,UACI,sBAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,SAG5D,cAAC,KAAD,CAAOC,QAAQ,OAAOC,SAAU,EAAGC,KAAM,CAAEC,KAAM,wBACjD,cAAC,KAAD,CAAOC,UAAU,EAAOC,OAAQ,CAAC,EAAG,IAAKH,KAAM,CAAEC,KAAM,sBAAuBG,UAAW,IACzF,cAAC,KAAD,CAASC,aAAc,CAACC,MAAO,qBAAsB9L,gBAAiB,qBACtE,cAAC,KAAD,CAAMnC,KAAK,WAAWyN,QAAQ,uCAASS,OAAO,UAAUC,YAAa,EAAGP,KAAK,6BAK7F,sBAAKrT,UAAU,oBAAoBkJ,OAAQ4G,EAAaxV,aAAa+Q,OAAS,EAA9E,UACI,2GACA,cAAC,GAAD,CAAiBpD,KAAM6H,EAAaxV,qBAG5C,cAAC,KAAD,CAAQ4R,GAAG,qBClBnC,IA0BepM,gBA1BS,SAAA5C,GAAK,MAAK,CAC9BhE,SAAU6G,GAAsB7C,GAChCmM,aAActJ,GAA8B7C,GAC5C2W,YAAa9T,GAAyB7C,GACtC4W,qBAAsB/T,GAAkC7C,GACxD4S,aAAc/P,GAAiC7C,GAC/C8T,sBAAuBjR,GAA0C7C,OAG1C,SAACkI,GAC3B,MAAO,CACN2O,mBAAoB,SAAC1Q,EAAQzF,EAAc2F,GACjC6B,EXkDL,SAA4B/B,EAAQzF,EAAc2F,GACrD,gDAAO,WAAM6B,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAAyC,GAC9DwB,GAAS9B,EAAUM,IAAgC,GACnDK,GAAwBV,aAAaC,QAAQ,SAAUjC,EAAQzF,EAAc2F,GAAeyC,MAAK,SAACC,GAChF,MAAVA,EACAb,EAAS,CACLK,KAAMC,EACN/K,KAAMsL,KAIVK,IAAMC,MAAM,2FACZW,GAAS9B,EAAUM,IAAgC,IAEvDuB,GAAW7B,EAAUM,GAAyC,MAd/D,2CAAP,sDWnDiBgE,CAA2BrG,EAAQzF,EAAc2F,KAE9DyQ,qBAAsB,SAAC9Z,EAAQmJ,GAC3B+B,EAASsE,GAA8BxP,EAAQmJ,KAEnD0D,cAAe,WACX3B,EAASsE,OAEbuK,2BAA4B,SAAC5Q,EAAQ2B,EAAUE,GAC3CE,EX+HL,SAAoC/B,EAAQ2B,EAAUE,GACzD,gDAAO,WAAME,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAAmD,GACxEK,GAAgCV,aAAaC,QAAQ,SAAUjC,EAAQ2B,EAAUE,GAAWc,MAAK,SAACC,GAC9F,GAAc,MAAVA,EAAe,CACf,IAAIC,EAAS,6BAAOD,EAAOhM,WAAd,IAAyBkM,kBAAmBF,EAAOE,kBAAmB7L,aAAc2L,EAAO3L,eACxG8K,EAAS,CACLK,KAAMC,EACNzL,UAAWiM,SAIfI,IAAMC,MAAM,yHAEhBU,GAAW7B,EAAUM,GAAmD,MAbzE,2CAAP,sDWhIiBgE,CAAmCrG,EAAQ2B,EAAUE,QAK3DpF,EArNf,YAGS,IAHeiU,EAGhB,EAHgBA,mBAAoBF,EAGpC,EAHoCA,YAAaC,EAGjD,EAHiDA,qBAAsBE,EAGvE,EAHuEA,qBAC3DC,EAEZ,EAFYA,2BAA4BnE,EAExC,EAFwCA,aAAckB,EAEtD,EAFsDA,sBAC1C9X,EACZ,EADYA,SAAU6N,EACtB,EADsBA,cAEtBmB,EAAUC,cADV,EAE6C0B,cAA3CiI,EAFF,EAEEA,QAASlL,EAFX,EAEWA,cAAeyI,EAF1B,EAE0BA,eAF1B,EAGoBvF,mBAAS,IAH7B,oBAGGW,EAHH,KAGSC,EAHT,OAIwBZ,mBAAS,IAJjC,oBAIG3P,EAJH,KAIWgQ,EAJX,OAK4BL,mBAAS,GALrC,oBAKGQ,EALH,KAKaC,EALb,OAMwCT,mBAAS,IANjD,oBAMGG,EANH,KAMmBC,EANnB,KAyEJ,SAASc,IACLd,EAAkB,IAClBQ,EAAQ,IAGZ,OAtEAQ,qBACF,WACUF,IACAb,EAAU,IACVI,EAAY,GACZwJ,EAAmBjC,EAASlL,EAAeyI,KAGrD,CAACyC,EAASlL,EAAeyI,EAAgB0E,IAGvC7I,qBACF,WACchS,EACA+a,EAA2BnC,EAASlL,EAAeyI,IAEnDlF,EAAU,IACVI,EAAY,MAI1B,CAACrR,EAAU4Y,EAASlL,EAAeyI,IAGjCnE,qBACF,WAEU,GADAF,IACI6I,EAAYrZ,KAAK+U,SAAS,CAC1B,IAAI7D,EAAMmI,EAAYrZ,KAAK+U,SAAS5D,MAAM,KACtCC,EAAUF,EAAI,GAAK,IAAMA,EAAI,GAAK,IAAMA,EAAI,GAChDhB,EAAQkB,GAGRiI,EAAYrZ,KAAKyT,cACjB/D,EACI,gCACI,qBAAKlK,UAAU,aAAf,SACI,4BAAoC,GAAhC6T,EAAYrZ,KAAKyT,iBAEzB,mBAAGjO,UAAU,iBAAb,4BAKZ6L,SAASpR,MAAQoZ,EAAYrZ,KAAKyX,UAAY,MAAQ4B,EAAYrZ,KAAKb,OAEjF,CAACka,IAGC3I,qBACF,YACU,OAAI4E,QAAJ,IAAIA,OAAJ,EAAIA,EAAc3V,QACdgQ,EAAU2F,EAAa3V,QAEvBgQ,EAAU,KAEd,OAAI2F,QAAJ,IAAIA,OAAJ,EAAIA,EAAc1V,OACdmQ,EAAYuF,EAAa1V,OAEzBmQ,EAAY,KAG1B,CAACuF,IASS,gCACT,qBAAK9P,UAAU,KAAKC,MAAO,CAAC6L,gBAAgB,OAAD,OAAU,uDAAyD+H,EAAYrZ,KAAKgU,cAApF,QAC9B,cAAC,KAAD,CACIzC,OAAQ+H,EACR9H,SAAO,EACPC,KAAK,sDAHT,SAKA,cAAC,KAAD,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAQC,GAAG,QACX,eAAC,KAAD,CAAQlM,UAAU,kBAAlB,UACI,eAAC,KAAD,WACI,eAAC,KAAD,CAAQA,UAAU,gCAAlB,UACI,cAAC,KAAD,CAAQ6I,KAAK,IAAI7I,UAAU,cAA3B,SACI,qBAAKM,IAAK,iDAAmDuT,EAAYrZ,KAAK0Z,WAAYlU,UAAU,YAAYO,IAAI,OAExH,eAAC,KAAD,CAAQsI,KAAK,IAAb,UACI,+BACI,mBAAGzI,KAAMgI,OAAOC,SAASC,OAAS,SAAWwJ,EACzCjK,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWiL,GAAWvJ,EAAEC,kBAD3D,SAGKqL,EAAYrZ,KAAKyX,YAEpB,MAAQ4B,EAAYrZ,KAAKb,QAE/B,qBAAIsG,MAAO,CAACwM,aAAc,OAAQvM,UAAW,SAA7C,UAAwD2T,EAAYrZ,KAAK2X,mBAAqB,aAAe0B,EAAYrZ,KAAKoM,cAAgB,cAAgBiN,EAAYrZ,KAAK6U,eAA/K,OACA,sBAAKrP,UAAU,WAAf,UACI,oBAAGkJ,OAAe,KAAPuB,EAAX,4EAAoCA,KACpC,oBAAGrK,KAAMgI,OAAOC,SAASC,OAAS,SAAWwJ,EAAU,WAAalL,EAChEiB,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWiL,EAAU,WAAalL,GAAgB2B,EAAEC,kBADvF,6CAGYqL,EAAYrZ,KAAKoM,oBAGjC,qBAAKsC,QAAShQ,IAAY,OAAC4W,QAAD,IAACA,OAAD,EAACA,EAAc3J,mBAAzC,SACI,eAAC,KAAD,CAAgB4F,OAAQiF,EAAuBhF,SAAO,EAACC,KAAK,sDAA5D,UACI,cAAC,KAAD,CAAQwD,OAAQ,EAAGhH,KAAM,GACrBC,YAAa,CAAC,cAAC,KAAD,CAASE,KAAK,eAAgB8G,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI/H,KAAI,SAAAoB,GAAC,OAAI,cAAC,KAAD,CAASJ,KAAG,EAACC,KAAK,OAAOC,KAAK,KAAK5I,MAAO,CAACsM,SAAU,cACxIzD,WAAY,CAAC,cAAC,KAAD,CAASF,KAAK,SAAU8G,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI/H,KAAI,SAAAoB,GAAC,OAAI,cAAC,KAAD,CAASH,KAAK,OAAOC,KAAK,KAAK5I,MAAO,CAACsM,SAAU,QAAS9R,MAAOsO,QAC7IC,cAAesB,EACfkC,SAAU,SAACpS,GACFlB,GAGDqR,EAAYnQ,GACZ4Z,EAAsB,CAAC5N,SAAU,CAAE,CAACQ,cAAeA,EACfyI,eAAgBA,EAChBjV,MAAOA,KAAa0X,IALxD/K,OASZ,cAAC,KAAD,CACItB,KAAK,WACLnM,GAAG,oBACHyT,MAAM,oDACNC,MAAO7S,EACPqS,SAAU,SAACS,GAAD,OAAU9C,EAAU8C,EAAMC,OAAOF,QAC3CG,SAAO,IAEX,wBACInN,UAAW,oBACXkJ,QAAShQ,IAAY,OAAC4W,QAAD,IAACA,OAAD,EAACA,EAAc3J,mBACpC0B,QAAS,WACI3O,EAGD8a,EAAqB,CAAC5N,SAAU,CAAE,CACEQ,cAAeA,EACfyI,eAAgBA,EAChBlV,OAAQ0R,SAASwB,eAAe,qBAAqBL,SAErE8E,GAPpB/K,KALhB,4EAsBZ,cAAC,KAAD,CAAQ8B,KAAK,IAAb,SACMoB,OAGV,cAAC,KAAD,CAAQjK,UAAU,kBAAlB,SACI,eAAC,KAAD,WACI,oBAAIC,MAAO,CAACyM,WAAY,QAAxB,8DACA,qBAAKC,wBAAyB,CAACC,OAAQiH,EAAYrZ,KAAKqU,oBAIpE,sBAAK7O,UAAU,oBAAoBkJ,OAAQ4G,EAAaxV,aAAa+Q,OAAS,EAA9E,UACI,2GACA,cAAC,GAAD,CAAiBpD,KAAM6H,EAAaxV,qBAG5C,cAAC,KAAD,CAAQ4R,GAAG,qB,OC5JpBiI,OA5Cf,YAA6B,IAAT3a,EAAQ,EAARA,KACZ0O,EAAUC,cADU,EAEA2B,mBAAS,IAFT,oBAEjBW,EAFiB,KAEXC,EAFW,OAGAZ,mBAAS,IAHT,oBAGjBnQ,EAHiB,KAGXya,EAHW,KA6BxB,OAxBAlJ,qBAAU,WACF,GAAI1R,EAAKiS,SAAS,CACd,IAAIC,EAAMlS,EAAKiS,SAASE,MAAM,KAC1BC,EAAUF,EAAI,GAAK,IAAMA,EAAI,GAAK,IAAMA,EAAI,GAChDhB,EAAQkB,QAERlB,EAAQ,IAEZ,GAAIlR,EAAKG,KAAK0R,OAAS,GAAG,CACtB,IAAIgJ,EAAU7a,EAAKG,KAAK2a,OAAO,EAAG,IAAM,MACxCF,EAAQC,QAERD,EAAQ5a,EAAKG,QAErB,CAACH,IAWD,sBAAKwG,UAAU,iBAAf,UACI,qBAAKA,UAAU,sBAAsBC,MAAO,CAAC6L,gBAAgB,OAAD,OAAStS,EAAKI,iBAAd,MAA5D,eACA,sBAAKoG,UAAU,qBAAf,UACI,mBAAGI,KAAMgI,OAAOC,SAASC,OAAS,SAAW9O,EAAKoL,KAC9CiD,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWrN,EAAKoL,MAAO2D,EAAEC,kBAD5D,SAEQ,6BAAM7O,MAEd,4BAAI8Q,WCDL8J,OArCf,YAAgC,IAAVha,EAAS,EAATA,MACd2N,EAAUC,cADa,EAGH2B,mBAAS,IAHN,oBAGpBW,EAHoB,KAGdC,EAHc,OAIHZ,mBAAS,IAJN,oBAIpBnQ,EAJoB,KAIdya,EAJc,KAuB3B,OAjBAlJ,qBAAU,WACF,GAAI3Q,EAAMmU,aAAa,CACnB,IAAIhD,EAAMnR,EAAMmU,aAAa/C,MAAM,KAC/BC,EAAUF,EAAI,GAAK,IAAMA,EAAI,GAAK,IAAMA,EAAI,GAChDhB,EAAQkB,QAERlB,EAAQ,IAEZ,GAAInQ,EAAME,MAAM4Q,OAAS,GAAG,CACxB,IAAIgJ,EAAU9Z,EAAME,MAAM6Z,OAAO,EAAG,IAAM,MAC1CF,EAAQC,QAERD,EAAQ7Z,EAAME,SAEtB,CAACF,IAID,sBAAKyF,UAAU,kBAAf,UACI,qBAAKA,UAAU,uBAAuBC,MAAO,CAAC6L,gBAAgB,OAAD,OAAS,iDAAmDvR,EAAMG,YAAlE,MAA7D,eACA,sBAAKsF,UAAU,sBAAf,UACI,mBAAGI,KAAMgI,OAAOC,SAASC,OAAS,UAAY/N,EAAMjB,GAChDuO,QAAS,SAACU,GAAQL,EAAQrB,KAAK,UAAYtM,EAAMjB,IAAKiP,EAAEC,kBAD5D,SAEQ,6BAAM7O,MAEd,4BAAI8Q,WCML+J,OArCf,YAA8B,IAAT7Z,EAAQ,EAARA,KACbuN,EAAUC,cADW,EAGD2B,mBAAS,IAHR,oBAGlBW,EAHkB,KAGZC,EAHY,OAIDZ,mBAAS,IAJR,oBAIlBnQ,EAJkB,KAIZya,EAJY,KAuBzB,OAjBAlJ,qBAAU,WACF,GAAIvQ,EAAK8W,eAAe,CACpB,IAAI/F,EAAM/Q,EAAK8W,eAAe9F,MAAM,KAChCC,EAAUF,EAAI,GAAK,IAAMA,EAAI,GAAK,IAAMA,EAAI,GAChDhB,EAAQkB,QAERlB,EAAQ,IAEZ,GAAI/P,EAAKhB,KAAK0R,OAAS,GAAG,CACtB,IAAIgJ,EAAU1Z,EAAKhB,KAAK2a,OAAO,EAAG,IAAM,MACxCF,EAAQC,QAERD,EAAQzZ,EAAKhB,QAErB,CAACgB,IAID,sBAAKqF,UAAU,kBAAf,UACI,qBAAKA,UAAU,uBAAuBC,MAAO,CAAC6L,gBAAgB,OAAD,OAAS,iDAAmDnR,EAAKD,YAAjE,MAA7D,eACA,sBAAKsF,UAAU,sBAAf,UACI,mBAAGI,KAAMgI,OAAOC,SAASC,OAAS,SAAW3N,EAAKrB,GAC9CuO,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWlM,EAAKrB,IAAKiP,EAAEC,kBAD1D,SAEQ,6BAAM7O,MAEd,4BAAI8Q,WCRLgK,OAvBf,YAA8B,IAATtb,EAAQ,EAARA,KACb+O,EAAUC,cAQd,OANA+C,qBAAU,cAGN,CAAC/R,IAID,mBAAGiH,KAAMgI,OAAOC,SAASC,OAAS,SAAWnP,EAAKG,GACtCuO,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAW1N,EAAKG,IAAKiP,EAAEC,kBADlE,SAEI,sBAAKxI,UAAU,WAAf,UACI,qBAAKA,UAAU,gBAAgBC,MAAO,CAAC6L,gBAAgB,OAAD,OAAS,uEAAT,MAAtD,eACA,qBAAK9L,UAAU,eAAf,SACI,6BAAM7G,EAAKC,mBCEhBsb,OAnBf,YAAuE,IAA9CC,EAA6C,EAA7CA,WAAYnN,EAAiC,EAAjCA,YAAaoN,EAAoB,EAApBA,iBAAoB,EACtB9K,mBAAS6K,EAAW,IADE,oBAC3DE,EAD2D,KAC3CC,EAD2C,KAGlE,OACI,gCACKH,EAAWhN,KAAI,SAACoN,GAAD,OAAc,wBAAQ/U,UAAW,gBAEjBC,MAAO,CAACyT,MAAQmB,IAAmBE,EAASvN,EAAY,sBACxDK,QAAS,WACLiN,EAAkBC,GAClBH,EAAiBG,IALvB,SAOGA,GANIA,MAQtC,oBAAI9U,MAAO,CAAG2H,gBAAiBJ,EAAa6K,OAAQ,IAAKnS,UAAW,MAAOuM,aAAc,cCmMpG,IA6Be3M,gBA7BS,SAAA5C,GAAK,MAAK,CAC9BhE,SAAU6G,GAAsB7C,GAChC8X,eAAgBjV,GAAkC7C,GAClD+X,gBAAiBlV,GAAmC7C,GACpDgY,eAAgBnV,GAAkC7C,GAClDiY,eAAgBpV,GAAkC7C,GAClDnC,MAAOgF,GAAgC7C,GACvClC,OAAQ+E,GAAiC7C,GACzCjC,MAAO8E,GAAgC7C,GACvChC,MAAO6E,GAAgC7C,OAGhB,SAACkI,GAC3B,MAAO,CACAgQ,WAAY,SAACrR,EAAOC,EAAMC,GACtBmB,EjBqOL,SAAqBrB,EAAOC,EAAMC,GACrC,gDAAO,WAAMmB,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAAyC,GAC9DK,GAAqBhC,EAAOC,EAAMC,GAAY+B,MAAK,SAACC,GAC3CA,EAIDb,EAAS,CACLK,KAAMC,EACN3K,MAAOkL,IALXK,IAAMC,MAAM,6EAQhBU,GAAW7B,EAAUM,GAAyC,MAZ/D,2CAAP,sDiBtOiBgE,CAAoB3F,EAAOC,EAAMC,KAE9CoR,YAAa,SAACtR,EAAOC,GACjBoB,EjBoPL,SAAsBrB,EAAOC,GAChC,gDAAO,WAAMoB,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAA0C,GAC/DK,GAAsBhC,EAAOC,GAAMgC,MAAK,SAACC,GAChCA,EAIDb,EAAS,CACLK,KAAMC,EACN1K,OAAQiL,EAAOqP,UALnBhP,IAAMC,MAAM,wHAQhBU,GAAW7B,EAAUM,GAA0C,MAZhE,2CAAP,sDiBrPiBgE,CAAqB3F,EAAOC,KAEzCuR,WAAY,SAACxR,EAAOC,GAChBoB,EjBmQL,SAAqBrB,EAAOC,GAC/B,gDAAO,WAAMoB,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAAyC,GAC9DK,GAAqBhC,EAAOC,GAAMgC,MAAK,SAACC,GAC/BA,EAIDb,EAAS,CACLK,KAAMC,EACNzK,MAAOgL,EAAOqP,UALlBhP,IAAMC,MAAM,8HAQhBU,GAAW7B,EAAUM,GAAyC,MAZ/D,2CAAP,sDiBpQiBgE,CAAoB3F,EAAOC,KAExChH,YAAa,SAAC+G,GACVqB,EjB8VL,SAAqBrB,GACxB,gDAAO,WAAMqB,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAAyC,GAC9DK,GAAqBhC,GAAOiC,MAAK,SAACC,GACzBA,EAIDb,EAAS,CACLK,KAAMC,EACNxK,MAAO+K,IALXK,IAAMC,MAAM,6EAQhBU,GAAW7B,EAAUM,GAAyC,MAZ/D,2CAAP,sDiB/ViBgE,CAAoB3F,QAK1BjE,EAjNf,YAAqL,EAA7J5G,SAA8J,IAApJ8b,EAAmJ,EAAnJA,eAAgBC,EAAmI,EAAnIA,gBAAiBC,EAAkH,EAAlHA,eAAgBC,EAAkG,EAAlGA,eAAgBC,EAAkF,EAAlFA,WAAYra,EAAsE,EAAtEA,MAAOsa,EAA+D,EAA/DA,YAAara,EAAkD,EAAlDA,OAAQua,EAA0C,EAA1CA,WAAYta,EAA8B,EAA9BA,MAAO+B,EAAuB,EAAvBA,YAAa9B,EAAU,EAAVA,MACnKgN,EAAUC,cACRpE,EAAU8F,cAAV9F,MAF2K,EAG/I+F,mBAAS,IAHsI,oBAG1K0L,EAH0K,KAG/JC,EAH+J,OAI7I3L,mBAAS,IAJoI,oBAI1K4L,EAJ0K,KAI9JC,EAJ8J,OAK3I7L,mBAAS,IALkI,oBAK1K8L,EAL0K,KAK7JC,EAL6J,OAM7I/L,mBAAS,IANoI,oBAM1KgM,EAN0K,KAM9JC,EAN8J,OAO7IjM,mBAAS,IAPoI,oBAO1KkM,EAP0K,KAO9JC,EAP8J,OAQ/InM,mBAAS,GARsI,oBAQ1KoM,EAR0K,KAQ/JC,EAR+J,OAS7IrM,mBAAS,GAToI,oBAS1KsM,EAT0K,KAS9JC,EAT8J,OAU/IvM,mBAAS,GAVsI,oBAU1KwM,EAV0K,KAU/JC,EAV+J,OAYrIzM,mBAAS,sBAZ4H,oBAY1K+K,EAZ0K,KAY1JC,EAZ0J,KAyDjL,OA3CA5J,qBACF,WACUkK,EAAWrR,EAAO,EAAG,GACrBsR,EAAYtR,EAAO,GACnBwR,EAAWxR,EAAO,GAClB/G,EAAY+G,GACZ0R,EAAa1R,GACb8H,SAASpR,MAAQ,iCACjB0b,EAAa,GACbE,EAAc,GACdE,EAAa,KAEvB,CAACxS,EAAOqR,EAAYC,EAAarY,EAAauY,IAG5CrK,qBACF,WACUyK,EAAc,qBAAK3V,UAAU,mBAAf,SAAmCjF,EAAM4M,KAAI,SAAAnO,GAAI,OAAI,cAAC,GAAD,CAAUA,KAAMA,GAAWA,EAAKF,YAE7G,CAACyB,IAGCmQ,qBACF,WACU2K,EAAe,qBAAK7V,UAAU,mBAAf,SAAmChF,EAAO2M,KAAI,SAAApN,GAAK,OAAI,cAAC,GAAD,CAAWA,MAAOA,GAAYA,EAAMjB,YAEpH,CAAC0B,IAGCkQ,qBACF,WACU6K,EAAc,qBAAK/V,UAAU,mBAAf,SAAmC/E,EAAM0M,KAAI,SAAAhN,GAAI,OAAI,cAAC,GAAD,CAAUA,KAAMA,GAAWA,EAAKrB,YAE7G,CAAC2B,IAGCiQ,qBACF,WACU+K,EAAc,qBAAKjW,UAAU,mBAAf,SAAmC9E,EAAMyM,KAAI,SAAAxO,GAAI,OAAI,cAAC,GAAD,CAAUA,KAAMA,GAAWA,EAAKC,kBAE7G,CAAC8B,IAIS,gCACT,qBAAK8E,UAAU,gBACF,cAAC,KAAD,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAQkM,GAAG,QACX,eAAC,KAAD,CAAQlM,UAAU,aAAlB,UACI,gEACA,eAAC,KAAD,CAAeA,UAAU,UACrBwW,SAAW,SAACvJ,GAA6G,OAAlGA,EAAMzE,iBAAkBN,EAAQrB,KAAK,WAAagF,SAASwB,eAAe,gBAAgBL,QAAe,GADpI,UAEI,cAAC,KAAD,CAASpE,KAAK,WACd,uBACI5I,UAAU,yCACVyF,KAAK,OACLgR,YAAY,iCACZC,aAAW,SACXpd,GAAG,eACH0T,MAAOwI,EACPhJ,SAAU,SAACS,GAAD,OAAUwI,EAAaxI,EAAMC,OAAOF,aAGtD,mIACI,cAAC,GAAD,CACI2H,WAAY,CAAC,qBAAO,2BAAQ,uCAAU,6CAAW,4EACjDnN,YAAY,UACZoN,iBAAkB,SAACG,GACfD,EAAkBC,MAG1B,cAAC,KAAD,CACIhJ,OAAQiJ,EACRhJ,SAAO,EACPC,KAAK,uDAHT,SAKI,sBAAK/C,OAAyB,uBAAjB2L,GAA2C,6BAAjBA,EAAvC,UACI,0DACA,sBAAK7U,UAAU,eAAf,UACI,wBAAQA,UAAU,mBACdoN,SAAsB,IAAZ8I,EACVrO,QAAS,WAAOuN,EAAWrR,EAAOmS,EAAU,EAAG,GAAIC,EAAaD,EAAU,IAF9E,eAMCR,EACD,wBAAQ1V,UAAU,mBACdoN,SAAUrS,EAAMsQ,OAAS,EACzBxD,QAAS,WAAOuN,EAAWrR,EAAOmS,EAAU,EAAG,GAAIC,EAAaD,EAAU,IAF9E,uBAUZ,cAAC,KAAD,CACInK,OAAQkJ,EACRjJ,SAAO,EACPC,KAAK,mEAHT,SAKI,sBAAK/C,OAAyB,uBAAjB2L,GAA2C,yCAAjBA,EAAvC,UACI,sEACA,sBAAK7U,UAAU,eAAf,UACI,wBAAQA,UAAU,mBACdoN,SAAuB,IAAbgJ,EACVvO,QAAS,WAAOwN,EAAYtR,EAAOqS,EAAW,GAAIC,EAAcD,EAAW,IAF/E,eAMCR,EACD,wBAAQ5V,UAAU,mBACdoN,SAAUpS,EAAOqQ,OAAS,GAC1BxD,QAAS,WAAOwN,EAAYtR,EAAOqS,EAAW,GAAIC,EAAcD,EAAW,IAF/E,uBAUZ,cAAC,KAAD,CACIrK,OAAQmJ,EACRlJ,SAAO,EACPC,KAAK,yEAHT,SAKI,sBAAK/C,OAAyB,uBAAjB2L,GAA2C,+CAAjBA,EAAvC,UACI,4EACA,sBAAK7U,UAAU,eAAf,UACI,wBAAQA,UAAU,mBACdoN,SAAsB,IAAZkJ,EACVzO,QAAS,WAAO0N,EAAWxR,EAAOuS,EAAU,GAAIC,EAAaD,EAAU,IAF3E,eAMCR,EACD,wBAAQ9V,UAAU,mBACdoN,SAAUnS,EAAMoQ,OAAS,GACzBxD,QAAS,WAAO0N,EAAWxR,EAAOuS,EAAU,GAAIC,EAAaD,EAAU,IAF3E,uBAUZ,cAAC,KAAD,CACIvK,OAAQoJ,EACRnJ,SAAO,EACPC,KAAK,6GAHT,SAKI,sBAAK/C,OAAyB,uBAAjB2L,GAA2C,6EAAjBA,EAAvC,UACI,0GACCmB,UAKjB,cAAC,KAAD,CAAQ9J,GAAG,mB,OC3InC,IAmBepM,gBAnBS,SAAA5C,GAAK,MAAK,CACjC8J,OAAQjH,GAAuB7C,GAC/ByZ,UAAW5W,GAAuB7C,OAGR,SAACkI,GAC3B,MAAO,CACNwR,UAAW,WACVxR,ElB2lBQ,CAAEK,KAAMC,EAA2BsB,QAAQ,KkBzlBpD6P,MAAO,SAACC,EAAOpV,GACd0D,ElBrEI,SAAiB0R,EAAOpV,GAC3B,gDAAO,WAAM0D,GAAN,gBAAAzD,EAAA,6DAEHuF,GAAS9B,EAAUM,GAAwB,GAFxC,kBAKezM,GAAc6d,EAAOpV,GALpC,OAMS,QADNK,EALH,SAOCsD,aAAaM,QAAQ,eAAgB5D,EAAIO,cACzC+C,aAAaM,QAAQ,QAAS5D,EAAIM,OAClCgD,aAAaM,QAAQ,YAAaJ,KAAKC,OACvCJ,EAAS,CACLK,KAAMC,EACNzM,KAAM,CAAEC,UAAU,KAEtBkM,EAAS,CACLK,KAAMC,EACNvM,KAAM4I,EAAI5I,OAEdiM,EAAS,CACLK,KAAMC,EACNsB,QAAQ,KAGZE,GAAS9B,EAAUM,GAAwB,GAvB5C,gDA2BHlD,QAAQ+D,MAAR,MACAW,GAAS9B,EAAUM,GAAwB,GA5BxC,yDAAP,sDkBoEQgE,CAAgBoN,EAAOpV,KAEjCqV,sBAAuB,WACtB3R,ElBimBQ,CAAEK,KAAMC,EAAqCsB,QAAQ,QkB5lBjDlH,EAjEf,YAAoF,IAA/DkH,EAA8D,EAA9DA,OAAQ4P,EAAsD,EAAtDA,UAAWC,EAA2C,EAA3CA,MAAOF,EAAoC,EAApCA,UAAWI,EAAyB,EAAzBA,sBAAyB,EAClDjN,mBAAS,IADyC,oBAC3EpI,EAD2E,KACjEsV,EADiE,OAExDlN,mBAAS,IAF+C,oBAE3EgN,EAF2E,KAEpEG,EAFoE,KAIlF,OACO,cAAC,KAAD,CAAUjQ,OAAQA,EAAQkQ,OAAQN,EAAW/N,KAAK,KAAKsO,UAAQ,EAA/D,SACH,cAAC,KAAD,CAAcnX,UAAU,YAAxB,SACE,cAAC,KAAD,UACE,cAAC,KAAD,UACE,cAAC,KAAD,UACE,uBAAMwW,SAAU,SAACvJ,GAAWA,EAAMzE,iBAAkBqO,EAAMC,EAAOpV,IAAjE,UACE,mBAAG1B,UAAU,sBAAb,4CACT,mBAAGA,UAAU,mBAAmBkJ,QAASyN,EAAzC,sJAES,uBAAOS,QAAQ,aAAapX,UAAU,YAAtC,4CAGA,uBAAOyF,KAAK,OAAOnM,GAAG,aAAa0G,UAAU,eACrDgN,MAAO8J,EACTtK,SAAU,SAACS,GAAD,OAAUgK,EAAShK,EAAMC,OAAOF,UAEhC,uBAAOoK,QAAQ,gBAAgBpX,UAAU,YAAzC,kDAGA,uBAAOyF,KAAK,WAAWnM,GAAG,gBAAgB0G,UAAU,eAC5DgN,MAAOtL,EACT8K,SAAU,SAACS,GAAD,OAAU+J,EAAY/J,EAAMC,OAAOF,UAGnC,sBAAKhN,UAAU,mBAAf,UACV,cAAC,KAAD,CAAQyF,KAAK,SAASzF,UAAU,gBAAhC,4CAGA,uBAAOA,UAAU,qBAAqB6H,QAAS,WAAO+O,IAAaG,KAAnE,8IC8BL,IAiBejX,gBAjBS,SAAA5C,GAAK,MAAK,CACjC8J,OAAQjH,GAA4B7C,GACjCma,gBAAiBtX,GAA6B7C,GAC9C/D,KAAM4G,GAAkB7C,OAGD,SAACkI,GAC3B,MAAO,CACNwR,UAAW,WACVxR,EnBilBQ,CAAEK,KAAMC,EAAgCsB,QAAQ,KmB/kBzDnL,WAAY,SAACib,EAAOzd,EAAOqI,GAC1B0D,EnBCI,SAA6BhM,EAAUC,EAAOqI,GACjD,gDAAO,WAAM0D,GAAN,UAAAzD,EAAA,sDACHuF,GAAS9B,EAAUM,GAA8B,GACjDzM,GAAkBG,EAAUC,EAAOqI,GAAUsE,MAAK,SAACC,GAC/C,GAAsB,MAAlBA,EAAO/L,OAAmC,MAAlB+L,EAAO/L,OAC/BkL,EAAS,CACLK,KAAMC,EACNvM,KAAM,CAAE2d,MAAO7Q,EAAO7M,SAAUC,MAAO4M,EAAO5M,aAGlD,CACA,IAAK,IAAIkN,KAASN,EAAO/D,KACrBoE,IAAMC,MAAMN,EAAO/D,KAAKqE,GAAO,IAEnCW,GAAS9B,EAAUM,GAA8B,OAbtD,2CAAP,sDmBFQgE,CAA4BoN,EAAOzd,EAAOqI,QAKvC5B,EA/Ef,YAAqF,IAAzDkH,EAAwD,EAAxDA,OAAQ4P,EAAgD,EAAhDA,UAAW/a,EAAqC,EAArCA,WAAYwb,EAAyB,EAAzBA,gBAAiBle,EAAQ,EAARA,KAAQ,EACrC2Q,mBAAS,IAD4B,oBAC5EwN,EAD4E,KAC3DC,EAD2D,OAEnDzN,mBAAS,IAF0C,oBAE5EpI,EAF4E,KAElEsV,EAFkE,OAGzDlN,mBAAS,IAHgD,oBAG5EzQ,EAH4E,KAGrEme,EAHqE,OAIzD1N,mBAAS,IAJgD,oBAI5EgN,EAJ4E,KAIrEG,EAJqE,KAMnF,OACO,cAAC,KAAD,CAAUjQ,OAAQA,EAAQkQ,OAAQN,EAAW/N,KAAK,KAAKsO,UAAQ,EAA/D,SACH,cAAC,KAAD,CAAcnX,UAAU,mBAAxB,SACE,cAAC,KAAD,UACE,cAAC,KAAD,UACE,cAAC,KAAD,UACE,iCACJ,mBAAGA,UAAU,mBAAmBkJ,QAASmO,EAAzC,sHACS,oBAAGrX,UAAU,oBAAoBkJ,OAAqB,KAAb/P,EAAKE,MAA9C,UAA4DF,EAAK2d,MAAjE,qTACH,oGAEA,uBAAOM,QAAQ,aAAf,wDAGA,uBAAO3R,KAAK,OAAOnM,GAAG,aAAa0G,UAAU,eACtDgN,MAAO8J,EACPtK,SAAU,SAACS,GAAD,OAAUgK,EAAShK,EAAMC,OAAOF,UAE9B,uBAAOoK,QAAQ,aAAf,+GAGZ,uBAAO3R,KAAK,QAASnM,GAAG,aAAc0G,UAAU,eAC/CgN,MAAO3T,EACPmT,SAAU,SAACS,GAAD,OAAUuK,EAASvK,EAAMC,OAAOF,UAElC,uBAAOoK,QAAQ,gBAAf,kDAGT,uBAAO3R,KAAK,WAAUnM,GAAG,gBAAgB0G,UAAU,eACjDgN,MAAOtL,EACT8K,SAAU,SAACS,GAAD,OAAU+J,EAAY/J,EAAMC,OAAOF,UAE7C,uBAAOoK,QAAQ,uBAAf,iIAGA,uBAAO3R,KAAK,WAAWnM,GAAG,uBAAuB0G,UAAU,eACzDC,MAAOqX,IAAkB5V,EAAS,CAAC+V,aAAc,SAAS,CAACA,aAAc,OAC3EzK,MAAOsK,EACP9K,SAAU,SAACS,GAAD,OAAUsK,EAAmBtK,EAAMC,OAAOF,UAE3C,qBAAKhN,UAAU,mBAAf,SACV,cAAC,KAAD,CAAQyF,KAAK,SAASzF,UAAU,gBAC/BoN,SAAU1L,IAAW4V,GAAmBR,EAAMzL,OAAS,GAAMhS,EAAMgS,OAAS,GAAK3J,EAAS2J,OAAS,EACnGxD,QAAS,kBAAMhM,EAAWib,EAAOzd,EAAOqI,IAFzC,4ICbL,IAgBe5B,gBAhBS,SAAA5C,GAAK,MAAK,CACjC8J,OAAQjH,GAA+B7C,GACvCwa,mBAAoB3X,GAAgC7C,OAG1B,SAACkI,GAC3B,MAAO,CACNwR,UAAW,WACVxR,EpBsnBQ,CAAEK,KAAMC,EAAqCsB,QAAQ,KoBpnB9D/K,cAAe,SAAC5C,GACf+L,EpB4iBI,SAAuB/L,GAC1B,gDAAO,WAAM+L,GAAN,UAAAzD,EAAA,sDACHyD,EAAS,CACLK,KAAMC,GACNa,OAAO,IAEXtN,GAAmBI,GAAO2M,MAAK,SAACC,GACN,MAAlBA,EAAO/L,OACPkL,EAAS,CACLK,KAAMC,GACNa,MAAON,EAAO/D,KAAKqE,QAIvBnB,EAAS,CACLK,KAAMC,GACNa,MAAO,UAfhB,2CAAP,sDoB7iBQmD,CAAsBrQ,QAKnByG,EAnDf,YAAsF,IAAzDkH,EAAwD,EAAxDA,OAAQ4P,EAAgD,EAAhDA,UAAW3a,EAAqC,EAArCA,cAAeyb,EAAsB,EAAtBA,mBAAsB,EAC1D5N,mBAAS,IADiD,oBAC7EzQ,EAD6E,KACtEme,EADsE,KAGpF,OACO,cAAC,KAAD,CAAUxQ,OAAQA,EAAQkQ,OAAQN,EAAW/N,KAAK,KAAKsO,UAAQ,EAA/D,SACH,cAAC,KAAD,CAAcnX,UAAU,YAAxB,SACE,cAAC,KAAD,UACE,cAAC,KAAD,UACE,cAAC,KAAD,UACE,uBAAMwW,SAAU,SAACvJ,GAAWA,EAAMzE,iBAAkBvM,EAAc5C,IAAlE,UACE,mBAAG2G,UAAU,sBAAb,mGACT,mBAAGA,UAAU,mBAAmBkJ,QAASwO,EAA4C,OAAvBA,EAA9D,SAA6FA,IACjF,mBAAG1X,UAAU,oBAAoBkJ,OAA+B,OAAvBwO,EAAzC,oLAEH,uBAAON,QAAQ,aAAapX,UAAU,YAAtC,4CAGA,uBAAOyF,KAAK,OAAOnM,GAAG,aAAa0G,UAAU,eACrDgN,MAAO3T,EACTmT,SAAU,SAACS,GAAD,OAAUuK,EAASvK,EAAMC,OAAOF,UAEhC,qBAAKhN,UAAU,mBAAf,SACV,cAAC,KAAD,CAAQyF,KAAK,SAASzF,UAAU,gBAAhC,gFCXL,IAYeF,gBAZS,SAAA5C,GAAK,MAAK,CAC9BhE,SAAU6G,GAAsB7C,OAGT,SAACkI,GAC3B,MAAO,CACAuS,oBAAqB,SAAC9U,EAAOR,GACzB+C,ErB8EL,SAA6BvC,EAAOR,GACvC,+BAAO,uBAAAV,EAAA,sDACH1I,GAAkB4J,EAAOR,GAAO2D,MAAK,SAACC,GACZ,MAAlBA,EAAO/L,OACPoM,IAAMsR,QAAQ,4GAGV3R,EAAO/D,MACPoE,IAAMC,MAAMN,EAAO/D,KAAKqE,UAPjC,2CqB/EUmD,CAA4B7G,EAAOR,QAKzCvC,EAjCf,YACC,IADuB6X,EACxB,EADwBA,oBAEnBE,EAASzP,OAAOC,SAASwP,OACzB3T,EAAS,IAAI4T,gBAAgBD,GAC7BhV,EAAQqB,EAAO/G,IAAI,SACnBkF,EAAQ6B,EAAO/G,IAAI,SAUpB,OARH+N,qBACC,WACCyM,EAAoB9U,EAAOR,KAG5B,IAIC,qBAAKrC,UAAU,U,OC2BlB,IAYeF,gBAZS,SAAA5C,GAAK,MAAK,CAC9B6a,qBAAsBhY,GAAkC7C,OAGjC,SAACkI,GAC3B,MAAO,CACAlJ,gBAAiB,SAACmG,EAAOX,GACrB0D,EtBykBL,SAAyB/C,EAAOX,GACnC,gDAAO,WAAM0D,GAAN,UAAAzD,EAAA,sDACHyD,EAAS,CACLK,KAAMC,GACNa,OAAO,IAEXtN,GAAqBoJ,EAAOX,GAAUsE,MAAK,SAACC,GAClB,MAAlBA,EAAO/L,OACPkL,EAAS,CACLK,KAAMC,GACNa,MAAON,EAAO/D,KAAKqE,MAAMN,EAAO/D,KAAKqE,MAAM,4GAI/CnB,EAAS,CACLK,KAAMC,GACNa,MAAO,UAfhB,2CAAP,sDsB1kBiBmD,CAAwBrH,EAAOX,QAKrC5B,EAtDf,YACC,IAD+B5D,EAChC,EADgCA,gBAAiB6b,EACjD,EADiDA,qBACjD,EACoCjO,mBAAS,IAD7C,oBACWpI,EADX,KACqBsV,EADrB,OAEkDlN,mBAAS,IAF3D,oBAEWwN,EAFX,KAE4BC,EAF5B,KAIKM,EAASzP,OAAOC,SAASwP,OAEzBxV,EADS,IAAIyV,gBAAgBD,GACd1a,IAAI,SAEpB,OACD,qBAAK6C,UAAU,KAAf,SACa,uBAAMwW,SAAU,SAACvJ,GAAWA,EAAMzE,iBAAkBtM,EAAgBmG,EAAOX,IAAY1B,UAAU,sBAAjG,UACI,mBAAGA,UAAU,KAAb,mGACA,mBAAGA,UAAU,mBAAmBkJ,QAAS6O,EAA8C,OAAvBA,EAAhE,SAA+FA,IAC/F,mBAAG/X,UAAU,oBAAoBkJ,OAAiC,OAAzB6O,EAAzC,oGAEA,uBAAOX,QAAQ,gBAAgBpX,UAAU,uBAAzC,iFAEQ,uBACR,uBAAOyF,KAAK,WAAWnM,GAAG,gBAAgB0G,UAAU,uBAChDgN,MAAOtL,EACP8K,SAAU,SAACS,GAAD,OAAU+J,EAAY/J,EAAMC,OAAOF,UACjD,uBAEA,uBAAOoK,QAAQ,uBAAuBpX,UAAU,uBAAhD,iIAEQ,uBACR,uBAAOyF,KAAK,WAAWnM,GAAG,uBAAuB0G,UAAU,uBACvDgN,MAAOsK,EACP9K,SAAU,SAACS,GAAD,OAAUsK,EAAmBtK,EAAMC,OAAOF,UACxD,uBAEA,wBAAQvH,KAAK,SACTzF,UAAU,wBACVoN,SAAU1L,IAAW4V,EAAkB5V,EAAS2J,OAAS,EAF7D,sEC3CP2M,GAAS,CAClB,iBACA,mBACA,iBACA,gBACA,eACA,mBACA,eACA,mBACA,mBACA,mBACA,iBACA,iBACA,iBACA,gBACA,iBACA,mBACA,gBACA,gBACA,kBACA,iBACA,mBACA,kBACA,eACA,mBACA,iBACA,gB,OCqGWC,OArHf,YAAuC,IAAjBld,EAAgB,EAAhBA,MAAOK,EAAS,EAATA,MAAS,EACQ0O,mBAAS,IADjB,oBAC3BoO,EAD2B,KACZC,EADY,KAE5BC,EAAc,CAChB,CACErL,MAAO,mDACPsL,MAAO,OACPC,KAAM,YAER,CACEvL,MAAO,uCACPsL,MAAO,SACPC,KAAM,OAER,CACEvL,MAAO,uCACPsL,MAAO,QACPC,KAAM,OAER,CACEvL,MAAO,iCACPsL,MAAO,SACPC,KAAM,OAER,CACEvL,MAAO,oGACPsL,MAAO,aACPC,KAAM,QA1BsB,EA8BQxO,mBAAS,CAC/CyO,QAASH,EACTI,KAAM,KAhCwB,oBA8B3BC,EA9B2B,KA8BZC,EA9BY,KA+ElC,OA3CAxN,qBAAU,WACEnQ,GAEA2d,EAAiB,CACbH,QAASH,EACTI,KAAMzd,EAAM4M,KAAI,SAACnO,GACb,MAAO,CACCG,KAAM,mBAAGqG,UAAU,YAAYI,KAAMgI,OAAOC,SAASC,OAAS,SAAW9O,EAAKA,KAAKmf,UAA7E,SAAyFnf,EAAKA,KAAKof,YACzGC,MAAOrf,EAAKA,KAAKof,UACjB1e,OAAQV,EAAKU,OACbE,MAAOZ,EAAKY,MACZD,OAAQX,EAAKW,OACbE,WAAYye,WAAWtf,EAAKa,oBAWpD,CAACU,IAGLmQ,qBAAU,WAER,GADAiN,EAAiB,IACb/c,IAEF,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAO2O,QAAO,CACd,IAAImI,EAAU,GACd,IAAK,IAAI6G,KAAS3d,EAAM2O,OAClB3O,EAAM2O,OAAOgP,GAAOC,mBAAqB,GAC3C9G,EAAQrL,KAAK,CAAClN,KAAMyB,EAAM2O,OAAOgP,GAAOpf,KAAM,6CAAWyB,EAAM2O,OAAOgP,GAAOC,qBACjF9G,EAAUA,EAAQoG,MAAK,SAAC3W,EAAGsX,GAAJ,OAAUtX,EAAE,8CAAasX,EAAE,+CAAc,EAAI,KACpEd,EAAiBjG,MAIrB,CAAC9W,IAID,gCACI,uGAAiBA,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAO8d,MAAxB,6FAAiD9d,QAAjD,IAAiDA,OAAjD,EAAiDA,EAAO+d,oBACxD,cAAC,KAAD,CACIC,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLpX,KAAMuW,EACNxQ,MAAM,EACNsR,YAAY,EACZC,iBAAiB,EACjBC,oBAAoB,gGACpBC,gBAAiB,CAAC,+DAAc,0DAChCC,aAAa,gJACbC,YAAY,iCACZ5Z,UAAU,cAEV,qBAAKkJ,OAAQgP,EAAc7M,OAAS,EAApC,SACE,eAAC,KAAD,CAAU+G,MAAO,IAAMC,OAAQ,IAC3BnQ,KAAMgW,EACN5F,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAFnD,UAIE,cAAC,KAAD,CAAOQ,QAAQ,OAAOI,UAAU,EAAOF,KAAM,CAAEC,KAAM,sBAAuBF,SAAU,EAAG0G,OAAQ,GAAIC,WAAY,KACjH,cAAC,KAAD,CAAOvG,OAAQ,CAAC,EAAG,WAAYH,KAAM,CAAEC,KAAM,wBAC7C,cAAC,KAAD,CAAS0G,UAAW,CAACrG,MAAO,qBAAsB9L,gBAAiB,mBACjE6L,aAAc,CAACC,MAAO,qBAAsB9L,gBAAiB,kBAAmBoS,aAAc,QAC9FC,QAAQ,IACV,cAAC,KAAD,CAAK/G,QAAQ,6CAAb,SAEQgF,EAAcvQ,KAAI,SAACuS,EAAOvJ,GAAR,OAAkB,cAAC,KAAD,CAAM0C,KAAM2E,GAAOrH,IAAaA,iBCzGjFwJ,OATf,YAAkC,IAAVjf,EAAS,EAATA,MAEpB,OACI,qBAAK8E,UAAU,eAAf,SACM9E,EAAMyM,KAAI,SAACxO,GAAD,OAAU,cAAC,GAAD,CAAUA,KAAMA,GAAWA,EAAKG,UCiHnD8gB,OA/Gf,YAAyC,IAAlBpf,EAAiB,EAAjBA,OAAQI,EAAS,EAATA,MAAS,EACQ0O,mBAAS,IADjB,oBAC7BuQ,EAD6B,KACbC,EADa,KAE9BC,EAAe,CACnB,CACExN,MAAO,mDACPsL,MAAO,OACPC,KAAM,YAER,CACEvL,MAAO,uCACPsL,MAAO,SACPC,KAAM,OAER,CACEvL,MAAO,uCACPsL,MAAO,QACPC,KAAM,OAER,CACEvL,MAAO,iCACPsL,MAAO,SACPC,KAAM,QArB0B,EAyBMxO,mBAAS,CACjDyO,QAASgC,EACT/B,KAAM,KA3B4B,oBAyB/BgC,EAzB+B,KAyBfC,EAzBe,KAyEpC,OA1CAvP,qBAAU,WACElQ,GAEFyf,EAAkB,CAChBlC,QAASgC,EACT/B,KAAMxd,EAAO2M,KAAI,SAACpN,GACd,MAAO,CACCZ,KAAM,mBAAGqG,UAAU,YAAYI,KAAMgI,OAAOC,SAASC,OAAS,UAAY/N,EAAMA,MAAMmgB,QAAhF,SAA0FngB,EAAMA,MAAMogB,YAC5G9B,MAAOte,EAAMA,MAAMogB,UACnBzgB,OAAQK,EAAML,OACdE,MAAOG,EAAMH,MACbD,OAAQI,EAAMJ,eAWlC,CAACa,IAGLkQ,qBAAU,WAER,GADAoP,EAAkB,IACdlf,IAEF,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAO2O,QAAO,CACd,IAAImI,EAAU,GACd,IAAK,IAAI6G,KAAS3d,EAAM2O,OAChB3O,EAAM2O,OAAOgP,GAAOC,mBAAqB,GAC3C9G,EAAQrL,KAAK,CAAClN,KAAMyB,EAAM2O,OAAOgP,GAAOpf,KAAM,6CAAWyB,EAAM2O,OAAOgP,GAAOC,qBACnF9G,EAAUA,EAAQoG,MAAK,SAAC3W,EAAGsX,GAAJ,OAAUtX,EAAE,8CAAasX,EAAE,+CAAc,EAAI,KACpEqB,EAAkBpI,MAItB,CAAC9W,IAID,gCACI,iJAAwBA,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAO8d,MAA/B,mGAAyD9d,QAAzD,IAAyDA,OAAzD,EAAyDA,EAAO+d,oBAChE,cAAC,KAAD,CACIC,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLpX,KAAMsY,EACNvS,MAAM,EACNsR,YAAY,EACZC,iBAAiB,EACjBC,oBAAoB,gGACpBC,gBAAiB,CAAC,+DAAc,0DAChCC,aAAa,wKACbC,YAAY,mCAGhB,qBAAK1Q,OAAQmR,EAAehP,OAAS,EAArC,SACI,eAAC,KAAD,CAAU+G,MAAO,IAAMC,OAAQ,IAC3BnQ,KAAMmY,EACN/H,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAFnD,UAIE,cAAC,KAAD,CAAOQ,QAAQ,OAAOI,UAAU,EAAOF,KAAM,CAAEC,KAAM,sBAAuBF,SAAU,EAAG0G,OAAQ,GAAIC,WAAY,KACjH,cAAC,KAAD,CAAOvG,OAAQ,CAAC,EAAG,WAAYH,KAAM,CAAEC,KAAM,wBAC7C,cAAC,KAAD,CAAS0G,UAAW,CAACrG,MAAO,qBAAsB9L,gBAAiB,mBACjE6L,aAAc,CAACC,MAAO,qBAAsB9L,gBAAiB,kBAAmBoS,aAAc,QAC9FC,QAAQ,IACV,cAAC,KAAD,CAAK/G,QAAQ,6CAAb,SAEQmH,EAAe1S,KAAI,SAACuS,EAAOvJ,GAAR,OAAkB,cAAC,KAAD,CAAM0C,KAAM2E,GAAOrH,IAAaA,iBCgFhFiK,OAtLf,YAAyC,IAgIjBxhB,EAAUiL,EAiCXoG,EAjKJnP,EAAqB,EAArBA,IAAKuf,EAAgB,EAAhBA,aAChB3S,EAAUC,cAqKd,OAnKA+C,qBAAU,cAGN,CAAC5P,IAiKG,sBAAK0E,UAAU,SAAf,WANWyK,EAMwBnP,EAAIwf,QAL7B,IAAIvV,KAAKkF,GACRsQ,mBAAmB,UAI9B,IAAkDF,GAvCtCzhB,EAuC8DkC,EAAInC,KAvCxDkL,EAuC8D/I,EAAI8G,QAtChF,mBAAGhC,KAAMgI,OAAOC,SAASC,OAAS,SAAWjE,EACzCrE,UAAU,UACV6H,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWxC,GAASkE,EAAEC,kBAFzD,SAGSpP,KAmCgF,GAAjG,IA9JR,SAA6B4hB,EAAQC,GACjC,OAAQD,GACJ,IAAK,QACD,OAAQC,GACJ,IAAK,IACD,MAAO,iEACX,IAAK,KACD,MAAO,wEACX,QACI,MAAO,+CAEnB,IAAK,SACD,MAAO,0FACX,IAAK,SACD,MAAO,iGACX,IAAK,aACD,MAAO,uJACX,IAAK,eACD,MAAqB,SAAjBA,EACO,wEAEA,kEACf,QACI,OAAOD,GAuI2FE,CAAoB5f,EAAI6f,YAAa7f,EAAI8f,eAA/I,IAnIR,SAAuB3V,EAAM4V,GACzB,OAAQ5V,GACJ,IAAK,OACD,MAAmB,UAAf4V,GAAyC,WAAfA,EACnB,2BAEA,2BACf,IAAK,QACD,MAAmB,UAAfA,GAAyC,WAAfA,EACnB,iCAEA,uCACf,IAAK,OACD,MAAmB,UAAfA,GAAyC,WAAfA,EACnB,uCAEA,6CACf,IAAK,SAEL,IAAK,UACD,MAAO,GACX,IAAK,OACD,MAAO,2EACX,QACI,OAAO5V,GA2GqJ6V,CAAchgB,EAAImK,KAAMnK,EAAI6f,aAA5L,IAvGR,SAAoBxhB,EAAM8L,EAAMnM,GAC5B,OAAQmM,GACJ,IAAK,OACD,OAAQ,mBAAGrF,KAAMgI,OAAOC,SAASC,OAAS,SAAWhP,EACzC0G,UAAU,UACV6H,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWvN,GAAKiP,EAAEC,kBAFrD,SAGS7O,IAErB,IAAK,QACD,OAAQ,mBAAGyG,KAAMgI,OAAOC,SAASC,OAAS,UAAYhP,EAC1C0G,UAAU,UACV6H,QAAS,SAACU,GAAQL,EAAQrB,KAAK,UAAYvN,GAAKiP,EAAEC,kBAFtD,SAGS7O,IAErB,IAAK,OACD,OAAQ,mBAAGyG,KAAMgI,OAAOC,SAASC,OAAS,SAAWhP,EACzC0G,UAAU,UACV6H,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWvN,GAAKiP,EAAEC,kBAFrD,SAGS7O,IAErB,IAAK,SACD,OAAQ,sBAAKsG,MAAO,CAACkM,QAAS,gBAAtB,UACI,mBAAG/L,KAAMgI,OAAOC,SAASC,OAAS,SAAWhP,EAAGwY,QAAU,WAAaxY,EAAGsN,cACtE5G,UAAU,UACV6H,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWvN,EAAGwY,QAAW,WAAaxY,EAAGsN,eAAgB2B,EAAEC,kBAF9F,SAGS7O,EAAKA,OAJlB,qDAOI,mBAAGyG,KAAMgI,OAAOC,SAASC,OAAS,SAAWhP,EAAGwY,QAC5C9R,UAAU,UACV6H,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWvN,EAAGwY,SAAUvJ,EAAEC,kBAF7D,SAGS7O,EAAK4hB,iBAK9B,IAAK,UACD,OAAQ,sBAAKtb,MAAO,CAACkM,QAAS,gBAAtB,UAEI,oBAAG/L,KAAMgI,OAAOC,SAASC,OAAS,SAAWhP,EAAGwY,QAAU,WAAaxY,EAAGsN,cAAgB,YAActN,EAAG+V,eACvGrP,UAAU,UACV6H,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWvN,EAAGwY,QAAW,WAAaxY,EAAGsN,cAAgB,YAActN,EAAG+V,gBAAiB9G,EAAEC,kBAFhI,eAGWlP,EAAGsN,cAHd,IAG8BtN,EAAG+V,eAHjC,sCAFJ,qDAQI,mBAAGjP,KAAMgI,OAAOC,SAASC,OAAS,SAAWhP,EAAGwY,QAC5C9R,UAAU,UACV6H,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWvN,EAAGwY,SAAUvJ,EAAEC,kBAF7D,SAGS7O,EAAK4hB,iBAK9B,IAAK,OACD,OAAQ,mBAAGnb,KAAMgI,OAAOC,SAASC,OAAS,SAAWhP,EACzC0G,UAAU,UACV6H,QAAS,SAACU,GAAQL,EAAQrB,KAAK,SAAWvN,GAAKiP,EAAEC,kBAFrD,SAGS7O,IAErB,QACI,OAAOA,GA2CgM6hB,CAAWlgB,EAAI4R,OAAQ5R,EAAImK,KAAMnK,EAAImgB,WAAwB,SAAXngB,EAAImK,KAAkC,MAApBnK,EAAI8f,cAAqB,GAAG,IAA3S,IA/BR,SAA2BC,EAAYJ,EAAc/N,GACjD,OAAQmO,GACJ,IAAK,QACD,MAAe,YAAXnO,EAAuB+N,EAAe,EAC9B,cAAC,KAAD,CAAQxS,KAAM,GACVC,YAAa,cAAC,KAAD,CAASC,KAAG,EAACC,KAAK,OAAOC,KAAK,OAC3CC,WAAY,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAInB,KAAI,SAAAoB,GAAC,OAAI,cAAC,KAAD,CAASH,KAAK,OAAOC,KAAK,KAAKpO,MAAOsO,OAClFC,cAAeiS,EACfhS,UAAU,IAGf,GACf,IAAK,SAEL,IAAK,SACD,MAAO,IAAMgS,EAAe,IAChC,IAAK,aACD,OAAOA,EAAe,KAmB9B,KADYlT,EAlBmCkT,IAmB/BlT,GAAU,GACnB,iCACFA,EAAS,KAAO,EACd,qBACF,GAAKA,EAAS,IAAMA,EAAS,IAAM,EACjC,2BAEA,kCAzBH,IAAK,eACD,MAAO,GACX,QACI,OAAOkT,EAcvB,IAAoBlT,EAJyS2T,CAAkBpgB,EAAI6f,YAAa7f,EAAI8f,cAAe9f,EAAImK,UC9FxWkW,OA5Ef,YAA8D,IAArCC,EAAoC,EAApCA,KAAMf,EAA8B,EAA9BA,aAAcgB,EAAgB,EAAhBA,aAAgB,EACvB/R,mBAAS,IADc,oBAClDgS,EADkD,KACvCC,EADuC,OAEnBjS,mBAAS,GAFU,oBAElDkS,EAFkD,KAErCC,EAFqC,KAiCzD,OA7BA/Q,qBAAU,WACF6Q,EAMR,SAAwBH,GACpB,IAAIM,EAAU,GAEd,IAAK,IAAI9Q,KAAKwQ,EAAK,CACf,IAAInR,EAAO,IAAIlF,KAAKqW,EAAKxQ,GAAG0P,SAEL,IAAnBoB,EAAQ7Q,OACR6Q,EAAQrV,KAAK,CACT4D,KAAMA,EACNmR,KAAM,CAACA,EAAKxQ,MAEXX,EAAK0R,WAAaD,EAAQA,EAAQ7Q,OAAS,GAAGZ,KAAK0R,SACxDD,EAAQA,EAAQ7Q,OAAS,GAAGuQ,KAAK/U,KAAK+U,EAAKxQ,IAE3C8Q,EAAQrV,KAAK,CACT4D,KAAMA,EACNmR,KAAM,CAACA,EAAKxQ,MAGxB,OAAO8Q,EAzBUE,CAAeR,EAAKtgB,QAGrC,CAACsgB,IA0BD,gCAEQE,EAAUnU,KAAI,SAAC0U,GAAD,OACV,sBAA6Brc,UAAU,SAAvC,UACI,oBAAIA,UAAU,UAAd,SACKqc,EAAO5R,KAAK+E,mBAAmB,WAEpC,qBAAKxP,UAAU,UAAf,SACMqc,EAAOT,KAAKjU,KAAI,SAACrM,GAAD,OAAS,cAAC,GAAD,CAAQA,IAAKA,EAAKuf,aAAcA,GAAmBvf,EAAIhC,GAAKgC,EAAIwf,gBALzFuB,EAAOT,KAAK,GAAGtiB,OAUjC,wBACI0G,UAAU,sBACVoN,UAAWwO,EAAKU,cAChBzU,QAAS,WACG+T,EAAKU,gBACLT,EAAaG,EAAY,GACzBC,EAAeD,EAAY,KAN3C,SAUI,cAAC,KAAD,CAASpT,KAAK,iBAGlB,wBACI5I,UAAU,sBACVoN,SAAwB,IAAd4O,EACVnU,QAAS,WACGmU,EAAY,IACZH,EAAaG,EAAY,GACzBC,EAAeD,EAAY,KAN3C,SAUI,cAAC,KAAD,CAASpT,KAAK,mBC8Cf2T,OAjHf,YAAuC,IAAjBthB,EAAgB,EAAhBA,MAAOG,EAAS,EAATA,MAAS,EACM0O,mBAAS,IADf,oBAC7B0S,EAD6B,KACdC,EADc,KAG5BC,EAAc,CAClB,CACE3P,MAAO,mDACPsL,MAAO,OACPC,KAAM,YAER,CACEvL,MAAO,uCACPsL,MAAO,SACPC,KAAM,OAER,CACEvL,MAAO,uCACPsL,MAAO,QACPC,KAAM,OAER,CACEvL,MAAO,iCACPsL,MAAO,SACPC,KAAM,QAtBwB,EA0BMxO,mBAAS,CAC/CyO,QAASmE,EACTlE,KAAM,KA5B0B,oBA0B7BmE,EA1B6B,KA0BdC,EA1Bc,KA4ElC,OA5CA1R,qBAAU,WACEjQ,GAEF2hB,EAAiB,CACfrE,QAASmE,EACTlE,KAAMvd,EAAM0M,KAAI,SAAChN,GACb,MAAO,CACChB,KAAM,mBAAGqG,UAAU,YAAYI,KAAMgI,OAAOC,SAASC,OAAS,SAAW3N,EAAKA,KAAK+f,QAA7E,SAAuF/f,EAAKA,KAAKggB,YACvG9B,MAAOle,EAAKA,KAAKggB,UACjBzgB,OAAQS,EAAKT,OACbE,MAAOO,EAAKP,MACZD,OAAQQ,EAAKR,eAWjC,CAACc,IAGLiQ,qBAAU,WAER,GADAuR,EAAiB,IACbrhB,IAEF,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAO2O,QAAO,CACd,IAAImI,EAAU,GACd,IAAK,IAAI6G,KAAS3d,EAAM2O,OAClB3O,EAAM2O,OAAOgP,GAAOC,mBAAqB,GAC3C9G,EAAQrL,KAAK,CAAClN,KAAMyB,EAAM2O,OAAOgP,GAAOpf,KAAM,6CAAWyB,EAAM2O,OAAOgP,GAAOC,qBACjF9G,EAAUA,EAAQoG,MAAK,SAAC3W,EAAGsX,GAAJ,OAAUtX,EAAE,8CAAasX,EAAE,+CAAc,EAAI,KACpEwD,EAAiBvK,MAIrB,CAAC9W,IAMD,gCACI,sLAA+BA,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAO8d,MAAtC,mGAAgE9d,QAAhE,IAAgEA,OAAhE,EAAgEA,EAAO+d,oBACvE,cAAC,KAAD,CACIC,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLpX,KAAMya,EACN1U,MAAM,EACNsR,YAAY,EACZC,iBAAiB,EACjBC,oBAAoB,gGACpBC,gBAAiB,CAAC,+DAAc,0DAChCC,aAAa,8KACbC,YAAY,mCAEd,qBAAK1Q,OAAQsT,EAAcnR,OAAS,EAApC,SACE,eAAC,KAAD,CAAU+G,MAAO,IAAMC,OAAQ,IAC3BnQ,KAAMsa,EACNlK,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAFnD,UAIE,cAAC,KAAD,CAAOQ,QAAQ,OAAOI,UAAU,EAAOF,KAAM,CAAEC,KAAM,sBAAuBF,SAAU,EAAG0G,OAAQ,GAAIC,WAAY,KACjH,cAAC,KAAD,CAAOvG,OAAQ,CAAC,EAAG,WAAYH,KAAM,CAAEC,KAAM,wBAC7C,cAAC,KAAD,CAAS0G,UAAW,CAACrG,MAAO,qBAAsB9L,gBAAiB,mBACjE6L,aAAc,CAACC,MAAO,qBAAsB9L,gBAAiB,kBAAmBoS,aAAc,QAC9FC,QAAQ,IACV,cAAC,KAAD,CAAK/G,QAAQ,6CAAb,SAEQsJ,EAAc7U,KAAI,SAACuS,EAAOvJ,GAAR,OAAkB,cAAC,KAAD,CAAM0C,KAAM2E,GAAOrH,IAAaA,iBCuD9F,IA+Be7Q,gBA/BS,SAAA5C,GAAK,MAAK,CAC9BhE,SAAU6G,GAAsB7C,GAChC2f,cAAe9c,GAAsC7C,GACrD8R,SAAUjP,GAA6B7C,GACvC7B,SAAU0E,GAA0B7C,GACpC4f,kBAAmB/c,GAAmC7C,GACtD3B,gBAAiBwE,GAAiC7C,GAClD6f,yBAA0Bhd,GAA0C7C,GACpE8f,gBAAiBjd,GAAkB7C,OAGZ,SAACkI,GAC3B,MAAO,CACA2B,cAAe,WACX3B,EAASsE,OAEbtF,YAAa,SAAChC,G9BsNf,IAAgChJ,E8BrN3BgM,G9BqN2BhM,E8BrNagJ,E9BsNhD,yCAAO,WAAMgD,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAA8C,GACnEwB,GAAS9B,EAAUM,IAA6B,GAChDK,GAAqBV,aAAaC,QAAQ,SAAUlM,GAAU4M,MAAK,SAACC,GAClD,MAAVA,EACAb,EAAS,CACLK,KAAMC,EACNnM,QAAS0M,KAIbK,IAAMC,MAAM,iGACZW,GAAS9B,EAAUM,IAA6B,IAEpDuB,GAAW7B,EAAUM,GAA8C,MAdpE,2CAAP,yD8BpNIpB,cAAe,SAACC,EAAcF,GAC1Be,E9B+ZL,SAAuBb,EAAcF,GACxC,gDAAO,WAAMe,GAAN,UAAAzD,EAAA,sEACOyD,EAASD,MADhB,kCAECY,GAAuBV,aAAaC,QAAQ,SAAUf,EAAcF,GAAQ2B,MAAK,SAACC,GACzEA,EAIDb,EAAS,CACLK,KAAMC,EACNnB,aAAc0B,EAAO1B,eALzB+B,IAAMC,MAAM,mJAJrB,2CAAP,sD8BhaiBmD,CAAsBnF,EAAcF,KAEjD4Y,YAAa,SAAC5Y,EAAQL,EAAMS,GACxBW,E9BmOL,SAA6Bf,EAAQL,EAAMS,GAC9C,gDAAO,WAAMW,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAA2C,GAChEK,GAAoBV,aAAaC,QAAQ,SAAUjB,EAAQL,EAAMS,GAAeuB,MAAK,SAACC,GACpE,MAAVA,EACAb,EAAS,CACLK,KAAMC,EACNkW,KAAM3V,IAIVK,IAAMC,MAAM,yHAGhBU,GAAW7B,EAAUM,GAA2C,MAbjE,2CAAP,sD8BpOiBgE,CAA4BrF,EAAQL,EAAMS,KAEvDyY,mBAAoB,SAAC7Y,EAAQL,EAAMS,GAC/BW,E9BmPL,SAAoCf,EAAQL,EAAMS,GACrD,gDAAO,WAAMW,GAAN,UAAAzD,EAAA,sDACHsF,GAAW7B,EAAUM,GAAmD,GACxEK,GAA2BV,aAAaC,QAAQ,SAAUjB,EAAQL,EAAMS,GAAeuB,MAAK,SAACC,GAC3E,MAAVA,EACAb,EAAS,CACLK,KAAMC,EACNkW,KAAM3V,IAIVK,IAAMC,MAAM,yHAEhBU,GAAW7B,EAAUM,GAAmD,MAZzE,2CAAP,sD8BpPiBgE,CAAmCrF,EAAQL,EAAMS,QAKvD3E,EAnKf,YAIC,IAJqB5G,EAItB,EAJsBA,SAAU8V,EAIhC,EAJgCA,SACZ6N,EAGpB,EAHoBA,cAAezY,EAGnC,EAHmCA,YAAa4Y,EAGhD,EAHgDA,gBAAiB1Y,EAGjE,EAHiEA,cAC7C2Y,EAEpB,EAFoBA,YAAa5hB,EAEjC,EAFiCA,SAAUyhB,EAE3C,EAF2CA,kBACvBI,EACpB,EADoBA,mBAAoB3hB,EACxC,EADwCA,gBAAiBwhB,EACzD,EADyDA,yBAE/C1Y,EAAWwF,cAAXxF,OADV,EAEgDyF,mBAAS,8CAFzD,oBAEW+K,EAFX,KAE2BC,EAF3B,OAGsChL,mBAAS,IAH/C,oBAGWiI,EAHX,KAGsBC,EAHtB,KAyCI,OApCA9G,qBACF,WACU9G,EAAYC,GACZ4Y,EAAY5Y,EAAQ,EAnBT,MAsBrB,CAACA,EAAQD,EAAa6Y,EAAaC,IAGjChS,qBACF,WACchS,GACAgkB,EAAmB7Y,EAAQ,EA5BpB,MA+BrB,CAACnL,EAAUmL,IAGT6G,qBACF,WAGU,GAFA8G,EAAa,IACbnG,SAASpR,MAAQ,8CAAauU,EAAS5V,SACnC4V,EAAS5T,MAAML,MAAM,CACrB,IAAImX,EAAU,GACVlD,EAAS5T,MAAML,MAAMoe,iBAAmB,GACxCjH,EAAQrL,KAAK,CAAClN,KAAM,uEAAiBqT,MAAOgC,EAAS5T,MAAML,MAAMoe,mBACjEnK,EAAS5T,MAAMJ,OAAOme,iBAAmB,GACzCjH,EAAQrL,KAAK,CAAClN,KAAM,mFAAmBqT,MAAOgC,EAAS5T,MAAMJ,OAAOme,mBACpEnK,EAAS5T,MAAMgL,SAAS+S,iBAAmB,GAC3CjH,EAAQrL,KAAK,CAAClN,KAAM,yFAAoBqT,MAAOgC,EAAS5T,MAAMgL,SAAS+S,mBAC3EnH,EAAaE,MAG3B,CAAClD,IAIK,gCACI,qBAAKhP,UAAU,gBACf,cAAC,KAAD,CACI+L,OAAQ8Q,EACR7Q,SAAO,EACPC,KAAK,sDAHT,SAKA,cAAC,KAAD,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAQC,GAAG,QACX,eAAC,KAAD,CAAQlM,UAAU,WAAlB,UACI,+KAA+BgP,EAAS5V,YACxC,wBACI8P,OAAQ8T,EAAgB5jB,WAAa4V,EAAS5V,SAC9C4G,UAAU,kBACV6H,QAAU,WACNvD,EAAc,CAACC,cAAcyK,EAASmO,aAAyBnO,EAAS1V,KAJhF,SAMK0V,EAASmO,YAAY,+DAAa,uEAEvC,cAAC,GAAD,CACIxI,WAAY,CAAC,6CAAW,2BAAQ,uCAAU,6CAAW,wCACrDnN,YAAY,UACZoN,iBAAkB,SAACG,GAAeD,EAAkBC,MAEpD,sBAAK7L,OAAyB,+CAAjB2L,EAAb,UACI,mHACA,eAAC,KAAD,CACI9I,OAAQ+Q,EACR9Q,SAAO,EACPC,KAAK,mHAHT,UAMI,qBAAK/C,OAAQ6I,EAAU1G,OAAS,EAAhC,SACI,eAAC,KAAD,CAAU+G,MAAO,IAAKC,OAAQ,IAAKnJ,OAAQ6I,EAAU1G,OAAS,EAA9D,UACI,cAAC,KAAD,CAAK6H,QAAQ,QACThR,KAAM6P,EACNqL,GAAG,MAAMC,GAAG,MACZC,YAAa,GACbjK,KAAK,UACLkK,WAAW,EACXxQ,OAAK,EACLyQ,SAAU,EAPd,SAUIzL,EAAUpK,KAAI,SAACuS,EAAOvJ,GAAR,OAAkB,cAAC,KAAD,CAAM0C,KAAM2E,GAAOrH,IAAaA,QAGpE,cAAC,KAAD,CAASoJ,UAAW,CAACrG,MAAO,qBAAsB9L,gBAAiB,mBAC/D6L,aAAc,CAACC,MAAO,qBAAsB9L,gBAAiB,kBAAmBoS,aAAc,QAC9FC,QAAQ,IACZ,cAAC,KAAD,CAAQwD,cAAc,SAASC,gBAAgB,gBAGvD,cAAC,GAAD,CAAc9B,KAAMvgB,EAAUwgB,aAAc,SAAC8B,GAAD,OAAgBV,EAAY5Y,EAAQsZ,EA3G7F,aA8GK,qBAAKzU,OAAyB,6BAAjB2L,EAAb,SACI,cAAC,GAAD,CAAW9Z,MAAOiU,EAASjU,MAAOK,MAAO4T,EAAS5T,MAAML,UAE5D,qBAAKmO,OAAyB,yCAAjB2L,EAAb,SACI,cAAC,GAAD,CAAY7Z,OAAQgU,EAAShU,OAAQI,MAAO4T,EAAS5T,MAAMJ,WAE/D,qBAAKkO,OAAyB,+CAAjB2L,EAAb,SACI,cAAC,GAAD,CAAW5Z,MAAO+T,EAAS/T,MAAOG,MAAO4T,EAAS5T,MAAMgL,aAE5D,sBAAK8C,OAAyB,yCAAjB2L,EAAb,UACI,cAAC,GAAD,CAAa3Z,MAAO8T,EAAS4O,eAAe5O,EAAS4O,eAAe,KACpE,qIACA,cAAC,KAAD,CACI7R,OAAQgR,EACR/Q,SAAO,EACPC,KAAK,mHAHT,SAKI,cAAC,GAAD,CAAc2P,KAAMrgB,EAAiBsgB,aAAc,SAAC8B,GAAD,OAAgBT,EAAmB7Y,EAAQsZ,EA/H3G,KA+HwI9C,cAAc,YAIzJ,cAAC,KAAD,CAAQ3O,GAAG,qBCxF/B,IAmBepM,gBAnBS,SAAA5C,GAAK,MAAK,CAC9BhE,SAAU6G,GAAsB7C,GAChC/D,KAAM4G,GAAkB7C,OAGC,SAACkI,GAC7B,MAAO,CACNyY,aAAc,WACbzY,EAASsE,OAEJoU,cAAe,WACX1Y,EAASsE,OAEbqU,oBAAqB,WACjB3Y,E/BklBD,CAAEK,KAAMC,EAAgCsB,QAAQ,Q+B7kB5ClH,EArEf,YAAuF,IAArE5G,EAAoE,EAApEA,SAAU2kB,EAA0D,EAA1DA,aAAcC,EAA4C,EAA5CA,cAAeC,EAA6B,EAA7BA,oBAAqB5kB,EAAQ,EAARA,KACtE+O,EAAUC,cAEd,OACQ,eAAC,KAAD,CAAWlI,MAAO,CAAE2H,gBAAiB,WAAaoW,MAAI,EAACC,OAAO,KAAKC,MAAM,MAAzE,UACA,cAAC,KAAD,CAAgBrW,QAAU,SAACoF,GAAsD,OAA3CA,EAAMzE,iBAAkBN,EAAQrB,KAAK,MAAa,GAAxF,SACI,wBAAQ7G,UAAU,aAAaC,MAAO,CAACga,OAAQ,WAA/C,yBAEJ,cAAC,KAAD,CAAcxH,MAAI,IAIlB,eAAC,KAAD,CAAcD,OAAK,EAAnB,UACI,cAAC,KAAD,UACI,cAAC,KAAD,CAAegE,SAAW,SAACvJ,GAA4G,OAAjGA,EAAMzE,iBAAkBN,EAAQrB,KAAK,WAAagF,SAASwB,eAAe,eAAeL,QAAe,GAA9I,SACI,qBAAKhN,UAAU,eAAf,SACA,uBAAOA,UAAU,uBAAuByF,KAAK,OAAOgR,YAAY,iCAAQC,aAAW,iCAC/Epd,GAAG,sBAKf,cAAC,KAAD,CAAY0G,UAAU,mBAAmBkJ,OAAQhQ,EAAjD,SACI,eAAC,KAAD,CAAYilB,GAAG,IAAItW,QAASgW,EAA5B,UACI,cAAC,KAAD,CAASjV,KAAK,gBADlB,uCAIJ,cAAC,KAAD,CAAY5I,UAAU,mBAAmBkJ,OAAQhQ,EAAjD,SACI,eAAC,KAAD,CAAYilB,GAAG,IAAItW,QAASkW,EAA5B,UACI,cAAC,KAAD,CAASnV,KAAK,cADlB,qHAIJ,cAAC,KAAD,CAAYM,QAAShQ,EAAU8G,UAAU,mBAAzC,SACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAmBoe,KAAG,EAACC,OAAK,EAA5B,SACA,sBAAMre,UAAU,OAAhB,SAAwB7G,EAAKC,aAE7B,eAAC,KAAD,WACI,cAAC,KAAD,CAAiBgH,KAAM,SAASjH,EAAKG,GAArC,wDACA,eAAC,KAAD,CAAiBuO,QAAUiW,EAA3B,UACI,cAAC,KAAD,CAASlV,KAAK,iBADlB,sDCbb0V,G,uKA3BX,OACE,gCACE,cAAC,GAAD,IACA,qBAAKte,UAAU,WACf,eAAC,IAAD,WACI,cAAC,IAAD,CAAOue,OAAK,EAACC,KAAK,IAAIC,UAAWC,KACjC,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,YAAYC,UAAWE,KACzC,cAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,aAAaC,UAAWG,KAC1C,cAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,YAAYC,UAAWI,KACzC,cAAC,IAAD,CAAON,OAAK,EAACC,KAAK,gCAAgCC,UAAWK,KAC7D,cAAC,IAAD,CAAOP,OAAK,EAACC,KAAK,+DAA+DC,UAAWM,KAC5F,cAAC,IAAD,CAAOR,OAAK,EAACC,KAAK,iBAAiBC,UAAWO,KAC9C,cAAC,IAAD,CAAOT,OAAK,EAACC,KAAK,YAAYC,UAAWQ,KACzC,cAAC,IAAD,CAAOV,OAAK,EAACC,KAAK,qBAAqBC,UAAWS,KAClD,cAAC,IAAD,CAAOX,OAAK,EAACC,KAAK,gBAAgBC,UAAWU,KAC7C,cAAC,IAAD,CAAOC,OAAQ,WAAc,OAAO,iDAG1C,cAAC,IAAD,CAAgBC,SAAS,aAAaC,iBAAe,EAACC,aAAW,EAACC,cAAY,IAC9E,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,W,GAvBeC,IAAMC,WCQ3B,IAQe5f,eAAQ,MARI,SAACsF,GAC3B,MAAO,CACJua,OAAQ,WACNva,EAASsE,UAKA5J,EA7Bf,YAAwB,IAAV6f,EAAS,EAATA,OAUZ,OARAzU,qBACE,WACIyU,MAGJ,IAIA,cAAC,IAAD,UACE,qBAAK3f,UAAU,SAAf,SACE,+BACE,cAAC,GAAD,aCTJ4f,GAAcC,QACW,cAA7BzX,OAAOC,SAASyX,UAEe,UAA7B1X,OAAOC,SAASyX,UAEhB1X,OAAOC,SAASyX,SAASC,MACvB,2DAsCN,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTja,MAAK,SAAAtD,GACJA,EAAa4d,cAAgB,WAC3B,IAAMC,EAAmB7d,EAAa8d,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrjB,QACfijB,UAAUC,cAAcM,YAI1Ble,QAAQlH,IACN,iHAKE4kB,GAAUA,EAAOS,UACnBT,EAAOS,SAASje,KAMlBF,QAAQlH,IAAI,sCAGR4kB,GAAUA,EAAOU,WACnBV,EAAOU,UAAUle,WAO5Bme,OAAM,SAAAta,GACL/D,QAAQ+D,MAAM,4CAA6CA,M,uBC/E3Dua,GAAmB1Y,OAAO2Y,sCAAwCC,KAClEC,GAAQC,cxCuBC,WAAgD,IAA/BhkB,EAA8B,uDAAtBnE,GAAciiB,EAAQ,uCAC5D,OAAQA,EAAOvV,MAEb,KAAK0b,EAAgB,OAAOjkB,EAAMkkB,MAAM,CAAC,QAASpG,EAAO7hB,MACzD,KAAKgoB,EAAgB,OAAOjkB,EAAMkkB,MAAM,CAAC,QAASpG,EAAO/hB,MAGzD,KAAKkoB,EAAwB,OAAOjkB,EAAMkkB,MAAM,CAAC,UAAW,OAAQ,aAAcpG,EAAOxhB,MACzF,KAAK2nB,EAAkC,OAAOjkB,EAAMkkB,MAAM,CAAC,UAAW,OAAQ,aAAcpG,EAAO/gB,WAGnG,KAAKknB,EAAyB,OAAOjkB,EAAMkkB,MAAM,CAAC,UAAW,QAAS,aAAcpG,EAAOzgB,OAC3F,KAAK4mB,EAAmC,OAAOjkB,EAAMkkB,MAAM,CAAC,UAAW,QAAS,aAAcpG,EAAO/gB,WAGrG,KAAKknB,EAAwB,OAAOjkB,EAAMkkB,MAAM,CAAC,UAAW,OAAQ,aAAcpG,EAAOrgB,MACzF,KAAKwmB,EAAkC,OAAOjkB,EAAMkkB,MAAM,CAAC,UAAW,OAAQ,aAAcpG,EAAO/gB,WAGnG,KAAKknB,EAAgC,OAAOjkB,EAAMkkB,MAAM,CAAC,UAAW,cAAepG,EAAOpd,aAAc,aAAcod,EAAO/S,MAC7H,KAAKkZ,EAA0C,OAAOjkB,EAAMkkB,MAAM,CAAC,UAAW,cAAepG,EAAOpd,aAAc,aAAcod,EAAO/gB,WACvI,KAAKknB,EAA8C,OAAOjkB,EAAMkkB,MAAM,CAAC,UAAW,cAAepG,EAAOpd,aAAc,YAAa,WAAYod,EAAOzX,cAAe,SAAUyX,EAAO5gB,OAGtL,KAAK+mB,EAAgC,OAAOjkB,EAAMkkB,MAAM,CAAC,gBAAiB,SAAUpG,EAAOjgB,OAC3F,KAAKomB,EAAiC,OAAOjkB,EAAMkkB,MAAM,CAAC,gBAAiB,UAAWpG,EAAOhgB,QAC7F,KAAKmmB,EAAgC,OAAOjkB,EAAMkkB,MAAM,CAAC,gBAAiB,SAAUpG,EAAO/f,OAC3F,KAAKkmB,EAAgC,OAAOjkB,EAAMkkB,MAAM,CAAC,gBAAiB,SAAUpG,EAAO9f,OAG3F,KAAKimB,EAA6B,OAAOjkB,EAAMkkB,MAAM,CAAC,kBAAmB,QAASpG,EAAOzhB,SACzF,KAAK4nB,EAA+B,OAAOjkB,EAAMkkB,MAAM,CAAC,kBAAmB,OAAQ,eAAgBpG,EAAOzW,cAC1G,KAAK4c,EAA2B,OAAOjkB,EAAMkkB,MAAM,CAAC,kBAAmB,YAAapG,EAAOY,MAC3F,KAAKuF,EAAkC,OAAOjkB,EAAMkkB,MAAM,CAAC,kBAAmB,mBAAoBpG,EAAOY,MAGzG,KAAKuF,EAAsB,OAAOjkB,EAAMkkB,MAAM,CAAC,cAAe,aAAcpG,EAAOhU,QACnF,KAAKma,EAA2B,OAAOjkB,EAAMkkB,MAAM,CAAC,cAAe,kBAAmBpG,EAAOhU,QAC7F,KAAKma,EAAgC,OAAOjkB,EAAMkkB,MAAM,CAAC,cAAe,qBAAsBpG,EAAOhU,QAGrG,KAAKma,EAAmB,OAAOjkB,EAAMkkB,MAAM,CAAC,SAAU,QAASpG,EAAOzU,OACtE,KAAK4a,EAAyB,OAAOjkB,EAAMkkB,MAAM,CAAC,SAAU,cAAepG,EAAOzU,OAClF,KAAK4a,GAA0B,OAAOjkB,EAAMkkB,MAAM,CAAC,SAAU,eAAgBpG,EAAOzU,OACpF,KAAK4a,GAA4B,OAAOjkB,EAAMkkB,MAAM,CAAC,SAAU,gBAAiBpG,EAAOzU,OACvF,KAAK4a,GAA2B,OAAOjkB,EAAMkkB,MAAM,CAAC,SAAU,eAAgBpG,EAAOzU,OACrF,KAAK4a,GAAuB,OAAOjkB,EAAMkkB,MAAM,CAAC,SAAU,YAAapG,EAAOzU,OAC9E,KAAK4a,GAA4B,OAAOjkB,EAAMkkB,MAAM,CAAC,SAAU,iBAAkBpG,EAAOzU,OACxF,KAAK4a,GAA8B,OAAOjkB,EAAMkkB,MAAM,CAAC,SAAU,mBAAoBpG,EAAOzU,OAG5F,KAAK4a,EAAoC,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,eAAgBpG,EAAO7e,WACjG,KAAKglB,EAA8C,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,uBAAwBpG,EAAO7e,WACnH,KAAKglB,EAAqC,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,gBAAiBpG,EAAO7e,WACnG,KAAKglB,EAA+C,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,wBAAyBpG,EAAO7e,WACrH,KAAKglB,EAAoC,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,eAAgBpG,EAAO7e,WACjG,KAAKglB,EAA8C,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,uBAAwBpG,EAAO7e,WACnH,KAAKglB,EAA4C,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,qBAAsBpG,EAAOpd,cAAeod,EAAO7e,WACrI,KAAKglB,EAAoC,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,eAAgBpG,EAAO7e,WACjG,KAAKglB,EAAqC,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,gBAAiBpG,EAAO7e,WACnG,KAAKglB,EAAoC,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,eAAgBpG,EAAO7e,WACjG,KAAKglB,EAAyC,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,mBAAoBpG,EAAO7e,WAC1G,KAAKglB,EAAqC,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,gBAAiBpG,EAAO7e,WACnG,KAAKglB,EAA8C,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,uBAAwBpG,EAAO7e,WACnH,KAAKglB,EAAmC,OAAOjkB,EAAMkkB,MAAM,CAAC,YAAa,eAAgBpG,EAAO7e,WAEhG,QAAS,OAAOe,KwCzFe4jB,GAAiBO,aAAgBC,QAEpEC,IAASnC,OACP,cAAC,IAAD,CAAU6B,MAAOA,GAAjB,SACI,cAAC,GAAD,MAEJpV,SAASwB,eAAe,SDFnB,SAAkB6S,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,GAAwBrZ,OAAOC,SAASjI,MACpDkI,SAAWF,OAAOC,SAASC,OAIvC,OAGFF,OAAOsZ,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMwB,GAAN,sBAEP7B,KAgEV,SAAiCK,EAAOC,GAEtCyB,MAAM1B,EAAO,CACXze,QAAS,CAAE,iBAAkB,YAE5BwE,MAAK,SAAArD,GAEJ,IAAMif,EAAcjf,EAASnB,QAAQrE,IAAI,gBAEnB,MAApBwF,EAASzI,QACO,MAAf0nB,IAA8D,IAAvCA,EAAYjb,QAAQ,cAG5CwZ,UAAUC,cAAcyB,MAAM7b,MAAK,SAAAtD,GACjCA,EAAaof,aAAa9b,MAAK,WAC7BoC,OAAOC,SAAS0Z,eAKpB/B,GAAgBC,EAAOC,MAG1BW,OAAM,WACLre,QAAQlH,IACN,oEAvFA0mB,CAAwB/B,EAAOC,GAI/BC,UAAUC,cAAcyB,MAAM7b,MAAK,WACjCxD,QAAQlH,IACN,iHAMJ0kB,GAAgBC,EAAOC,OCpB/BE,GAEea,e","file":"static/js/main.c6942fa9.chunk.js","sourcesContent":["export const SET_USER = 'SET_USER';\r\nexport const SET_AUTH = \"SET_AUTH\";\r\n\r\nexport const SET_LOGINFORM = \"SET_LOGINFORM\";\r\nexport const SET_REGISTRATEFORM = \"SET_REGISTRATEFORM\";\r\nexport const SET_RESET_PASSWORD_FORM = \"SET_RESET_PASSWORD_FORM\";\r\n\r\nexport const SET_CONTENT_GAME = \"SET_CONTENT_GAME\";\r\nexport const SET_CONTENT_GAME_USER_INFO = \"SET_CONTENT_GAME_USER_INFO\";\r\n\r\nexport const SET_CONTENT_MOVIE = \"SET_CONTENT_MOVIE\";\r\nexport const SET_CONTENT_MOVIE_USER_INFO = \"SET_CONTENT_MOVIE_USER_INFO\";\r\n\r\nexport const SET_CONTENT_SHOW_SEASONS = \"SET_CONTENT_SHOW_SEASONS\";\r\nexport const SET_CONTENT_SHOW_SEASONS_USER_INFO = \"SET_CONTENT_SHOW_SEASONS_USER_INFO\";\r\nexport const SET_CONTENT_SHOW_SEASONS_EPISODE_SCORE = \"SET_CONTENT_SHOW_SEASONS_EPISODE_SCORE\";\r\n\r\nexport const SET_CONTENT_SHOW = \"SET_CONTENT_SHOW\";\r\nexport const SET_CONTENT_SHOW_USER_INFO = \"SET_CONTENT_SHOW_USER_INFO\";\r\n\r\nexport const SET_SEARCH_CONTENT_GAMES = \"SET_SEARCH_CONTENT_GAMES\";\r\nexport const SET_SEARCH_CONTENT_MOVIES = \"SET_SEARCH_CONTENT_MOVIES\";\r\nexport const SET_SEARCH_CONTENT_SHOWS = \"SET_SEARCH_CONTENT_SHOWS\";\r\nexport const SET_SEARCH_CONTENT_USERS = \"SET_SEARCH_CONTENT_USERS\";\r\n\r\nexport const SET_USER_PAGE_CONTENT = \"SET_USER_PAGE_CONTENT\";\r\nexport const SET_USER_PAGE_FOLLOWING = \"SET_USER_PAGE_FOLLOWING\";\r\nexport const SET_USER_PAGE_LOGs = \"SET_USER_PAGE_LOGs\";\r\nexport const SET_USER_PAGE_FRIENDS_LOGS = \"SET_USER_PAGE_FRIENDS_LOGS\";\r\n\r\nexport const SET_IS_LOADING_CONTENT_GAME = \"SET_IS_LOADING_CONTENT_GAME\";\r\nexport const SET_IS_LOADING_CONTENT_GAME_USER_INFO = \"SET_IS_LOADING_CONTENT_GAME_USER_INFO\";\r\nexport const SET_IS_LOADING_CONTENT_MOVIE = \"SET_IS_LOADING_CONTENT_MOVIE\";\r\nexport const SET_IS_LOADING_CONTENT_MOVIE_USER_INFO = \"SET_IS_LOADING_CONTENT_MOVIE_USER_INFO\";\r\nexport const SET_IS_LOADING_CONTENT_SHOW = \"SET_IS_LOADING_CONTENT_SHOW\";\r\nexport const SET_IS_LOADING_CONTENT_SHOW_USER_INFO = \"SET_IS_LOADING_CONTENT_SHOW_USER_INFO\";\r\nexport const SET_IS_LOADING_CONTENT_SHOW_SEASONS = \"SET_IS_LOADING_CONTENT_SHOW_SEASONS\";\r\nexport const SET_IS_LOADING_SEARCH_GAMES = \"SET_IS_LOADING_SEARCH_GAMES\";\r\nexport const SET_IS_LOADING_SEARCH_MOVIES = \"SET_IS_LOADING_SEARCH_MOVIES\";\r\nexport const SET_IS_LOADING_SEARCH_SHOWS = \"SET_IS_LOADING_SEARCH_SHOWS\";\r\nexport const SET_IS_LOADING_SEARCH_USERS = \"SET_IS_LOADING_SEARCH_USERS\";\r\nexport const SET_IS_LOADING_USER_PAGE_CONTENT = \"SET_IS_LOADING_USER_PAGE_CONTENT\";\r\nexport const SET_IS_LOADING_USER_PAGE_LOGS = \"SET_IS_LOADING_USER_PAGE_LOGS\";\r\nexport const SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS = \"SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS\";\r\n\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const REGISTRATE_ERROR = \"REGISTRATE_ERROR\";\r\nexport const GAME_REQUEST_ERROR = \"GAME_REQUEST_ERROR\";\r\nexport const MOVIE_REQUEST_ERROR = \"MOVIE_REQUEST_ERROR\";\r\nexport const SHOW_REQUEST_ERROR = \"SHOW_REQUEST_ERROR\";\r\nexport const USER_PAGE_ERROR = \"USER_PAGE_ERROR\";\r\nexport const RESET_PASSWORD_ERROR = \"RESET_PASSWORD_ERROR\";\r\nexport const CONFIRM_PASSWORD_ERROR = \"CONFIRM_PASSWORD_ERROR\";","import * as types from './actionTypes';\r\nimport { Map } from 'immutable';\r\n\r\n// Создаем reducer с начальным состоянием.\r\nconst initialState = Map(\r\n    {\r\n        auth: { loggedIn: false },\r\n        user: { username:\"\", email:\"\", id: null },\r\n        content: { \r\n            game: { main_info:{ rawg: { name: \"\", background_image: \"\", background_image_additional: \"\", developers: [{}], },\r\n                                hltb:{ game_image_url: \"\"  },   },\r\n                    user_info:{ status: null, review: \"\", score: 0, spent_time: 0, friends_info: [] }\r\n            },\r\n            movie: { main_info:{ tmdb: {  title: \"\", poster_path: \"\", developers: [{}],  }, },\r\n                     user_info:{ status: null,  review: \"\", score: 0, friends_info: []  }\r\n            },\r\n            show: { main_info:{ tmdb: {  title: \"\", poster_path: \"\",developers: [{}], episode_run_time: []} },\r\n                    user_info:{ status: null, review: \"\", score: 0, friends_info: [] }\r\n            },\r\n            showSeasons: {} \r\n        },\r\n        searchContent: { games: [], movies: [], shows: [], users: [] },\r\n        userPageContent: {\r\n            user: {\r\n                stats: {}\r\n            },\r\n            userLogs: {log: []},\r\n            userFriendsLogs: {log: []},\r\n        },\r\n        openedPages: { LoginForm: false, RegistrateForm: false, ResetPasswordForm: false },\r\n        errors: {auth: false, registrate: false, gameRequest: false, movieRequest: false, userPage: false, resetPassword: false, confirmPassword: false },\r\n        isLoading: {    contentGame: false, contentGameUserInfo: false,\r\n                        contentMovie: false, contentMovieUserInfo: false,\r\n                        contentShow: false, contentShowUserInfo: false,\r\n                        contentShowSeasons: {},\r\n                        userPageContent: false, userPageLogs: false, userPageFriendsLogs: false,\r\n                        searchGames: false, searchMovies: false, searchShows: false,  searchUsers: false,\r\n                    }\r\n    }\r\n);\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    //Редьюсеры пользовательской информации\r\n    case types.SET_USER: return state.setIn(['user'], action.user);\r\n    case types.SET_AUTH: return state.setIn(['auth'], action.auth);\r\n\r\n    //Редьюсеры информации об игре\r\n    case types.SET_CONTENT_GAME: return state.setIn(['content', 'game', 'main_info'], action.game);\r\n    case types.SET_CONTENT_GAME_USER_INFO: return state.setIn(['content', 'game', 'user_info'], action.user_info);\r\n\r\n    //Редьюсеры информации о фильме\r\n    case types.SET_CONTENT_MOVIE: return state.setIn(['content', 'movie', 'main_info'], action.movie);\r\n    case types.SET_CONTENT_MOVIE_USER_INFO: return state.setIn(['content', 'movie', 'user_info'], action.user_info);\r\n\r\n    //Редьюсеры информации о сериале\r\n    case types.SET_CONTENT_SHOW: return state.setIn(['content', 'show', 'main_info'], action.show);\r\n    case types.SET_CONTENT_SHOW_USER_INFO: return state.setIn(['content', 'show', 'user_info'], action.user_info);\r\n\r\n    //Редьюсеры информации о сезонах сериала\r\n    case types.SET_CONTENT_SHOW_SEASONS: return state.setIn(['content', 'showSeasons', action.seasonNumber, 'main_info'], action.info);\r\n    case types.SET_CONTENT_SHOW_SEASONS_USER_INFO: return state.setIn(['content', 'showSeasons', action.seasonNumber, 'user_info'], action.user_info);\r\n    case types.SET_CONTENT_SHOW_SEASONS_EPISODE_SCORE: return state.setIn(['content', 'showSeasons', action.seasonNumber, 'user_info', 'episodes', action.episodeNumber, 'score'], action.score);\r\n\r\n    //Редьюсеры результатов поиска\r\n    case types.SET_SEARCH_CONTENT_GAMES: return state.setIn(['searchContent', 'games'], action.games);\r\n    case types.SET_SEARCH_CONTENT_MOVIES: return state.setIn(['searchContent', 'movies'], action.movies);\r\n    case types.SET_SEARCH_CONTENT_SHOWS: return state.setIn(['searchContent', 'shows'], action.shows);\r\n    case types.SET_SEARCH_CONTENT_USERS: return state.setIn(['searchContent', 'users'], action.users);\r\n\r\n    //Редьюсеры страницы профиля\r\n    case types.SET_USER_PAGE_CONTENT: return state.setIn(['userPageContent', 'user'], action.content);\r\n    case types.SET_USER_PAGE_FOLLOWING: return state.setIn(['userPageContent', 'user', 'is_followed'], action.is_following);\r\n    case types.SET_USER_PAGE_LOGs:  return state.setIn(['userPageContent', 'userLogs'], action.logs);\r\n    case types.SET_USER_PAGE_FRIENDS_LOGS: return state.setIn(['userPageContent', 'userFriendsLogs'], action.logs);\r\n\r\n    //Редьюсеры состояния всплывающих окон\r\n    case types.SET_LOGINFORM:  return state.setIn(['openedPages', 'LoginForm'], action.isOpen);\r\n    case types.SET_REGISTRATEFORM:  return state.setIn(['openedPages', 'RegistrateForm'], action.isOpen);\r\n    case types.SET_RESET_PASSWORD_FORM:  return state.setIn(['openedPages', 'ResetPasswordForm'], action.isOpen);\r\n\r\n    //Редьюсеры ошибок\r\n    case types.AUTH_ERROR:  return state.setIn(['errors', 'auth'], action.error);\r\n    case types.REGISTRATE_ERROR:  return state.setIn(['errors', 'registrate'], action.error);\r\n    case types.GAME_REQUEST_ERROR: return state.setIn(['errors', 'gameRequest'], action.error);\r\n    case types.MOVIE_REQUEST_ERROR:  return state.setIn(['errors', 'movieRequest'], action.error);\r\n    case types.SHOW_REQUEST_ERROR:  return state.setIn(['errors', 'showRequest'], action.error);\r\n    case types.USER_PAGE_ERROR: return state.setIn(['errors', 'userPage'], action.error);\r\n    case types.RESET_PASSWORD_ERROR: return state.setIn(['errors', 'resetPassword'], action.error);\r\n    case types.CONFIRM_PASSWORD_ERROR: return state.setIn(['errors', 'confirmPassword'], action.error);\r\n\r\n    //Редьюсеры состояния загрузки\r\n    case types.SET_IS_LOADING_CONTENT_GAME:  return state.setIn(['isLoading', 'contentGame'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_GAME_USER_INFO:  return state.setIn(['isLoading', 'contentGameUserInfo'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_MOVIE:  return state.setIn(['isLoading', 'contentMovie'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_MOVIE_USER_INFO:  return state.setIn(['isLoading', 'contentMovieUserInfo'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_SHOW:  return state.setIn(['isLoading', 'contentShow'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_SHOW_USER_INFO:  return state.setIn(['isLoading', 'contentShowUserInfo'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_SHOW_SEASONS:  return state.setIn(['isLoading', 'contentShowSeasons', action.seasonNumber], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_GAMES:  return state.setIn(['isLoading', 'searchGames'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_MOVIES:  return state.setIn(['isLoading', 'searchMovies'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_SHOWS:  return state.setIn(['isLoading', 'searchShows'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_CONTENT:  return state.setIn(['isLoading', 'userPageContent'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_LOGS: return state.setIn(['isLoading', 'userPageLogs'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS:  return state.setIn(['isLoading', 'userPageFriendsLogs'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_USERS: return state.setIn(['isLoading', 'searchUsers'], action.isLoading);\r\n\r\n    default: return state;\r\n  }\r\n}\r\n\r\n//Селекторы пользовательской информации\r\nexport function getLoggedIn(state) { return state.get('auth').loggedIn; }\r\nexport function getAuth(state) { return state.get('auth');}\r\nexport function getUser(state) {  return state.get('user'); }\r\n\r\n//Селекторы информации о контенте\r\nexport function getContentGame(state) {  return state.get('content').game.main_info; }\r\nexport function getContentGameUserInfo(state) {  return state.get('content').game.user_info; }\r\nexport function getContentMovie(state) { return state.get('content').movie.main_info; }\r\nexport function getContentMovieUserInfo(state) {  return state.get('content').movie.user_info; }\r\nexport function getContentShow(state) { return state.get('content').show.main_info; }\r\nexport function getContentShowUserInfo(state) {  return state.get('content').show.user_info; }\r\nexport function getContentShowSeasons(state, seasonNumber) { return state.get('content').showSeasons[seasonNumber]?.main_info; }\r\nexport function getContentShowSeasonsUserInfo(state, seasonNumber) {  return state.get('content').showSeasons[seasonNumber]?.user_info; }\r\n\r\n//Селекторы поисковых результатов\r\nexport function getSearchContentGames(state) { return state.get('searchContent').games;}\r\nexport function getSearchContentMovies(state) { return state.get('searchContent').movies; }\r\nexport function getSearchContentShows(state) { return state.get('searchContent').shows; }\r\nexport function getSearchContentUsers(state) { return state.get('searchContent').users; }\r\n\r\n//Селекторы ошибок\r\nexport function getAuthError(state) { return state.get('errors').auth; }\r\nexport function getRegistrateError(state) { return state.get('errors').registrate; }\r\nexport function getGameRequestError(state) {  return state.get('errors').gameRequest; }\r\nexport function getMovieRequestError(state) { return state.get('errors').movieRequest; }\r\nexport function getShowRequestError(state) { return state.get('errors').showRequest; }\r\nexport function getUserPageError(state) {  return state.get('errors').userPage;}\r\nexport function getResetPasswordError(state) {  return state.get('errors').resetPassword;}\r\nexport function getConfirmPasswordError(state) {  return state.get('errors').confirmPassword;}\r\n\r\n//Селекторы состояния высплывающих окон\r\nexport function getLoginForm(state) { return state.get('openedPages').LoginForm; }\r\nexport function getRegistrateForm (state) { return state.get('openedPages').RegistrateForm; }\r\nexport function getResetPasswordForm (state) { return state.get('openedPages').ResetPasswordForm; }\r\n\r\n//Селекторы состояния загрузки\r\nexport function getIsLoadingContentGame(state) { return state.get('isLoading').contentGame; }\r\nexport function getIsLoadingContentGameUserInfo(state) { return state.get('isLoading').contentGameUserInfo; }\r\nexport function getIsLoadingContentMovie(state) {  return state.get('isLoading').contentMovie; }\r\nexport function getIsLoadingContentMovieUserInfo(state) { return state.get('isLoading').contentMovieUserInfo; }\r\nexport function getIsLoadingContentShow(state) {  return state.get('isLoading').contentShow; }\r\nexport function getIsLoadingContentShowUserInfo(state) { return state.get('isLoading').contentShowUserInfo; }\r\nexport function getIsLoadingContentShowSeasons(state, seasonNumber) {  return state.get('isLoading').contentShowSeasons[seasonNumber]; }\r\nexport function getIsLoadingSearchGames(state) { return state.get('isLoading').searchGames; }\r\nexport function getIsLoadingSearchMovies(state) { return state.get('isLoading').searchMovies; }\r\nexport function getIsLoadingSearchShows(state) { return state.get('isLoading').searchShows; }\r\nexport function getIsLoadingSearchUsers(state) { return state.get('isLoading').searchUsers;}\r\nexport function getIsLoadingSearchAll(state) { return (state.get('isLoading').searchUsers || state.get('isLoading').searchMovies || state.get('isLoading').searchGames); }\r\nexport function getIsLoadingUserPageContent(state) { return state.get('isLoading').userPageContent; }\r\nexport function getIsLoadingUserPageLogs(state) { return state.get('isLoading').userPageLogs; }\r\nexport function getIsLoadingUserPageFriendsLogs(state) { return state.get('isLoading').userPageFriendsLogs; }\r\n\r\n//Селекторы страницы профиля\r\nexport function getUserPageContent(state){  return state.get('userPageContent').user; }\r\nexport function getUserPageLogs(state){ return state.get('userPageContent').userLogs; }\r\nexport function getUserPageFriendsLogs(state){  return state.get('userPageContent').userFriendsLogs; }","import React from \"react\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\n//import * as actions from '../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction HomePage ({user}) \r\n{\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n\t\t\t\t<h2 style={{marginTop: '70px', marginLeft: '30px'}}>Добро пожаловать на Interests!</h2>\r\n\t\t\t\t<h4 style={{marginLeft: '30px'}}>\r\n\t\t\t\t\tГлавная страница ещё не готова, однако можно воспользоваться <a href='/search/example' style={{fontWeight: '600'}}>поиском</a> или проверить свой <a href={\"/user/\"+user.id} style={{fontWeight: '600'}}>профиль</a>, если вы уже зарегистрированы\r\n\t\t\t\t</h4>\r\n\t\t\t\t<img src=\"images/logo192.png\" style={{marginLeft: '20px'}} alt=\"Картинка\"/>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: selectors.getUser(state)\r\n});\r\n\r\n  const mapDispatchToProps = () => {\r\n\treturn {\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","/** Время жизни токена в миллисекундах, после истечения которого будет запрошен новый токен*/\r\nexport const TOKEN_LIFETIME = 86000000; \r\n/**Адрес сервера*/\r\nexport const BACKEND_URL = \"http://35.193.124.214:8001/\";\r\n/**Адрес получения токена */\r\nexport const GET_TOKEN_URL = BACKEND_URL + \"users/auth/login/\"; \r\n/**Адрес обновления токена */\r\nexport const REFRESH_TOKEN_URL = BACKEND_URL + \"users/auth/refresh-token/\";\r\n/**Адрес регистрации */\r\nexport const REGISTRATE_URL = BACKEND_URL + \"users/auth/signup/\";\r\n/**Адрес подтверждения почты */\r\nexport const CONFIRM_URL = BACKEND_URL + \"users/auth/confirm_email/\";\r\n/**Адрес сброса пароля */\r\nexport const RESET_PASSWORD_URL = BACKEND_URL + \"users/user/password_reset/\"; \r\n/**Адрес подтверждения сброса пароля */\r\nexport const CONFIRM_PASSWORD_URL = BACKEND_URL + \"users/user/confirm_password_reset/\";\r\n/**Адрес запроса игры */\r\nexport const GET_GAME_URL = BACKEND_URL + \"games/game/\";\r\n/**Адрес поиска игр */\r\nexport const SEARCH_GAMES_URL = BACKEND_URL + \"games/search/\";\r\n/**Адрес запроса фильма */\r\nexport const GET_MOVIE_URL = BACKEND_URL + \"movies/movie/\";\r\n/**Адрес поиска фильмов */\r\nexport const SEARCH_MOVIES_URL = BACKEND_URL + \"movies/search/\";\r\n/**Адрес запроса сериала */\r\nexport const GET_SHOW_URL = BACKEND_URL + \"shows/show/\";\r\n/**Адрес поиска сериалов */\r\nexport const SEARCH_SHOWS_URL = BACKEND_URL + \"shows/search/\";\r\n/**Адрес получения информации о пользователе */\r\nexport const USER_INFO_URL = BACKEND_URL + \"users/user/\";\r\n/**Адрес поиска пользователей */\r\nexport const SEARCH_USERS_URL = BACKEND_URL + \"users/search/\"; \r\n","import axios from \"axios\";\r\nimport jwt_decode from 'jwt-decode';\r\nimport * as urls from '../settings';\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\n/**\r\n * ПОлучение токена авторизации. Токен сохраняется в localStorage\r\n * @param {string} username Имя пользователя\r\n * @param {string} password Пароль \r\n */\r\nexport async function getToken(username, password){\r\n    try{\r\n        const res = await axios.post(urls.GET_TOKEN_URL, {\r\n                    username: username,\r\n                    password: password \r\n                }, axiosConfig);\r\n\r\n        let userData = jwt_decode(res.data.access);\r\n        let user = {username: userData.username, id: userData.user_id, email: userData.email}\r\n\r\n        return {token: res.data.access, refreshToken: res.data.refresh, user: user};\r\n    }catch(e){\r\n        console.log(\"axios error: \" + e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Функция обновления токена\r\n */\r\nexport async function updateToken(refreshToken){\r\n    if (typeof refreshToken !== 'undefined' & refreshToken != null)\r\n        try{\r\n            const res = await axios.post(urls.REFRESH_TOKEN_URL, {\r\n                        refresh: refreshToken\r\n                    }, axiosConfig);\r\n                    \r\n            let userData = jwt_decode(res.data.access);\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n\r\n            return {token: res.data.access, user: user};\r\n        }catch(e){\r\n            console.log(\"exios error: \" + e);\r\n            return null;\r\n        }\r\n    return null;\r\n}\r\n\r\nexport async function registration(username, email, password) {\r\n   try{\r\n        const res = await axios.post(urls.REGISTRATE_URL, \r\n            {  \r\n                username: username,\r\n                email: email, \r\n                password: password, \r\n            }, axiosConfig);\r\n        let data = res.data;\r\n        data.status = res.status;\t\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e.response);\r\n        return e.response;\r\n    }\r\n}\r\n\r\nexport async function confirmation(uid64, token) {\r\n    try{\r\n        const res = await axios.patch(urls.CONFIRM_URL + '?uid64=' + uid64 + '&token=' + token);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }\r\n\r\n export async function resetPassword(email) {\r\n    try{\r\n        const res = await axios.put(urls.RESET_PASSWORD_URL,  {  email: email }, axiosConfig);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }\r\n\r\n export async function confirmPassword(token, password) {\r\n    try{\r\n        const res = await axios.patch(urls.CONFIRM_PASSWORD_URL + '?reset_token=' + token,  { password: password }, axiosConfig);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }","import axios from \"axios\";\r\nimport {GET_GAME_URL, SEARCH_GAMES_URL, USER_INFO_URL, SEARCH_MOVIES_URL, GET_MOVIE_URL, SEARCH_USERS_URL, SEARCH_SHOWS_URL, GET_SHOW_URL} from \"../settings\";\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\naxios.defaults.headers.common = {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getGame(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о фильме\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID фильма  \r\n * @returns {object} Информация о фильме\r\n */\r\nexport async function getMovie(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о сериале\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID сериала  \r\n * @returns {object} Информация о сериале\r\n */\r\nexport async function getShow(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_SHOW_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_SHOW_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о сезоне сериала\r\n * @param {string} token Токен доступа\r\n * @param {string} showID ID сериала \r\n *  * @param {string} seasonNumber номер сезона\r\n * @returns {object} Информация о сериале\r\n */\r\nexport async function getShowSeason(token, showID, seasonNumber) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonNumber, { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonNumber, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о серии сериала\r\n * @param {string} token Токен доступа\r\n * @param {string} showID ID сериала \r\n * @param {string} seasonNumber номер сезона\r\n * @param {string} episodeNumber номер эпизода\r\n * @returns {object} Информация о сериале\r\n */\r\nexport async function getShowEpisode(token, showID, seasonNumber, episodeNumber) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonNumber + \"/episode/\" + episodeNumber, { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonNumber + \"/episode/\" + episodeNumber, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса игры\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус игры\r\n * @param {string} gameSlug Слаг игры\r\n */\r\nexport async function setGameStatus(token, gameSlug, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n\r\n        const res = await axios.put(GET_GAME_URL + gameSlug + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса фильма\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус фильма\r\n * @param {string} movieID ID фильма\r\n */\r\nexport async function setMovieStatus(token, id, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(GET_MOVIE_URL + id + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса сериала\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус сериала\r\n * @param {string} id ID сериала\r\n */\r\nexport async function setShowStatus(token, id, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(GET_SHOW_URL + id + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса сезона сериала\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус сезона сериала\r\n * @param {string} showID ID сериала\r\n *  * @param {string} seasonNumber номер сезона\r\n */\r\nexport async function setShowSeasonStatus(token, showID, seasonNumber, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(GET_SHOW_URL + showID + \"/season/\" + seasonNumber + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса сезона сериала\r\n * @param {string} token Токен доступа\r\n * @param {object} episodesList Список объектов эпизодов\r\n * @param {string} showID ID сериала\r\n */\r\nexport async function setShowEpisodesStatus(token, showID, episodesList){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(GET_SHOW_URL + showID + \"/episodes/\", \r\n            episodesList, { headers: { 'Authorization': AuthStr } });\r\n        return res;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск игр\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchGames(query, page, gamesCount){\r\n    try{\r\n        const res = await axios.get(SEARCH_GAMES_URL, { params : {query: query, page: page, page_size: gamesCount} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск фильмов\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchMovies(query, page){\r\n    try{\r\n        const res = await axios.get(SEARCH_MOVIES_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск сериалов\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchShows(query, page){\r\n    try{\r\n        const res = await axios.get(SEARCH_SHOWS_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск пользователей\r\n * @param {string} query Поисковый запрос\r\n */\r\nexport async function searchUsers(query){\r\n    try{\r\n        const res = await axios.get(SEARCH_USERS_URL, { params : {query: query} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getUserInfo(token, userID) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса пользовтеля (добавить в друзья и тд)\r\n * @param {string} token Токен доступа\r\n * @param {boolean} is_following Статус фильма\r\n * @param {string} userID ID пользовтеля\r\n */\r\nexport async function setUserStatus(token, is_following, userID){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(USER_INFO_URL + userID + \"/follow/\", \r\n            is_following, { headers: { 'Authorization': AuthStr } });\r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий лог пользователя\r\n * @param {string} userID ID пользователя\r\n * @param {string} page страница \r\n * @param {int} resultsOnPage количество результатов на странице \r\n */\r\nexport async function getUserLog(token, userID, page, resultsOnPage) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/log/\", { params : { page: page, page_size: resultsOnPage } }, { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/log/\", { params : { page: page, page_size: resultsOnPage } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий лог друзей пользователя\r\n * @param {string} userID ID пользователя\r\n * @param {int} page страница\r\n * @param {int} resultsOnPage количество результатов на странице \r\n */\r\nexport async function getUserFriendsLog(token, userID, page, resultsOnPage) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(USER_INFO_URL + userID + \"/friends_log/\", { params : { page: page, page_size: resultsOnPage }, 'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для игры\r\n * @param {string} slug slug игры\r\n * @param {int} page страница\r\n */\r\nexport async function getGameUserInfo(token, slug) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_GAME_URL + slug + \"/user_info/\", {'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для фильма\r\n * @param {string} id id фильма\r\n */\r\nexport async function getMovieUserInfo(token, id) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_MOVIE_URL + id + \"/user_info/\", {'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для сериала\r\n * @param {string} showID id сериала\r\n */\r\nexport async function getShowUserInfo(token, showID) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_SHOW_URL + showID + \"/user_info/\", { 'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для сезона сериала\r\n * @param {string} showID id сериала\r\n */\r\nexport async function getShowSeasonUserInfo(token, showID, seasonID) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonID + \"/user_info/\", { 'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для эпизода сериала\r\n * @param {string} showID id сериала\r\n * @param {int} page страница\r\n */\r\nexport async function getShowEpisodeUserInfo(token, showID, seasonID, episodeID) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonID + \"/episode/\" + episodeID + \"/user_info/\", { 'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}","import * as actionTypes from './actionTypes';\r\nimport * as selectors from './reducers';\r\nimport * as auth from \"../services/jwtAuth\";\r\nimport {TOKEN_LIFETIME} from \"../settings\";\r\nimport * as Requests from \"../services/requests\";\r\nimport { toast } from \"react-toastify\";\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nexport function tryAuth(login, password) {\r\n    return async(dispatch) => {\r\n        \r\n        setError(dispatch, actionTypes.AUTH_ERROR, false);\r\n\r\n      try {\r\n        const res = await auth.getToken(login, password);\r\n        if (res !== null){\r\n            localStorage.setItem('refreshToken', res.refreshToken);\r\n            localStorage.setItem('token', res.token);\r\n            localStorage.setItem('tokenTime', Date.now());\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: res.user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_LOGINFORM,\r\n                isOpen: false \r\n            });\r\n        }else{\r\n            setError(dispatch, actionTypes.AUTH_ERROR, true);\r\n        }\r\n            \r\n      }catch (error) {\r\n        console.error(error);\r\n        setError(dispatch, actionTypes.AUTH_ERROR, true);\r\n      }\r\n    };\r\n}\r\n\r\nexport function checkAuthorization(){\r\n    return async(dispatch) => {\r\n        if (localStorage.getItem('token') === null | Date.now() - localStorage.getItem('tokenTime') > TOKEN_LIFETIME){\r\n            const res = await auth.updateToken(localStorage.getItem(\"refreshToken\"));\r\n            if (res !== null){\r\n                dispatch({\r\n                    type: actionTypes.SET_AUTH,\r\n                    auth: { loggedIn: true }, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: res.user, \r\n                });\r\n                localStorage.setItem('token', res.token);\r\n                localStorage.setItem('tokenTime', Date.now());\r\n                return true;\r\n            }else{\r\n                //toast.warn(\"Произошла ошибка авторизации. Зайдите ещё раз\");\r\n                dispatch(resetAuthorization());\r\n                return false;\r\n            } \r\n        }else{\r\n            let userData = jwt_decode(localStorage.getItem('token'));\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            return true;\r\n        }\r\n            \r\n    }\r\n}\r\n\r\nexport function resetAuthorization(){\r\n    return async(dispatch) => {\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('tokenTime');\r\n        dispatch({\r\n            type: actionTypes.SET_AUTH,\r\n            auth: { loggedIn: false }, \r\n        });\r\n        dispatch({\r\n            type: actionTypes.SET_USER,\r\n            user: { username:\"\", id: null, email:\"\" }, \r\n        });\r\n    }\r\n}\r\n\r\nexport function registrationRequest(username, email, password){\r\n    return async(dispatch) => {\r\n        setError(dispatch, actionTypes.REGISTRATE_ERROR, false);\r\n        auth.registration(username, email, password).then((result) => {\r\n            if (result.status === 201 | result.status === 200){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: { login: result.username, email: result.email }, \r\n                });\r\n            }\r\n            else{\r\n                for (let error in result.data)\r\n                    toast.error(result.data[error][0]);\r\n                \r\n                setError(dispatch, actionTypes.REGISTRATE_ERROR, true);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function confirmEmailRequest(uid64, token){\r\n    return async() => {\r\n        auth.confirmation(uid64, token).then((result) => {\r\n            if (result.status === 200){\r\n                toast.success(\"Почта подтверждена!\");\r\n            }\r\n            else{\r\n                if (result.data)\r\n                    toast.error(result.data.error);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestGame(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME, true);\r\n        setError(dispatch, actionTypes.GAME_REQUEST_ERROR, false);\r\n        Requests.getGame(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME,\r\n                    game: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Игра не найдена!\");\r\n                setError(dispatch, actionTypes.GAME_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME, false);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport function requestGameUserInfo(slug){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME_USER_INFO, true);\r\n        Requests.getGameUserInfo(localStorage.getItem('token'), slug).then((result) => {\r\n            if (result != null){\r\n                let newResult = {...result.user_info, friends_info: result.friends_info};\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME_USER_INFO,\r\n                    user_info: newResult, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME_USER_INFO, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestMovie(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE, true);\r\n        setError(dispatch, actionTypes.MOVIE_REQUEST_ERROR, false);\r\n        Requests.getMovie(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_MOVIE,\r\n                    movie: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Фильм не найден!\");\r\n                setError(dispatch, actionTypes.MOVIE_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestMovieUserInfo(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE_USER_INFO, true);\r\n        Requests.getMovieUserInfo(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                let newResult = {...result.user_info, friends_info: result.friends_info};\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_MOVIE_USER_INFO,\r\n                    user_info: newResult, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE_USER_INFO, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShow(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, true);\r\n        setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, false);\r\n        Requests.getShow(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW,\r\n                    show: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Сериал не найден!\");\r\n                setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowSeason(showID, seasonNumber){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, true);\r\n        setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, false);\r\n        Requests.getShowSeason(localStorage.getItem('token'), showID, seasonNumber).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW,\r\n                    show: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Сериал не найден!\");\r\n                setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowSeasons(showID, seasonNumber){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.SET_IS_LOADING_CONTENT_SHOW_SEASONS,\r\n            seasonNumber: seasonNumber,\r\n            isLoading: true\r\n        });\r\n        Requests.getShowSeason(localStorage.getItem('token'), showID, seasonNumber).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW_SEASONS,\r\n                    seasonNumber: seasonNumber,\r\n                    info: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Сериал не найден!\");\r\n            }\r\n            dispatch({\r\n                type: actionTypes.SET_IS_LOADING_CONTENT_SHOW_SEASONS,\r\n                seasonNumber: seasonNumber,\r\n                isLoading: false\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowEpisode(showID, seasonNumber, episodeNumber){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, true);\r\n        setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, false);\r\n        Requests.getShowEpisode(localStorage.getItem('token'), showID, seasonNumber, episodeNumber).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW,\r\n                    show: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Серия не найдена!\");\r\n                setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowUserInfo(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_USER_INFO, true);\r\n        Requests.getShowUserInfo(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                let newResult = {...result.user_info, friends_info: result.friends_info};\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW_USER_INFO,\r\n                    user_info: newResult, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_USER_INFO, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowSeasonUserInfo(showID, seasonID){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_USER_INFO, true);\r\n        Requests.getShowSeasonUserInfo(localStorage.getItem('token'), showID, seasonID).then((result) => {\r\n            if (result != null){\r\n                let newResult = {...result.user_info, user_watched_show: result.user_watched_show, episodes: result.episodes_user_info, friends_info: result.friends_info};\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW_USER_INFO,\r\n                    user_info: newResult, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_USER_INFO, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowSeasonsUserInfo(showID, seasonID){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.SET_IS_LOADING_CONTENT_SHOW_SEASONS,\r\n            seasonNumber: seasonID,\r\n            isLoading: true\r\n        });\r\n        Requests.getShowSeasonUserInfo(localStorage.getItem('token'), showID, seasonID).then((result) => {\r\n            if (result != null){\r\n                let newResult = {...result.user_info, user_watched_show: result.user_watched_show, episodes: result.episodes_user_info, friends_info: result.friends_info};\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW_SEASONS_USER_INFO,\r\n                    seasonNumber: seasonID,\r\n                    user_info: newResult, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки сезона!\");\r\n            }\r\n            dispatch({\r\n                type: actionTypes.SET_IS_LOADING_CONTENT_SHOW_SEASONS,\r\n                seasonNumber: seasonID,\r\n                isLoading: false\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowEpisodeUserInfo(showID, seasonID, episodeID){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_USER_INFO, true);\r\n        Requests.getShowEpisodeUserInfo(localStorage.getItem('token'), showID, seasonID, episodeID).then((result) => {\r\n            if (result != null){\r\n                let newResult = {...result.user_info, user_watched_show: result.user_watched_show, friends_info: result.friends_info};\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW_USER_INFO,\r\n                    user_info: newResult, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_USER_INFO, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setGameStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setGameStatus(localStorage.getItem('token'), selectors.getContentGame(getState()).rawg.slug, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    /*dispatch({\r\n                        type: actionTypes.SET_CONTENT_GAME_USERINFO,\r\n                        user_info: result\r\n                    });*/\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function requestUserPageContent(username){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT, true);\r\n        setError(dispatch, actionTypes.USER_PAGE_ERROR, false);\r\n        Requests.getUserInfo(localStorage.getItem('token'), username).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_CONTENT,\r\n                    content: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Профиль не найден!\");\r\n                setError(dispatch, actionTypes.USER_PAGE_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestUserPageLogs(userID, page, resultsOnPage){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_LOGS, true);\r\n        Requests.getUserLog(localStorage.getItem('token'), userID, page, resultsOnPage).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_LOGs,\r\n                    logs: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n                \r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_LOGS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestUserPageFriendsLogs(userID, page, resultsOnPage){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS, true);\r\n        Requests.getUserFriendsLog(localStorage.getItem('token'), userID, page, resultsOnPage).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_FRIENDS_LOGS,\r\n                    logs: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchGames(query, page, gamesCount){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_GAMES, true);\r\n        Requests.searchGames(query, page, gamesCount).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_GAMES,\r\n                    games: result, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_GAMES, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchMovies(query, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_MOVIES, true);\r\n        Requests.searchMovies(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска фильмов\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_MOVIES,\r\n                    movies: result.results, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_MOVIES, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchShows(query, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_SHOWS, true);\r\n        Requests.searchShows(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска сериалов\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_SHOWS,\r\n                    shows: result.results, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_SHOWS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setMovieStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setMovieStatus(localStorage.getItem('token'), selectors.getContentMovie(getState()).tmdb.id, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    /*dispatch({\r\n                        type: actionTypes.SET_CONTENT_MOVIE_USERINFO,\r\n                        user_info: result\r\n                    });*/\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function setShowStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setShowStatus(localStorage.getItem('token'), selectors.getContentShow(getState()).tmdb.id, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    /*dispatch({\r\n                        type: actionTypes.SET_CONTENT_SHOW_USERINFO,\r\n                        user_info: result\r\n                    });*/\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function setShowSeasonStatus(user_info, showID, seasonNumber){\r\n    return async(dispatch) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setShowSeasonStatus(localStorage.getItem('token'), showID, seasonNumber, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    /*dispatch({\r\n                        type: actionTypes.SET_CONTENT_SHOW_USERINFO,\r\n                        user_info: result\r\n                    });*/\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function setShowEpisodesStatus(episodesList, showID, needUpdate=false){\r\n    return async(dispatch) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setShowEpisodesStatus(localStorage.getItem('token'), showID, episodesList).then((result) => {\r\n                if (result.status !== 204 & result.status !== 200 & result.status !== 201){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }else{\r\n                    if (needUpdate){\r\n                        let seasons = [];\r\n                        for (let episode in episodesList.episodes)\r\n                            if ( seasons.indexOf(episodesList.episodes[episode].season_number) === -1  )\r\n                                seasons.push(episodesList.episodes[episode].season_number);\r\n\r\n                        for (let season in seasons)\r\n                            dispatch(requestShowSeasonsUserInfo(showID, seasons[season]));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function searchUsers(query){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_USERS, true);\r\n        Requests.searchUsers(query).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_USERS,\r\n                    users: result, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_USERS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setUserStatus(is_following, userID){\r\n    return async(dispatch) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setUserStatus(localStorage.getItem('token'), is_following, userID).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_USER_PAGE_FOLLOWING,\r\n                        is_following: result.is_following\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function resetPassword(email){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.RESET_PASSWORD_ERROR,\r\n            error: false\r\n        });\r\n        auth.resetPassword(email).then((result) => {\r\n            if (result.status !== 200){\r\n                dispatch({\r\n                    type: actionTypes.RESET_PASSWORD_ERROR,\r\n                    error: result.data.error\r\n                });\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.RESET_PASSWORD_ERROR,\r\n                    error: 'ok'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function confirmPassword(token, password){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n            error: false\r\n        });\r\n        auth.confirmPassword(token, password).then((result) => {\r\n            if (result.status !== 200){\r\n                dispatch({\r\n                    type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n                    error: result.data.error?result.data.error:'Неизвестная ошибка'\r\n                });\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n                    error: 'ok'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function setUser(user) {\r\n    return({ type: actionTypes.SET_USER, user: user });\r\n}\r\n\r\nexport function openLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: false  });\r\n}\r\n\r\nexport function openRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: false  });\r\n}\r\n\r\nexport function openResetPasswordForm() {\r\n    return({ type: actionTypes.SET_RESET_PASSWORD_FORM, isOpen: true  });\r\n}\r\n\r\nexport function closeResetPasswordForm() {\r\n    return({ type: actionTypes.SET_RESET_PASSWORD_FORM, isOpen: false  });\r\n}\r\n\r\nfunction setLoading(dispatch, type, isLoading){\r\n    dispatch({\r\n        type: type,\r\n        isLoading: isLoading\r\n    });\r\n}\r\n\r\nfunction setError(dispatch, type, isError){\r\n    dispatch({\r\n        type: type,\r\n        error: isError\r\n    });\r\n}","import React from \"react\";\r\nimport './style.css';\r\n\r\nfunction StatusButtonGroup( {statuses, activeColor, onChangeStatus, userStatus} ) {\r\n\r\n    return(\r\n        <div>\r\n            {statuses.map((status) => <button className={'contentStatuses'} \r\n                                            key={status}\r\n                                            style={{backgroundColor: (userStatus === status?activeColor:'#000000')}}\r\n                                            onClick={()=>{  onChangeStatus(status); }}>\r\n                                            {status}\r\n                                        </button>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default StatusButtonGroup;\r\n","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction FriendsActivityRow ( {info} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n        <div className=\"fActivityBlock\">\r\n            <h5 className='fActivityUser'>\r\n                <a href={window.location.origin + '/user/' + info.user.id} \r\n                        onClick={(e) => { history.push('/user/' + info.user.id); e.preventDefault();}}\r\n                    >\r\n                    {info.user.username}\r\n                </a>\r\n            </h5>\r\n            <div className='fActivityInfo'>\r\n                <Rating stop={10}\r\n                                    emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\"/>}\r\n                                    fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" title={n}/>)}\r\n                                    initialRating={info.score}\r\n                                    className=\"fActivityInfoText\"\r\n                                    readonly={true}\r\n                        />\r\n                <p className=\"fActivityInfoText\">Статус: {info.status} </p>\r\n                <p className=\"fActivityInfoText\" hidden={!(info.spent_time)}>Время проходения: {info.spent_time} {intToHours(info.spent_time)}</p>\r\n                <p className=\"fActivityInfoText\" hidden={info.review===\"\"}>Отзыв: {info.review}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction intToHours(number){\r\n    if (11 <= number && number <= 14)\r\n        return 'часов'\r\n    else if (number % 10 === 1)\r\n        return 'час'\r\n    else if (2 <= number % 10 && number % 10 <= 4)\r\n        return 'часа'\r\n    else\r\n        return 'часов'\r\n}\r\n\r\nexport default FriendsActivityRow;","import React from \"react\";\r\nimport FriendsActivityRow from './FriendsActivityRow';\r\n\r\nfunction FriendsActivity ( {info} ) {\r\n    \r\n    return(\r\n        <div className=\"friendsBlock\">\r\n            { (typeof info !== 'undefined')?info?.map((friendInfo) => <FriendsActivityRow info={friendInfo} key={friendInfo.user.id}/>):'' }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FriendsActivity;","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport './style.css';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction GamePage ( {requestGame, openLoginForm, setGameStatus, requestGameUserInfo,\r\n        loggedIn, game, gameIsLoading,  gameUserInfo, gameUserInfoIsLoading\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [spentTime, setSpentTime] = useState(0);\r\n    const [userStatus, setUserStatus] = useState('Не играл');\r\n    const [userRate, setUserRate] = useState(0);\r\n    const [developers, setDevelopers] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [hltbInfo, setHtlbInfo] = useState({gameplay_main_extra: -1, gameplay_main: -1, gameplay_comletionist: -1});\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            setReview('');\r\n            setSpentTime(0);\r\n            setUserStatus('Не играл');\r\n            setUserRate(0);\r\n            requestGame(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestGame]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestGameUserInfo(id);\r\n            else{\r\n                setReview('');\r\n                setSpentTime('0');\r\n                setUserStatus('Не играл');\r\n                setUserRate(0);\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, loggedIn]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            if (game.rawg.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < game.rawg.genres.length; i++){\r\n                    newGenres += game.rawg.genres[i].name;\r\n                    if (i !== game.rawg.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                 setGenres(newGenres);   \r\n            }\r\n\r\n            if (game.rawg.metacritic){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{game.rawg.metacritic}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">Metascore</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (game.hltb){\r\n                setHtlbInfo(game.hltb);\r\n            }else if (game.rawg.playtime){\r\n                setHtlbInfo({gameplay_main_extra: game.rawg.playtime, gameplay_main: -1, gameplay_completionist: -1});\r\n            }\r\n\r\n            if (game.rawg.developers){\r\n                let newDevelopers = \"\"\r\n                for (let i = 0; i < game.rawg.developers.length; i++){\r\n                    newDevelopers += game.rawg.developers[i].name;\r\n                    if (i !== game.rawg.developers.length - 1)\r\n                    newDevelopers += \", \";\r\n                }\r\n                setDevelopers(newDevelopers);   \r\n            }\r\n\r\n            if (game.rawg.released){\r\n                let mas = game.rawg.released.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }\r\n\r\n            document.title = game.rawg.name;\r\n\t\t},\r\n\t\t[game]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (gameUserInfo?.status){\r\n                setReview(gameUserInfo.review);\r\n                setSpentTime(gameUserInfo.spent_time);\r\n                setUserStatus(gameUserInfo.status);\r\n                setUserRate(gameUserInfo.score);\r\n            }else{\r\n                setReview('');\r\n                setSpentTime(0);\r\n                setUserStatus('Не играл');\r\n                setUserRate(0);\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[gameUserInfo]\r\n    );\r\n    \r\n    function setClear(){\r\n        setGenres(\"\");\r\n        setMetascoreBlock(\"\");\r\n        setHtlbInfo({gameplay_main_extra: -1, gameplay_main: -1, gameplay_completionist: -1});\r\n        setDevelopers(\"\");\r\n        setDate(\"\");\r\n    }\r\n\r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${game.rawg.background_image_additional?game.rawg.background_image_additional:game.rawg.background_image})`}}/>\r\n                <LoadingOverlay\r\n                    active={gameIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"gameContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"gameContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\" className=\"posterBlock\">\r\n                                        <img src={game.rawg.background_image} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{game.rawg.name}</h1>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p>Разработчики: {developers}</p>\r\n                                            <p>Дата релиза: {date}</p>\r\n                                            <p>Жанр: {genres}</p>\r\n                                            <p style={{display: \"inline\"}} >Время прохождения: </p>\r\n                                            <div hidden={hltbInfo.gameplay_main < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"light-green-text\" title={\"Главный сюжет\"}/><span className=\"hs\"/>{hltbInfo.gameplay_main} {hltbInfo.gameplay_main_unit}<span className=\"hs\"/>\r\n                                            </div> <p style={{display: \"inline\"}} > </p>\r\n                                            <div hidden={hltbInfo.gameplay_main_extra < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"yellow-text\" title={\"Главный сюжет + побочные задания\"}/><span className=\"hs\"/>{hltbInfo.gameplay_main_extra} {hltbInfo.gameplay_main_extra_unit}<span className=\"hs\"/> \r\n                                            </div> <p style={{display: \"inline\"}} > </p>\r\n                                            <div hidden={hltbInfo.gameplay_completionist < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"red-text\" title={\"Полное прохождение\"}/><span className=\"hs\"/>{hltbInfo.gameplay_completionist} {hltbInfo.gameplay_completionist_unit}\r\n                                            </div>\r\n                                        </div>\r\n                                        <LoadingOverlay active={gameUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                            <Rating stop={10}\r\n                                                emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                                fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                                initialRating={userRate}\r\n                                                readonly={!loggedIn | userStatus==='Не играл'}\r\n                                                onChange={(score) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setUserRate(score);\r\n                                                        setGameStatus({score: score});\r\n                                                    }}\r\n                                                }\r\n                                                style={{marginBottom: \"10px\"}}\r\n                                            /> <br/>\r\n                                            <StatusButtonGroup\r\n                                                statuses={['Не играл', 'Буду играть', 'Играю', 'Дропнул', 'Прошел']}\r\n                                                activeColor='#4527a0' \r\n                                                userStatus={userStatus}\r\n                                                onChangeStatus={(status) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setUserStatus(status);\r\n                                                        setGameStatus( { status: status } ); \r\n                                                        if (status === 'Не играл'){\r\n                                                            setReview('');\r\n                                                            setUserRate(0);\r\n                                                       }\r\n                                                    }\r\n                                                }}\r\n                                                />\r\n                                        </LoadingOverlay>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"gameContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: game.rawg.description}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"20px\"}} hidden={!loggedIn}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        <LoadingOverlay active={gameUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                            <MDBInput \r\n                                                type=\"textarea\" \r\n                                                id=\"reviewInput\"\r\n                                                label=\"Ваш отзыв\" \r\n                                                value={review}\r\n                                                onChange={(event) =>setReview(event.target.value)}\r\n                                                outline\r\n                                            />\r\n                                            <MDBInput\r\n                                                type=\"number\"\r\n                                                id=\"spentTimeInput\"\r\n                                                label=\"Время прохождения (часы)\" \r\n                                                value={spentTime}\r\n                                                onChange={(event) =>setSpentTime(event.target.value)}\r\n                                            />\r\n                                            <button \r\n                                                className={'savePreviewButton'} \r\n                                                disabled={!loggedIn | userStatus==='Не играл'}\r\n                                                onClick={() => {\r\n                                                        if (!loggedIn){\r\n                                                            openLoginForm();\r\n                                                        }else{\r\n                                                            setGameStatus({   review: document.getElementById('reviewInput').value, spent_time: document.getElementById('spentTimeInput').value });\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                >\r\n                                                Сохранить\r\n                                            </button>\r\n                                        </LoadingOverlay>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBContainer>\r\n                            <div className=\"gameFriendsBlock\" hidden={!loggedIn | gameUserInfo?.friends_info?.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={gameUserInfo?.friends_info}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getGameRequestError(state),\r\n    game: selectors.getContentGame(state),\r\n    gameIsLoading: selectors.getIsLoadingContentGame(state),\r\n    gameUserInfo: selectors.getContentGameUserInfo(state),\r\n    gameUserInfoIsLoading: selectors.getIsLoadingContentGameUserInfo(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestGame: (id) => {\r\n            dispatch(actions.requestGame(id));\r\n        },\r\n        requestGameUserInfo: (slug) => {\r\n            dispatch(actions.requestGameUserInfo(slug));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        setGameStatus: (status) => {\r\n            dispatch(actions.setGameStatus(status));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction MoviePage ( {\r\n        requestMovie, movie, movieIsLoading, setMovieStatus,\r\n        requestMovieUserInfo, movieUserInfo, movieUserInfoIsLoading,\r\n        loggedIn, openLoginForm, \r\n    } ) {\r\n    let { id } = useParams();\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [companies, setCompanies] = useState(\"\");\r\n    const [cast, setCast] = useState(\"\");\r\n    const [director, setDirector] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [userStatus, setUserStatus] = useState('Не смотрел');\r\n    const [userRate, setUserRate] = useState(0);\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            setReview('');\r\n            setUserStatus('Не смотрел');\r\n            setUserRate(0);\r\n            requestMovie(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestMovie]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestMovieUserInfo(id);\r\n            else{\r\n                setReview('');\r\n                setUserRate(0);\r\n                setUserStatus('Не смотрел');\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn, id]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            if (movie.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{movie.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (movie.tmdb.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < movie.tmdb.genres.length; i++){\r\n                    newGenres += movie.tmdb.genres[i].name;\r\n                    if (i !== movie.tmdb.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                setGenres(newGenres);   \r\n            }\r\n\r\n            if (movie.tmdb.production_companies){\r\n                let newCompanies = \"\"\r\n                for (let i = 0; i < movie.tmdb.production_companies.length; i++){\r\n                    newCompanies += movie.tmdb.production_companies[i].name;\r\n                    if (i !== movie.tmdb.production_companies.length - 1)\r\n                        newCompanies += \", \";\r\n                }\r\n                setCompanies(newCompanies);   \r\n            }\r\n\r\n            if (movie.tmdb.cast){\r\n                let newCast = \"\";\r\n                let length = movie.tmdb.cast.length>5?5:movie.tmdb.cast.length;\r\n                for (let i = 0; i < length; i++){\r\n                    newCast += movie.tmdb.cast[i].name;\r\n                    if (i !== length - 1)\r\n                        newCast += \", \";\r\n                }\r\n                setCast(newCast);   \r\n            }\r\n\r\n            if (movie.tmdb.crew){\r\n                let newDirector = \"\"\r\n                for (let i = 0; i < movie.tmdb.crew.length; i++){\r\n                    if (movie.tmdb.crew[i].job === \"Director\"){\r\n                        newDirector = movie.tmdb.crew[i].name;\r\n                        break;\r\n                    }\r\n                }\r\n                setDirector(newDirector);   \r\n            }\r\n\r\n            document.title = movie.tmdb.title;\r\n\t\t},\r\n\t\t[movie]\r\n    );\r\n    \r\n    useEffect(\r\n\t\t() => {\r\n            if (movieUserInfo?.status){\r\n                setReview(movieUserInfo.review);\r\n                setUserStatus(movieUserInfo.status);\r\n                setUserRate(movieUserInfo.score);\r\n            }else{\r\n                setReview('');\r\n                setUserRate(0);\r\n                setUserStatus('Не смотрел');\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[movieUserInfo]\r\n    );\r\n    \r\n    function setClear(){\r\n        setDirector('');\r\n        setCast('');\r\n        setCompanies('');\r\n        setGenres('');\r\n        setMetascoreBlock('');\r\n    }\r\n\r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + movie.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={movieIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"movieContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"movieContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"4\" className=\"posterBlock\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"7\">\r\n                                        <h1>{movie.tmdb.title}</h1>\r\n                                        <h5 style={{marginBottom: \"10px\", marginTop: \"-10px\"}}>{movie.tmdb.original_title}</h5>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p>Дата релиза: {movie.tmdb.release_date}</p>\r\n                                            <p>Продолжительность (мин): {movie.tmdb.runtime}</p>\r\n                                            <p>Жанр: {genres}</p>\r\n                                            <p>Компания: {companies}</p>\r\n                                            <p>Слоган: {movie.tmdb.tagline}</p>\r\n                                            <p>В ролях: {cast}</p>\r\n                                            <p>Режиссер: {director}</p>\r\n                                        </div>\r\n                                        <LoadingOverlay active={movieUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                            <Rating stop={10}\r\n                                                emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                                fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                                initialRating={userRate}\r\n                                                readonly={!loggedIn | userStatus==='Не смотрел'}\r\n                                                onChange={(score) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setUserRate(score);\r\n                                                        setMovieStatus({score: score });\r\n                                                    }}\r\n                                                }\r\n                                            /> <br/>\r\n                                            <StatusButtonGroup\r\n                                                statuses={['Не смотрел', 'Буду смотреть', 'Дропнул', 'Посмотрел']}\r\n                                                activeColor='#4527a0' \r\n                                                userStatus={userStatus}\r\n                                                onChangeStatus={(status) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setUserStatus(status);\r\n                                                    setMovieStatus({ status: status }); \r\n                                                    if (status === 'Не смотрел'){\r\n                                                            setReview('');\r\n                                                            setUserRate(0);\r\n                                                    }\r\n                                                    }\r\n                                                }}/>\r\n                                        </LoadingOverlay>\r\n                                        \r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"movieContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: movie.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"10px\"}} hidden={!loggedIn}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        <LoadingOverlay active={movieUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                            <MDBInput \r\n                                                type=\"textarea\" \r\n                                                id=\"reviewInput\"\r\n                                                label=\"Ваш отзыв\" \r\n                                                value={review}\r\n                                                onChange={(event) =>setReview(event.target.value)}\r\n                                                outline\r\n                                            />\r\n                                            <button \r\n                                                className={'savePreviewButton'} \r\n                                                disabled={!loggedIn | userStatus==='Не смотрел'}\r\n                                                onClick={() => {\r\n                                                        if (!loggedIn){\r\n                                                            openLoginForm();\r\n                                                        }else{\r\n                                                            setMovieStatus({   review: document.getElementById('reviewInput').value });\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                >\r\n                                                Сохранить\r\n                                            </button>\r\n                                        </LoadingOverlay>\r\n                                    </MDBCol>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={!loggedIn | movieUserInfo?.friends_info?.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={movieUserInfo?.friends_info}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getMovieRequestError(state),\r\n    movie: selectors.getContentMovie(state),\r\n    movieIsLoading: selectors.getIsLoadingContentMovie(state),\r\n    movieUserInfo: selectors.getContentMovieUserInfo(state),\r\n    movieUserInfoIsLoading: selectors.getIsLoadingContentMovieUserInfo(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestMovie: (id) => {\r\n            dispatch(actions.requestMovie(id));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        setMovieStatus: (status) => {\r\n            dispatch(actions.setMovieStatus(status));\r\n        },\r\n        requestMovieUserInfo: (id) => {\r\n            dispatch(actions.requestMovieUserInfo(id));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviePage);\r\n","import React, { useEffect, useState} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './style.css';\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction DetailedEpisodeRow ( {episode, showID, setShowEpisodeUserStatus, loggedIn, userInfo, onChangeStatus, checkAll} ) {\r\n    let history = useHistory();\r\n    const [userRate, setUserRate] = useState(0);\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    useEffect(() =>{\r\n            setUserRate(userInfo?.score);\r\n            setIsChecked(userInfo?.score > -1);\r\n        },\r\n        [userInfo]\r\n    );\r\n\r\n    useEffect(() =>{\r\n        if (checkAll === -1){\r\n            setIsChecked(false);\r\n            onChangeStatus({\r\n                addEpisode: false !== (userRate > -1),\r\n                episode: {\r\n                    season_number: episode.season_number,\r\n                    episode_number: episode.episode_number,\r\n                    score: -1\r\n                } \r\n            });\r\n        }else if (checkAll === 1){\r\n            setIsChecked(true);\r\n            onChangeStatus({\r\n                addEpisode: true !== (userRate > -1),\r\n                episode: {\r\n                    season_number: episode.season_number,\r\n                    episode_number: episode.episode_number,\r\n                    score: 0\r\n                } \r\n            });\r\n        }\r\n        \r\n    },\r\n    [checkAll]\r\n);\r\n\r\n    function parseDate(date){\r\n        let newDate = new Date(date);\r\n        return newDate.toLocaleDateString(\"ru-RU\");\r\n    }\r\n\r\n    return(\r\n        <div className=\"episodeRow detailRow\">\r\n            <div className=\"episodeRowRate\" hidden={!loggedIn || typeof onChangeStatus==='undefined'}>\r\n                <input type=\"checkbox\" checked={isChecked} onChange={\r\n                    (res) => {\r\n                        setIsChecked(res.target.checked); \r\n                        onChangeStatus({\r\n                            addEpisode: res.target.checked !== (userRate > -1),\r\n                            episode: {\r\n                                season_number: episode.season_number,\r\n                                episode_number: episode.episode_number,\r\n                                score:  res.target.checked?0:-1\r\n                            } \r\n                        });\r\n                }}/>\r\n            </div>\r\n            <p className=\"episodeDate\">{parseDate(episode.air_date)}</p>\r\n            <a className=\"episodeRowName episodeLink detailRow\" \r\n                href={window.location.origin + '/show/' + showID + '/season/' + episode.season_number + '/episode/'+ episode.episode_number} \r\n                onClick={(e) => { history.push('/show/' + showID + '/season/' + episode.season_number + '/episode/'+ episode.episode_number); e.preventDefault();}}\r\n                >\r\n                Серия {episode.episode_number} - {episode.name}\r\n            </a>\r\n            <div hidden={!loggedIn} className=\"episodeRowRate\"> \r\n                <Rating start={-1} stop={10}\r\n                    emptySymbol={[<MDBIcon icon=\"eye-slash\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon far icon=\"star\" size=\"1x\" />))}\r\n                    fullSymbol={[<MDBIcon icon=\"eye\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\"title={n}/>))}\r\n                    readonly={!loggedIn}\r\n                    initialRating={userRate}\r\n                    onChange={(score) => {\r\n                            setUserRate(score);\r\n                            setIsChecked(score > -1);\r\n                            /*if (typeof onChangeStatus!=='undefined')\r\n                                onChangeStatus({\r\n                                    addEpisode: (score>-1) !== (userRate > -1),\r\n                                    episode: {\r\n                                        season_number: episode.season_number,\r\n                                        episode_number: episode.episode_number,\r\n                                        score: (score>-1)?0:-1\r\n                                    } \r\n                                });*/\r\n                            setShowEpisodeUserStatus({episodes: [ {\r\n                                    season_number: episode.season_number,\r\n                                    episode_number: episode.episode_number,\r\n                                    score: score\r\n                                }]},\r\n                                showID);\r\n                        }\r\n                    }\r\n                />\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailedEpisodeRow;","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport './style.css';\r\nimport { connect } from 'react-redux'; \r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport DetailedEpisodeRow from \"./DetailedEpisodeRow\";\r\n\r\nfunction SeasonBlock ( {showID, seasonNumber, loggedIn, \r\n        showSeason, showSeasonIsLoading, showUserInfo, \r\n        requestShowSeason, requestShowSeasonUserInfo, setShowEpisodeUserStatus, onChangeStatus} ) {\r\n    let history = useHistory();\r\n    const [isChecked, setIsChecked] = useState(0);\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setIsChecked(0);\r\n            requestShowSeason(showID, seasonNumber);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[showID, seasonNumber, requestShowSeason]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setIsChecked(0);\r\n            if (loggedIn)\r\n                requestShowSeasonUserInfo(showID, seasonNumber);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn, showID, seasonNumber]\r\n    );\r\n\r\n    function getEpisodeByNumber(episodes, number){\r\n        for (let episode in episodes)\r\n            if (episodes[episode].episode_number === number)\r\n                return episodes[episode];\r\n    }\r\n\r\n    return(\r\n        <LoadingOverlay active={showSeasonIsLoading} spinner text='Загрузка...' >\r\n        <div key={showSeason?.tmdb?.id} className=\"seasonBlock\">\r\n            <div className='seasonName'>\r\n                <a href={window.location.origin + '/show/' + showID + '/season/' + seasonNumber} \r\n                    onClick={(e) => { history.push('/show/' + showID + '/season/' + seasonNumber); e.preventDefault();}}\r\n                >\r\n                    <h5 > {showSeason?.tmdb?.name} </h5>\r\n                </a>\r\n            </div>\r\n            <details open={false} className='episodeRows'>\r\n                <summary>Развернуть</summary>\r\n                    <div style={{marginLeft: '5px'}} hidden={!loggedIn}>\r\n                        Выбрать все&nbsp;\r\n                        <input type=\"checkbox\" checked={isChecked > 0} onChange={ (res) => { setIsChecked(res.target.checked?1:-1); }}  />\r\n                    </div>\r\n                    <ul>\r\n                    {  showSeason?.tmdb?.episodes?.map((episode, counter) => <li className=\"episode\" key={counter}>\r\n                            <DetailedEpisodeRow episode={episode} showID={showID} loggedIn={loggedIn}\r\n                                userInfo={getEpisodeByNumber(showUserInfo?.episodes, episode?.episode_number)} \r\n                                setShowEpisodeUserStatus={setShowEpisodeUserStatus}\r\n                                onChangeStatus={(status) => onChangeStatus(status)}\r\n                                checkAll={isChecked}\r\n                                />\r\n                        </li>) }\r\n                    </ul>\r\n            </details>\r\n            \r\n        </div>\r\n        </LoadingOverlay>\r\n        \r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    showSeason: selectors.getContentShowSeasons(state, ownProps.seasonNumber),\r\n    showSeasonIsLoading: selectors.getIsLoadingContentShowSeasons(state, ownProps.seasonNumber),\r\n    showUserInfo: selectors.getContentShowSeasonsUserInfo(state, ownProps.seasonNumber)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestShowSeason: (showID, seasonNumber) => {\r\n            dispatch(actions.requestShowSeasons(showID, seasonNumber));\r\n        },\r\n        requestShowSeasonUserInfo: (showID, seasonNumber) => {\r\n            dispatch(actions.requestShowSeasonsUserInfo(showID, seasonNumber));\r\n        },\r\n        setShowEpisodeUserStatus: (status, showID) => {\r\n            dispatch(actions.setShowEpisodesStatus(status, showID));\r\n        },\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SeasonBlock);","import React, { useState} from \"react\";\r\nimport './style.css';\r\nimport SeasonBlock from './SeasonBlock';\r\n\r\nfunction SeasonsBlock ( {showID, seasons, setShowEpisodeUserStatus} ) {\r\n    const [needHeader, setNeedHeader] = useState(false);\r\n    const [changedEpisodes, setChangedEpisodes] = useState([]);\r\n\r\n    function updateEpisodes(episode){\r\n        let newChangedEpisodes = changedEpisodes;\r\n        if (episode.addEpisode)\r\n            newChangedEpisodes.push(episode.episode);\r\n        else{\r\n            const index = newChangedEpisodes.findIndex((i => i.episode_number === episode.episode.episode_number && i.season_number === episode.episode.season_number));\r\n            if (index > -1)\r\n                newChangedEpisodes.splice(index, 1);\r\n        }\r\n        setNeedHeader(newChangedEpisodes.length > 0);\r\n        setChangedEpisodes(newChangedEpisodes);\r\n        console.log(newChangedEpisodes);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            { \r\n                seasons?.map((season) => \r\n                    <SeasonBlock showID={showID} seasonNumber={season.season_number}\r\n                        onChangeEpisodes={(episodes) => {console.log(episodes)}} key={season.season_number}\r\n                        onChangeStatus={(status) => updateEpisodes(status)}/>\r\n                )  \r\n            } \r\n            <div className=\"saveEpisodesHeader\" hidden={!needHeader}>\r\n                <button className=\"saveEpisodesButton\"\r\n                    onClick={() =>  { \r\n                        setShowEpisodeUserStatus({episodes: changedEpisodes},  showID);\r\n                        setNeedHeader(false);\r\n                        }}>\r\n                    Сохранить\r\n                </button>\r\n            </div>\r\n        </div>  \r\n    )\r\n}\r\n\r\n\r\nexport default SeasonsBlock;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\nimport SeasonsBlock from \"./SeasonsBlock\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ShowPage ( {requestShow, show, showIsLoading, setShowUserStatus, setShowEpisodeUserStatus,\r\n                    requestShowUserInfo, showUserInfo, showUserInfoIsLoading,\r\n                    loggedIn, openLoginForm\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [companies, setCompanies] = useState(\"\");\r\n    const [showStatus, setShowStatus] = useState(\"\");\r\n    const [firstDate, setFirstDate] = useState(\"\");\r\n    const [lastDate, setLastDate] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [userStatus, setUserStatus] = useState('Не смотрел');\r\n    const [userRate, setUserRate] = useState(0);\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            setReview('');\r\n            setUserStatus('Не смотрел');\r\n            setUserRate(0);\r\n            requestShow(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestShow]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestShowUserInfo(id);\r\n            else{\r\n                setReview('');\r\n                setUserRate(0);\r\n                setUserStatus('Не смотрел');\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn, id]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            if (show.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{show.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (show.tmdb.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < show.tmdb.genres.length; i++){\r\n                    newGenres += show.tmdb.genres[i].name;\r\n                    if (i !== show.tmdb.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                setGenres(newGenres);   \r\n            }\r\n\r\n            if (show.tmdb.production_companies){\r\n                let newCompanies = \"\"\r\n                for (let i = 0; i < show.tmdb.production_companies.length; i++){\r\n                    newCompanies += show.tmdb.production_companies[i].name;\r\n                    if (i !== show.tmdb.production_companies.length - 1)\r\n                        newCompanies += \", \";\r\n                }\r\n                setCompanies(newCompanies);   \r\n            }\r\n\r\n            switch (show.tmdb.status){\r\n                case 'Ended':\r\n                    setShowStatus('Окончен');break;\r\n                case 'Returning Series':\r\n                    setShowStatus('Продолжается');break;\r\n                case 'Pilot':\r\n                    setShowStatus('Пилот');break;\r\n                case 'Canceled':\r\n                    setShowStatus('Отменен');break;\r\n                case 'In Production':\r\n                    setShowStatus('В производстве');break;\r\n                case 'Planned':\r\n                    setShowStatus('Запланирован');break;\r\n                default:\r\n                    setShowStatus(show.tmdb.status);\r\n            } \r\n\r\n            if (show.tmdb.first_air_date){\r\n                let mas = show.tmdb.first_air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setFirstDate(newDate);\r\n            }\r\n\r\n            if (show.tmdb.last_air_date){\r\n                let mas = show.tmdb.last_air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setLastDate(newDate);\r\n            }\r\n\r\n            document.title = show.tmdb.name;\r\n\t\t},\r\n\t\t[show]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (showUserInfo?.status){\r\n                setReview(showUserInfo.review);\r\n                setUserStatus(showUserInfo.status);\r\n                setUserRate(showUserInfo.score);\r\n            }else{\r\n                setReview('');\r\n                setUserRate(0);\r\n                setUserStatus('Не смотрел');\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[showUserInfo]\r\n    );\r\n    \r\n    function setClear(){\r\n        setLastDate('');\r\n        setFirstDate('');\r\n        setShowStatus('');\r\n        setCompanies('');\r\n        setGenres(''); \r\n        setMetascoreBlock('');\r\n    }\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + show.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay active={showIsLoading} spinner text='Загрузка...' >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"showContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"showContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\" className=\"posterBlock\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + show.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{show.tmdb.name}</h1>\r\n                                        <h5 style={{marginBottom: \"10px\", marginTop: \"-10px\"}}>{show.tmdb.original_name}</h5>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p>Жанр: {genres}</p>\r\n                                            <p>Компания: {companies}</p>\r\n                                            <p hidden={firstDate===''}>Дата выхода первой серии: {firstDate}</p>\r\n                                            <p hidden={lastDate===''}>Дата выхода последней серии: {lastDate}</p>\r\n                                            <p hidden={show.tmdb.episode_run_time?false:true}>Продолжительность (мин): {show.tmdb.episode_run_time?show.tmdb.episode_run_time[0]:0}</p>\r\n                                            <p>Количество сезонов: {show.tmdb.number_of_seasons}</p>\r\n                                            <p>Количество серий: {show.tmdb.number_of_episodes}</p>\r\n                                            <p>Статус: {showStatus}</p>\r\n                                        </div>\r\n                                        <LoadingOverlay active={showUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                            <Rating stop={10}\r\n                                                emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                                fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                                initialRating={userRate}\r\n                                                readonly={!loggedIn | userStatus==='Не смотрел'}\r\n                                                onChange={(score) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm(); \r\n                                                    }else{\r\n                                                        setUserRate(score);\r\n                                                        setShowUserStatus({score: score });\r\n                                                    }}\r\n                                                }\r\n                                            /> <br/>\r\n                                            <StatusButtonGroup loggedIn={loggedIn} \r\n                                                statuses={['Не смотрел', 'Буду смотреть', 'Смотрю', 'Дропнул', 'Посмотрел']}\r\n                                                activeColor='#4527a0' \r\n                                                userStatus={userStatus}\r\n                                                onChangeStatus={(status) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setUserStatus(status);\r\n                                                        setShowUserStatus({ status: status });\r\n                                                        if (status === 'Не смотрел'){\r\n                                                            setReview('');\r\n                                                            setUserRate(0);\r\n                                                    }\r\n                                                    }\r\n                                                }}/>\r\n                                        </LoadingOverlay>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"showContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: show.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <div className=\"showContentBody\"> \r\n                                    <h3 style={{paddingTop: \"15px\"}}>Список серий</h3>\r\n                                    <SeasonsBlock showID={show.tmdb.id} seasons={show.tmdb.seasons} \r\n                                        setShowEpisodeUserStatus={setShowEpisodeUserStatus}/>\r\n                                </div>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"10px\"}} hidden={!loggedIn}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                    <LoadingOverlay active={showUserInfoIsLoading} spinner text='Загрузка...'>   \r\n                                        <MDBInput \r\n                                            type=\"textarea\" \r\n                                            id=\"reviewInput\"\r\n                                            label=\"Ваш отзыв\" \r\n                                            value={review}\r\n                                            onChange={(event) =>setReview(event.target.value)}\r\n                                            outline\r\n                                        />\r\n                                        <button \r\n                                            className={'savePreviewButton'} \r\n                                            disabled={!loggedIn | userStatus==='Не смотрел'}\r\n                                            onClick={() => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setShowUserStatus({ review: document.getElementById('reviewInput').value });\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            >\r\n                                            Сохранить\r\n                                        </button>\r\n                                    </LoadingOverlay>\r\n                                </MDBCol>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={showUserInfo.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={showUserInfo.friends_info}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getShowRequestError(state),\r\n    show: selectors.getContentShow(state),\r\n    showIsLoading: selectors.getIsLoadingContentShow(state),\r\n    showUserInfo: selectors.getContentShowUserInfo(state),\r\n    showUserInfoIsLoading: selectors.getIsLoadingContentShowUserInfo(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestShow: (id) => {\r\n            dispatch(actions.requestShow(id));\r\n        },\r\n        setShowUserStatus: (status) => {\r\n            dispatch(actions.setShowStatus(status));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        requestShowUserInfo: (id) => {\r\n            dispatch(actions.requestShowUserInfo(id));\r\n        },\r\n        setShowEpisodeUserStatus: (status, showID) => {\r\n            dispatch(actions.setShowEpisodesStatus(status, showID, true));\r\n        },\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowPage);\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport {\r\n    AreaChart , linearGradient, XAxis, Tooltip, YAxis, Area  \r\n  } from 'recharts';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\nimport DetailedEpisodeRow from \"./DetailedEpisodeRow\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ShowPage ( {requestShowSeason, showSeason, showSeasonIsLoading, setShowUserStatus, \r\n                    setShowEpisodeUserStatus,\r\n                    requestShowSeasonUserInfo, showUserInfo, showUserInfoIsLoading,\r\n                    loggedIn, openLoginForm\r\n    } ) {\r\n    let history = useHistory();\r\n    let { show_id, number } = useParams();\r\n    const [date, setDate] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [userRate, setUserRate] = useState(0);\r\n    const [chartData, setChartData] = useState([]);\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            setReview('');\r\n            setUserRate(0);\r\n            requestShowSeason(show_id, number);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[show_id, number, requestShowSeason]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestShowSeasonUserInfo(show_id, number);\r\n            else{\r\n                setReview('');\r\n                setUserRate(0);\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn, show_id, number]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            if (showSeason.tmdb.air_date){\r\n                let mas = showSeason.tmdb.air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }\r\n                \r\n            document.title = showSeason.tmdb.show_name + ' - ' + showSeason.tmdb.name;\r\n\t\t},\r\n\t\t[showSeason]\r\n    );\r\n    \r\n    useEffect(\r\n\t\t() => {\r\n            setChartData([]);\r\n            if (showSeason.tmdb.episodes)\r\n            if (showSeason.tmdb.episodes.length > 0){\r\n                let newData = [];\r\n                for (let episode in showSeason.tmdb.episodes){\r\n                    if (showSeason.tmdb.episodes[episode].vote_average > 0)\r\n                        newData.push({ \"name\": 'Ep ' + showSeason.tmdb.episodes[episode].episode_number,  \"Оценка\": showSeason.tmdb.episodes[episode].vote_average });\r\n                }\r\n                setChartData(newData);\r\n            }\r\n\t\t},\r\n\t\t[showSeason]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (showUserInfo?.review)\r\n                setReview(showUserInfo.review);\r\n            else\r\n                setReview('');\r\n\r\n            if (showUserInfo?.score)\r\n                setUserRate(showUserInfo.score);\r\n            else\r\n                setUserRate(0);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[showUserInfo]\r\n    );\r\n    \r\n    function setClear(){\r\n        setDate(\"\");\r\n    }\r\n\r\n    function getEpisodeByNumber(episodes, number){\r\n        for (let episode in episodes)\r\n            if (episodes[episode].episode_number === number)\r\n                return episodes[episode];\r\n    }\r\n\r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + showSeason.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={showSeasonIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"showContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"showContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"3\" className=\"posterBlock\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + showSeason.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"9\">\r\n                                        <h1>\r\n                                            <a href={window.location.origin + '/show/' + show_id} \r\n                                                onClick={(e) => { history.push('/show/' + show_id ); e.preventDefault();}}\r\n                                                >\r\n                                                {showSeason.tmdb.show_name}\r\n                                            </a>  \r\n                                            { ' - ' + showSeason.tmdb.name}\r\n                                        </h1>\r\n                                        <h5 style={{marginBottom: \"10px\", marginTop: \"-10px\"}}>{showSeason.tmdb.show_original_name + ' - Season ' + showSeason.tmdb.season_number}</h5>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p hidden={date===''}>Дата выхода: {date}</p>\r\n                                            <p>Количество серий: {showSeason.tmdb.episodes?showSeason.tmdb.episodes.length:0}</p>\r\n                                        </div>\r\n                                        <div hidden={!loggedIn | (!showUserInfo?.user_watched_show)}>\r\n                                        <LoadingOverlay active={showUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                            <Rating stop={10}\r\n                                                emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                                fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                                initialRating={userRate}\r\n                                                onChange={(score) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setUserRate(score);\r\n                                                        setShowUserStatus({score: score }, show_id, showSeason.tmdb.season_number);\r\n                                                    }}\r\n                                                }\r\n                                            />\r\n                                            <MDBInput \r\n                                                type=\"textarea\" \r\n                                                id=\"reviewSeasonInput\"\r\n                                                label=\"Ваш отзыв\" \r\n                                                value={review}\r\n                                                onChange={(event) =>setReview(event.target.value)}\r\n                                                outline\r\n                                            />\r\n                                            <button \r\n                                                className={'savePreviewButton'} \r\n                                                hidden={!loggedIn | (!showUserInfo?.user_watched_show)}\r\n                                                onClick={() => {\r\n                                                        if (!loggedIn){\r\n                                                            openLoginForm();\r\n                                                        }else{\r\n                                                            setShowUserStatus({ review: document.getElementById('reviewSeasonInput').value }, show_id, showSeason.tmdb.season_number);\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                >\r\n                                                Сохранить\r\n                                            </button>\r\n                                        </LoadingOverlay>\r\n                                        </div>\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"showContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: showSeason.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <div className=\"showContentBody\"> \r\n                                    <h3 style={{paddingTop: \"15px\"}}>Список серий</h3>\r\n                                    <details open={false} className='episodeRows'>\r\n                                        <summary>Развернуть</summary>\r\n                                            <ul>\r\n                                                {  showSeason.tmdb.episodes?showSeason.tmdb.episodes.map((episode) => <li className=\"episode\" key={showSeason.tmdb.id+episode.episode_number}><DetailedEpisodeRow episode={episode} showID={show_id} loggedIn={loggedIn} userInfo={getEpisodeByNumber(showUserInfo.episodes, episode.episode_number)} setShowEpisodeUserStatus={setShowEpisodeUserStatus}/></li>):'' }\r\n                                            </ul>\r\n                                    </details>\r\n                                    <div hidden={!(chartData.length > 0)}>\r\n                                        <AreaChart width={700} height={250} data={chartData}\r\n                                            margin={{ top: 20, right: 20, left: 15, bottom: 0 }}\r\n                                            >\r\n                                            <defs>\r\n                                                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                                    <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\r\n                                                    <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/>\r\n                                                </linearGradient>\r\n                                            </defs>\r\n                                            <XAxis dataKey=\"name\" interval={0} tick={{ fill: \"rgb(238, 238, 238)\"}}/>\r\n                                            <YAxis tickLine={false} domain={[0, 10]} tick={{ fill: \"rgb(238, 238, 238)\"}} tickCount={2}/>\r\n                                            <Tooltip contentStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)'}}/>\r\n                                            <Area type=\"monotone\" dataKey=\"Оценка\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorUv)\" />\r\n                                        </AreaChart>\r\n                                    </div>\r\n                                </div>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={showUserInfo.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={showUserInfo.friends_info}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getShowRequestError(state),\r\n    showSeason: selectors.getContentShow(state),\r\n    showSeasonIsLoading: selectors.getIsLoadingContentShow(state),\r\n    showUserInfo: selectors.getContentShowUserInfo(state),\r\n    showUserInfoIsLoading: selectors.getIsLoadingContentShowUserInfo(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestShowSeason: (showID, seasonNumber) => {\r\n            dispatch(actions.requestShowSeason(showID, seasonNumber));\r\n        },\r\n        setShowUserStatus: (status, showID, seasonNumber) => {\r\n            dispatch(actions.setShowSeasonStatus(status, showID, seasonNumber));\r\n        },\r\n        setShowEpisodeUserStatus: (status, showID) => {\r\n            dispatch(actions.setShowEpisodesStatus(status, showID));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        requestShowSeasonUserInfo: (showID, seasonID) => {\r\n            dispatch(actions.requestShowSeasonUserInfo(showID, seasonID));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowPage);\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction EpisodePage ( {requestShowEpisode, showEpisode, showEpisodeIsLoading, setEpisodeUserStatus,\r\n                    requestShowEpisodeUserInfo, showUserInfo, showUserInfoIsLoading,\r\n                    loggedIn, openLoginForm\r\n    } ) {\r\n    let history = useHistory();\r\n    let { show_id, season_number, episode_number } = useParams();\r\n    const [date, setDate] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [userRate, setUserRate] = useState(0);\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            setReview('');\r\n            setUserRate(0);\r\n            requestShowEpisode(show_id, season_number, episode_number);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[show_id, season_number, episode_number, requestShowEpisode]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestShowEpisodeUserInfo(show_id, season_number, episode_number);\r\n            else{\r\n                setReview('');\r\n                setUserRate(0);\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn, show_id, season_number, episode_number]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            if (showEpisode.tmdb.air_date){\r\n                let mas = showEpisode.tmdb.air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }\r\n\r\n            if (showEpisode.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{showEpisode.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            document.title = showEpisode.tmdb.show_name + ' - ' + showEpisode.tmdb.name;\r\n\t\t},\r\n\t\t[showEpisode]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (showUserInfo?.review)\r\n                setReview(showUserInfo.review);\r\n            else\r\n                setReview('');\r\n\r\n            if (showUserInfo?.score)\r\n                setUserRate(showUserInfo.score);\r\n            else\r\n                setUserRate(0);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[showUserInfo]\r\n    );\r\n    \r\n    function setClear(){\r\n        setMetascoreBlock(\"\");\r\n        setDate(\"\");\r\n    }\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + showEpisode.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={showEpisodeIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"showContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"showContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"3\" className=\"posterBlock\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + showEpisode.tmdb.still_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"8\">\r\n                                        <h1>\r\n                                            <a href={window.location.origin + '/show/' + show_id} \r\n                                                onClick={(e) => { history.push('/show/' + show_id ); e.preventDefault();}}\r\n                                                >\r\n                                                {showEpisode.tmdb.show_name}\r\n                                            </a>  \r\n                                            { ' - ' + showEpisode.tmdb.name}\r\n                                        </h1>\r\n                                        <h5 style={{marginBottom: \"10px\", marginTop: \"-10px\"}}>{showEpisode.tmdb.show_original_name + ' - Season ' + showEpisode.tmdb.season_number + ' - Episode ' + showEpisode.tmdb.episode_number} </h5>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p hidden={date===''}>Дата выхода: {date}</p>\r\n                                            <a href={window.location.origin + '/show/' + show_id + '/season/' + season_number} \r\n                                                onClick={(e) => { history.push('/show/' + show_id + '/season/' + season_number); e.preventDefault();}}\r\n                                                >\r\n                                                Сезон: {showEpisode.tmdb.season_number}\r\n                                            </a> \r\n                                        </div>\r\n                                        <div hidden={!loggedIn | (!showUserInfo?.user_watched_show)}>\r\n                                            <LoadingOverlay active={showUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                                <Rating start={-1} stop={10}\r\n                                                    emptySymbol={[<MDBIcon icon=\"eye-slash\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>))}\r\n                                                    fullSymbol={[<MDBIcon icon=\"eye\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>))}\r\n                                                    initialRating={userRate}\r\n                                                    onChange={(score) => {\r\n                                                        if (!loggedIn){\r\n                                                            openLoginForm();\r\n                                                        }else{\r\n                                                            setUserRate(score);\r\n                                                            setEpisodeUserStatus( {episodes: [ {season_number: season_number,\r\n                                                                                                episode_number: episode_number,\r\n                                                                                                score: score  }]},  show_id);\r\n                                                        }}\r\n                                                    }\r\n                                                />\r\n                                                <MDBInput \r\n                                                    type=\"textarea\" \r\n                                                    id=\"reviewSeasonInput\"\r\n                                                    label=\"Ваш отзыв\" \r\n                                                    value={review}\r\n                                                    onChange={(event) =>setReview(event.target.value)}\r\n                                                    outline\r\n                                                />\r\n                                                <button \r\n                                                    className={'savePreviewButton'} \r\n                                                    hidden={!loggedIn | (!showUserInfo?.user_watched_show)}\r\n                                                    onClick={() => {\r\n                                                            if (!loggedIn){\r\n                                                                openLoginForm();\r\n                                                            }else{\r\n                                                                setEpisodeUserStatus({episodes: [ {\r\n                                                                                                    season_number: season_number,\r\n                                                                                                    episode_number: episode_number,\r\n                                                                                                    review: document.getElementById('reviewSeasonInput').value\r\n                                                                                                }]},\r\n                                                                                    show_id);\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                    >\r\n                                                    Сохранить\r\n                                                </button>\r\n                                            </LoadingOverlay>\r\n                                        </div>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"showContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: showEpisode.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={showUserInfo.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={showUserInfo.friends_info}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getShowRequestError(state),\r\n    showEpisode: selectors.getContentShow(state),\r\n    showEpisodeIsLoading: selectors.getIsLoadingContentShow(state),\r\n    showUserInfo: selectors.getContentShowUserInfo(state),\r\n    showUserInfoIsLoading: selectors.getIsLoadingContentShowUserInfo(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestShowEpisode: (showID, seasonNumber, episodeNumber) => {\r\n            dispatch(actions.requestShowEpisode(showID, seasonNumber, episodeNumber));\r\n        },\r\n        setEpisodeUserStatus: (status, showID) => {\r\n            dispatch(actions.setShowEpisodesStatus(status, showID));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        requestShowEpisodeUserInfo: (showID, seasonID, episodeID) => {\r\n            dispatch(actions.requestShowEpisodeUserInfo(showID, seasonID, episodeID));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EpisodePage);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\n\r\nfunction CardGame( {game} ) {\r\n    let history = useHistory();\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (game.released){\r\n                let mas = game.released.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (game.name.length > 55){\r\n                let newName = game.name.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(game.name);\r\n        },\r\n        [game]\r\n    );\r\n\r\n    /*const mouseDownHandler = ( event ) => {\r\n        if( event.button === 1 ) {\r\n            console.log(window.location.origin + '/game/' + game.slug );\r\n\r\n        }\r\n      }*/\r\n\r\n    return(\r\n        <div className=\"searchCardGame\" >\r\n            <div className=\"searchCardGameImage\" style={{backgroundImage: `url(${game.background_image})`}}> </div>\r\n            <div className=\"searchCardGameText\">\r\n                <a href={window.location.origin + '/game/' + game.slug} \r\n                    onClick={(e) => { history.push('/game/' + game.slug); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n//onMouseDown={mouseDownHandler} \r\n\r\nexport default CardGame;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardMovie ( {movie} ) {\r\n    let history = useHistory();\r\n\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (movie.release_date){\r\n                let mas = movie.release_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (movie.title.length > 55){\r\n                let newName = movie.title.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(movie.title);\r\n        },\r\n        [movie]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardMovie\" >\r\n            <div className=\"searchCardMovieImage\" style={{backgroundImage: `url(${\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.poster_path})`}}> </div>\r\n            <div className=\"searchCardMovieText\">\r\n                <a href={window.location.origin + '/movie/' + movie.id} \r\n                    onClick={(e) => { history.push('/movie/' + movie.id); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardMovie;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardShow ( {show} ) {\r\n    let history = useHistory();\r\n\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (show.first_air_date){\r\n                let mas = show.first_air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (show.name.length > 55){\r\n                let newName = show.name.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(show.name);\r\n        },\r\n        [show]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardMovie\" >\r\n            <div className=\"searchCardMovieImage\" style={{backgroundImage: `url(${\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + show.poster_path})`}}> </div>\r\n            <div className=\"searchCardMovieText\">\r\n                <a href={window.location.origin + '/show/' + show.id} \r\n                    onClick={(e) => { history.push('/show/' + show.id); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardShow;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardUser ( {user} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [user]\r\n    );\r\n\r\n    return(\r\n        <a href={window.location.origin + '/user/' + user.id} \r\n                    onClick={(e) => { history.push('/user/' + user.id); e.preventDefault();}}>\r\n            <div className=\"cardUser\" >\r\n                <div className=\"cardUserImage\" style={{backgroundImage: `url(${'http://upload.wikimedia.org/wikipedia/commons/f/f4/User_Avatar_2.png'})`}}> </div>\r\n                <div className=\"cardUserText\">\r\n                    <h4 >{user.username}</h4>\r\n                </div>\r\n            </div> \r\n        </a>\r\n        \r\n    )\r\n}\r\n\r\nexport default CardUser;\r\n","import React, {useState} from \"react\";\r\nimport './style.css';\r\n\r\nfunction CategoriesTab( {categories, activeColor, onChangeCategory} ) {\r\n    const [activeCategory, setActiveCategory] = useState(categories[0]);\r\n\r\n    return(\r\n        <div>\r\n            {categories.map((category) => <button className={'categoriesTab'} \r\n                                            key={category}\r\n                                            style={{color: (activeCategory === category?activeColor:'rgb(207, 207, 207)')}}\r\n                                            onClick={()=>{ \r\n                                                setActiveCategory(category);\r\n                                                onChangeCategory(category);\r\n                                            }}>\r\n                                            {category}\r\n                                        </button>) }\r\n           <hr style={{  backgroundColor: activeColor, height: 2.5, marginTop: \"0px\", marginBottom: \"10px\" }}/>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default CategoriesTab;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBFormInline\r\n} from \"mdbreact\";\r\nimport './style.css';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport CardGame from './CardGame';\r\nimport CardMovie from './CardMovie';\r\nimport CardShow from './CardShow';\r\nimport CardUser from '../Common/CardUser';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction SearchPage ( { loggedIn, gamesIsLoading, moviesIsLoading, showsIsLoading, usersIsLoading, searchGame, games, searchMovie, movies, searchShow, shows, searchUsers, users } ) {\r\n    let history = useHistory();\r\n    let { query } = useParams();\r\n    const [queryText, setQueryText] = useState(\"\");\r\n    const [gamesCards, setGamesCards] = useState(\"\");\r\n    const [moviesCards, setMoviesCards] = useState(\"\");\r\n    const [showsCards, setShowsCards] = useState(\"\");\r\n    const [usersCards, setUsersCards] = useState(\"\");\r\n    const [gamesPage, setGamesPage] = useState(1);\r\n    const [moviesPage, setMoviesPage] = useState(1);\r\n    const [showsPage, setShowsPage] = useState(1);\r\n\r\n    const [activeCategory, setActiveCategory] = useState(\"Всё\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            searchGame(query, 1, 6);\r\n            searchMovie(query, 1);\r\n            searchShow(query, 1);\r\n            searchUsers(query);\r\n            setQueryText(query);\r\n            document.title = 'Поиск';\r\n            setGamesPage(1);\r\n            setMoviesPage(1);\r\n            setShowsPage(1);\r\n\t\t},\r\n\t\t[query, searchGame, searchMovie, searchUsers, searchShow]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setGamesCards(<div className=\"searchCardsGroup\">{games.map(game => <CardGame game={game} key={game.id}/>)}</div>);\r\n\t\t},\r\n\t\t[games]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setMoviesCards(<div className=\"searchCardsGroup\">{movies.map(movie => <CardMovie movie={movie} key={movie.id}/>)}</div>);\r\n\t\t},\r\n\t\t[movies]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setShowsCards(<div className=\"searchCardsGroup\">{shows.map(show => <CardShow show={show} key={show.id}/>)}</div>);\r\n\t\t},\r\n\t\t[shows]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setUsersCards(<div className=\"searchCardsGroup\">{users.map(user => <CardUser user={user} key={user.username}/>)}</div>);\r\n\t\t},\r\n\t\t[users]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg searchBG\"/> \r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"searchPage\"> \r\n                            <h1>Поиск</h1>\r\n                            <MDBFormInline className=\"md-form\"\r\n                                onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput2').value); return false; }}>\r\n                                <MDBIcon icon=\"search\" />\r\n                                <input \r\n                                    className=\"form-control form-control-sm ml-3 w-50\" \r\n                                    type=\"text\" \r\n                                    placeholder=\"Найти\" \r\n                                    aria-label=\"Search\" \r\n                                    id=\"searchInput2\" \r\n                                    value={queryText} \r\n                                    onChange={(event) =>setQueryText(event.target.value)}/>\r\n                            </MDBFormInline>\r\n\r\n                            <h1>Результаты поиска</h1>\r\n                                <CategoriesTab\r\n                                    categories={['Всё', 'Игры', 'Фильмы', 'Сериалы', 'Пользователи']}\r\n                                    activeColor='#7654de' \r\n                                    onChangeCategory={(category) => {\r\n                                        setActiveCategory(category);\r\n                                    }}/>\r\n\r\n                                <LoadingOverlay\r\n                                    active={gamesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем игры...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Игры'}>\r\n                                        <h3>Игры</h3>\r\n                                        <div className=\"reslutsBlock\">\r\n                                            <button className=\"paginationButton\" \r\n                                                disabled={gamesPage===1}\r\n                                                onClick={() => {searchGame(query, gamesPage-1, 6); setGamesPage(gamesPage-1)}}\r\n                                                >\r\n                                                &lt;\r\n                                            </button>\r\n                                            {gamesCards}\r\n                                            <button className=\"paginationButton\"\r\n                                                disabled={games.length < 6}\r\n                                                onClick={() => {searchGame(query, gamesPage+1, 6); setGamesPage(gamesPage+1)}}\r\n                                                >\r\n                                                &gt;\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </LoadingOverlay>\r\n\r\n                                <LoadingOverlay\r\n                                    active={moviesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем фильмы...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Фильмы'}>\r\n                                        <h3>Фильмы</h3>\r\n                                        <div className=\"reslutsBlock\">\r\n                                            <button className=\"paginationButton\" \r\n                                                disabled={moviesPage===1}\r\n                                                onClick={() => {searchMovie(query, moviesPage-1); setMoviesPage(moviesPage-1)}}\r\n                                                >\r\n                                                &lt;\r\n                                            </button>\r\n                                            {moviesCards}\r\n                                            <button className=\"paginationButton\"\r\n                                                disabled={movies.length < 20}\r\n                                                onClick={() => {searchMovie(query, moviesPage+1); setMoviesPage(moviesPage+1)}}\r\n                                                >\r\n                                                &gt;\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>       \r\n                                </LoadingOverlay>\r\n\r\n                                <LoadingOverlay\r\n                                    active={showsIsLoading}\r\n                                    spinner\r\n                                    text='Ищем сериалы...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Сериалы'}>\r\n                                        <h3>Сериалы</h3>\r\n                                        <div className=\"reslutsBlock\">\r\n                                            <button className=\"paginationButton\" \r\n                                                disabled={showsPage===1}\r\n                                                onClick={() => {searchShow(query, showsPage-1); setShowsPage(showsPage-1)}}\r\n                                                >\r\n                                                &lt;\r\n                                            </button>\r\n                                            {showsCards}\r\n                                            <button className=\"paginationButton\"\r\n                                                disabled={shows.length < 20}\r\n                                                onClick={() => {searchShow(query, showsPage+1); setShowsPage(showsPage+1)}}\r\n                                                >\r\n                                                &gt;\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>       \r\n                                </LoadingOverlay>\r\n                                \r\n                                <LoadingOverlay\r\n                                    active={usersIsLoading}\r\n                                    spinner\r\n                                    text='Ищем пользователей...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Пользователи'}>\r\n                                        <h3>Пользователи</h3>\r\n                                        {usersCards}\r\n                                    </div>    \r\n                                </LoadingOverlay>\r\n                                \r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    gamesIsLoading: selectors.getIsLoadingSearchGames(state),\r\n    moviesIsLoading: selectors.getIsLoadingSearchMovies(state),\r\n    showsIsLoading: selectors.getIsLoadingSearchShows(state),\r\n    usersIsLoading: selectors.getIsLoadingSearchUsers(state),\r\n    games: selectors.getSearchContentGames(state),\r\n    movies: selectors.getSearchContentMovies(state),\r\n    shows: selectors.getSearchContentShows(state),\r\n    users: selectors.getSearchContentUsers(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        searchGame: (query, page, gamesCount) => {\r\n            dispatch(actions.searchGames(query, page, gamesCount));\r\n        },\r\n        searchMovie: (query, page) => {\r\n            dispatch(actions.searchMovies(query, page));\r\n        },\r\n        searchShow: (query, page) => {\r\n            dispatch(actions.searchShows(query, page));\r\n        },\r\n        searchUsers: (query) => {\r\n            dispatch(actions.searchUsers(query));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);\r\n","import React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction LoginForm( {isOpen, closeForm, logIn, authError, openResetPasswordForm} ) {\r\n\tconst [password, setPassword] = useState(\"\");\r\n\tconst [login, setLogin] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody className=\"loginBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form onSubmit={(event) => {event.preventDefault(); logIn(login, password)}}>\r\n\t              <p className=\"h4 text-center mb-4\">Войти</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!authError} >Неверный логин или пароль!</p>\r\n\r\n\t              <label htmlFor=\"loginInput\" className=\"grey-text\">\r\n\t                Логин\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={login}\r\n\t\t\t\t\tonChange={(event) =>setLogin(event.target.value)}/>\r\n\t\t\t\t\t\r\n\t              <label htmlFor=\"passwordInput\" className=\"grey-text\">\r\n\t                Пароль\r\n\t              </label>\r\n\t              <input type=\"password\" id=\"passwordInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={password}\r\n\t\t\t\t\tonChange={(event) =>setPassword(event.target.value)}/>\r\n\t\t\t\t\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"submit\" className=\"confirmButton\">\r\n\t\t\t\t\t\tВойти\r\n\t\t\t\t\t</MDBBtn>\r\n\t\t\t\t\t<label className=\"passwordResetLabel\" onClick={() => {closeForm(); openResetPasswordForm()}}>\r\n\t\t\t\t\t\tВосстановить пароль\r\n\t              \t</label>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getLoginForm(state),\r\n\tauthError: selectors.getAuthError(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeLoginForm());\r\n\t\t},\r\n\t\tlogIn: (login, password) => {\r\n\t\t\tdispatch(actions.tryAuth(login, password));\r\n\t\t},\r\n\t\topenResetPasswordForm: () => {\r\n\t\t\tdispatch(actions.openResetPasswordForm());\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n","\r\nimport React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction RegistrationForm( {isOpen, closeForm, registrate, registrateArror, user} ) {\r\n\tconst [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n\tconst [password, setPassword] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\tconst [login, setLogin] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered >\r\n\t    <MDBModalBody className=\"registrationBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form>\r\n\t\t\t      <p className=\"note note-danger\" hidden={!registrateArror} >Ошибка регистрации!</p>\r\n                  <p className=\"note note-success\" hidden={user.email===\"\"} >{user.login}, добро пожаловать! Осталось только подтвердить вашу почту</p>\r\n\t              <h4>Регистрация</h4>\r\n\r\n\t              <label htmlFor=\"loginInput\">\r\n\t                Никнейм\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" \r\n\t\t\t\t\t\tvalue={login}\r\n\t\t\t\t\t\tonChange={(event) =>setLogin(event.target.value)}/>\r\n\r\n                  <label htmlFor=\"emailInput\">\r\n\t                Электронная почта\r\n\t              </label>\r\n\t\t\t\t  <input type=\"email\"  id=\"emailInput\"  className=\"form-control\" \r\n\t\t\t\t\t  value={email} \r\n\t\t\t\t\t  onChange={(event) =>setEmail(event.target.value)} />\r\n\r\n\t              <label htmlFor=\"passwordInput\">\r\n\t                Пароль\r\n\t              </label>\r\n\t\t\t\t  <input type=\"password\"id=\"passwordInput\" className=\"form-control\"\r\n\t\t\t\t  \t\tvalue={password}\r\n\t\t\t\t\t\tonChange={(event) =>setPassword(event.target.value)}/>\r\n\r\n\t\t\t\t  <label htmlFor=\"passwordConfirmInput\">\r\n\t                Подтверждение пароля\r\n\t              </label>\r\n\t\t\t\t  <input type=\"password\" id=\"passwordConfirmInput\" className=\"form-control\"\r\n\t\t\t\t  \t\tstyle={passwordConfirm===password?{outlineColor: 'green'}:{outlineColor: 'red'}}\r\n\t\t\t\t\t\tvalue={passwordConfirm}\r\n\t\t\t\t\t\tonChange={(event) =>setPasswordConfirm(event.target.value)}/>\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"button\" className=\"confirmButton\" \r\n\t\t\t\t\t\tdisabled={password!==passwordConfirm || login.length < 1  || email.length < 1 || password.length < 1}\r\n\t\t\t\t\t\tonClick={() => registrate(login, email, password)}>\r\n\t\t\t\t\t\tЗарегистрироваться\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getRegistrateForm(state),\r\n    registrateArror: selectors.getRegistrateError(state),\r\n    user: selectors.getUser(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeRegistrateForm());\r\n\t\t},\r\n\t\tregistrate: (login, email, password) => {\r\n\t\t\tdispatch(actions.registrationRequest(login, email, password));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);\r\n","import React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы сброса пароля\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction ResetPasswordForm( {isOpen, closeForm, resetPassword, resetPasswordError} ) {\r\n\tconst [email, setEmail] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody className=\"loginBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form onSubmit={(event) => {event.preventDefault(); resetPassword(email)}}>\r\n\t              <p className=\"h4 text-center mb-4\">Сбросить пароль</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!resetPasswordError | resetPasswordError === 'ok'} >{resetPasswordError}</p>\r\n                  <p className=\"note note-success\" hidden={resetPasswordError !== 'ok'} >На вашу почту отправлено письмо</p>\r\n\r\n\t              <label htmlFor=\"emailInput\" className=\"grey-text\">\r\n\t                Почта\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"emailInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={email}\r\n\t\t\t\t\tonChange={(event) =>setEmail(event.target.value)}/>\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"submit\" className=\"confirmButton\">\r\n\t\t\t\t\t\tСбросить\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getResetPasswordForm(state),\r\n\tresetPasswordError: selectors.getResetPasswordError(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeResetPasswordForm());\r\n\t\t},\r\n\t\tresetPassword: (email) => {\r\n\t\t\tdispatch(actions.resetPassword(email));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPasswordForm);\r\n","import React, {\r\n    useEffect\r\n} from \"react\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ConfirmPage ( {confirmEmailRequest} ) \r\n{\r\n\tlet search = window.location.search;\r\n\tlet params = new URLSearchParams(search);\r\n\tlet uid64 = params.get('uid64');\r\n\tlet token = params.get('token');\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconfirmEmailRequest(uid64, token);\r\n\t\t},\r\n\t\t// eslint-disable-next-line\r\n\t\t[]\r\n\t);\r\n\t\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        confirmEmailRequest: (uid64, token) => {\r\n            dispatch(actions.confirmEmailRequest(uid64, token));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmPage);","import React, {\r\n    useState\r\n} from \"react\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../store/actions';\r\nimport * as selectors from '../store/reducers';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ConfirmPasswordPage ( {confirmPassword, confirmPasswordError} ) \r\n{\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n    \r\n\tlet search = window.location.search;\r\n\tlet params = new URLSearchParams(search);\r\n\tlet token = params.get('token');\r\n\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n                <form onSubmit={(event) => {event.preventDefault(); confirmPassword(token, password)}} className=\"confirmPasswordForm\">\r\n                    <p className=\"h4\">Обновить пароль</p>\r\n                    <p className=\"note note-danger\" hidden={!confirmPasswordError | confirmPasswordError==='ok'} >{confirmPasswordError}</p>\r\n                    <p className=\"note note-success\" hidden={confirmPasswordError !== 'ok'} >Пароль обновлен!</p>\r\n\r\n                    <label htmlFor=\"passwordInput\" className=\"confirmPasswordLabel\">\r\n                        Новый пароль\r\n                    </label><br/>\r\n                    <input type=\"password\" id=\"passwordInput\" className=\"confirmPasswordInput\" \r\n                        value={password}\r\n                        onChange={(event) =>setPassword(event.target.value)}/>\r\n                    <br/>\r\n\r\n                    <label htmlFor=\"passwordConfurmInput\" className='confirmPasswordLabel'>\r\n                        Подтверждение пароля\r\n                    </label><br/>\r\n                    <input type=\"password\" id=\"passwordConfurmInput\" className=\"confirmPasswordInput\"\r\n                        value={passwordConfirm}\r\n                        onChange={(event) =>setPasswordConfirm(event.target.value)}/>\r\n                    <br/>\r\n\r\n                    <button type=\"submit\" \r\n                        className=\"confirmPasswordButton\"\r\n                        disabled={password!==passwordConfirm | password.length < 1}>\r\n                        Обновить\r\n                    </button>\r\n                </form>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    confirmPasswordError: selectors.getConfirmPasswordError(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        confirmPassword: (token, password) => {\r\n            dispatch(actions.confirmPassword(token, password));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmPasswordPage);","export const COLORS = [\r\n    \"rgb(43,206,72)\",\r\n    \"rgb(240,163,255)\",\r\n    \"rgb(0,117,220)\",\r\n    \"rgb(153,63,0)\",\r\n    \"rgb(76,0,92)\",\r\n    \"rgb(225,225,225)\",\r\n    \"rgb(0,92,49)\",\r\n    \"rgb(255,204,153)\",\r\n    \"rgb(128,128,128)\",\r\n    \"rgb(148,255,181)\",\r\n    \"rgb(143,124,0)\",\r\n    \"rgb(157,204,0)\",\r\n    \"rgb(194,0,136)\",\r\n    \"rgb(0,51,128)\",\r\n    \"rgb(255,164,5)\",\r\n    \"rgb(255,168,187)\",\r\n    \"rgb(66,102,0)\",\r\n    \"rgb(255,0,16)\",\r\n    \"rgb(94,241,242)\",\r\n    \"rgb(0,153,143)\",\r\n    \"rgb(224,255,102)\",\r\n    \"rgb(116,10,255)\",\r\n    \"rgb(153,0,0)\",\r\n    \"rgb(255,255,128)\",\r\n    \"rgb(255,255,0)\",\r\n    \"rgb(255,80,)\",\r\n  ]","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n  Cell, BarChart, Bar, XAxis, YAxis, Tooltip,\r\n} from 'recharts';\r\nimport {COLORS} from \"./Colors\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction GameBlock ( {games, stats} ) {\r\n    const [gameChartData, setGameChartData] = useState([]);\r\n    const gameColumns = [\r\n        {\r\n          label: 'Название',\r\n          field: 'name',\r\n          sort: 'disabled'\r\n        },\r\n        {\r\n          label: 'Статус',\r\n          field: 'status',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Оценка',\r\n          field: 'score',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Отзыв',\r\n          field: 'review',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Время прохождения',\r\n          field: 'spent_time',\r\n          sort: 'asc'\r\n        }\r\n      ];\r\n\r\n    const [gameTableData, setGameTableData] = useState({\r\n        columns: gameColumns,\r\n        rows: [\r\n        ]\r\n    });\r\n\r\n    useEffect(() =>{\r\n            if (games)\r\n            {\r\n                setGameTableData({\r\n                    columns: gameColumns,\r\n                    rows: games.map((game) => {\r\n                        return {\r\n                                name: <a className=\"dataTable\" href={window.location.origin + '/game/' + game.game.rawg_slug}>{game.game.rawg_name}</a>,\r\n                                name2: game.game.rawg_name,\r\n                                status: game.status,\r\n                                score: game.score,\r\n                                review: game.review,\r\n                                spent_time: parseFloat(game.spent_time),\r\n                                /*clickEvent: (e) => {\r\n                                    //window.open('/game/' + game.game.rawg_slug);\r\n                                    history.push('/game/' + game.game.rawg_slug);\r\n                                }*/\r\n                            }      \r\n                    })\r\n                });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [games]\r\n    );\r\n\r\n    useEffect(() =>{\r\n      setGameChartData([]);\r\n      if (stats)\r\n      {\r\n        if (stats?.genres){\r\n            let newData = [];\r\n            for (let genre in stats.genres)\r\n              if (stats.genres[genre].spent_time_percent > 2)\r\n                newData.push({name: stats.genres[genre].name, 'Процент': stats.genres[genre].spent_time_percent});\r\n            newData = newData.sort((a, b) => a['Процент'] > b['Процент'] ? -1 : 1);\r\n            setGameChartData(newData);\r\n        }\r\n      }},\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [stats]\r\n      );\r\n\r\n    return(\r\n        <div>\r\n            <p>Игр сыграно: {stats?.count}, часов наиграно: {stats?.total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={gameTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать игр на странице\"\r\n                searchLabel='Поиск'\r\n                className='dataTable'\r\n                />\r\n                <div hidden={gameChartData.length < 1}>\r\n                  <BarChart width={1000} height={300}\r\n                      data={gameChartData}\r\n                      margin={{ top: 5, right: 10, left: 10, bottom: 20, }}\r\n                  >\r\n                    <XAxis dataKey=\"name\" tickLine={false} tick={{ fill: \"rgb(238, 238, 238)\"}} interval={0} angle={-10} tickMargin={15}/>\r\n                    <YAxis domain={[0, 'dataMax']} tick={{ fill: \"rgb(238, 238, 238)\"}}/>\r\n                    <Tooltip itemStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)'}}\r\n                      contentStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)', borderRadius: \"10px\"}}\r\n                      cursor={false}/>\r\n                    <Bar dataKey=\"Процент\">\r\n                        {\r\n                            gameChartData.map((entry, index) => <Cell fill={COLORS[index]} key={index}/>)\r\n                        }\r\n                    </Bar>\r\n                  </BarChart>\r\n              </div>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default GameBlock;\r\n","import React from \"react\";\r\n\r\nimport CardUser from '../Common/CardUser';\r\n\r\nfunction FriendBlock ( {users} ) {\r\n\r\n    return(\r\n        <div className=\"friendsBlock\">\r\n            { users.map((user) => <CardUser user={user} key={user.id}/>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FriendBlock;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n  Cell, BarChart, Bar, XAxis, YAxis, Tooltip,\r\n} from 'recharts';\r\nimport {COLORS} from \"./Colors\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction MovieBlock ( {movies, stats} ) {\r\n    const [movieChartData, setMovieChartData] = useState([]);\r\n    const movieColumns = [\r\n      {\r\n        label: 'Название',\r\n        field: 'name',\r\n        sort: 'disabled'\r\n      },\r\n      {\r\n        label: 'Статус',\r\n        field: 'status',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Оценка',\r\n        field: 'score',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Отзыв',\r\n        field: 'review',\r\n        sort: 'asc'\r\n      }\r\n    ];\r\n\r\n  const [movieTableData, setMovieTableData] = useState({\r\n      columns: movieColumns,\r\n      rows: [\r\n      ]\r\n  });\r\n\r\n    useEffect(() =>{\r\n            if (movies)\r\n            {\r\n              setMovieTableData({\r\n                columns: movieColumns,\r\n                rows: movies.map((movie) => {\r\n                    return {\r\n                            name: <a className=\"dataTable\" href={window.location.origin + '/movie/' + movie.movie.tmdb_id}>{movie.movie.tmdb_name}</a>,\r\n                            name2: movie.movie.tmdb_name,\r\n                            status: movie.status,\r\n                            score: movie.score,\r\n                            review: movie.review,\r\n                            /*clickEvent: (e) => {\r\n                                //window.open('/game/' + game.game.rawg_slug);\r\n                                history.push('/movie/' + movie.movie.tmdb_id)\r\n                            }*/\r\n                        }      \r\n                  })\r\n              });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [movies]\r\n    );\r\n\r\n    useEffect(() =>{\r\n      setMovieChartData([]);\r\n      if (stats)\r\n      {\r\n        if (stats?.genres){\r\n            let newData = [];\r\n            for (let genre in stats.genres)\r\n                if (stats.genres[genre].spent_time_percent > 2)\r\n                  newData.push({name: stats.genres[genre].name, 'Процент': stats.genres[genre].spent_time_percent});\r\n            newData = newData.sort((a, b) => a['Процент'] > b['Процент'] ? -1 : 1);\r\n            setMovieChartData(newData);\r\n        }\r\n      }},\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [stats]\r\n      );\r\n\r\n    return(\r\n        <div>\r\n            <p>Фильмов посмотрено: {stats?.count}, часов просмотра: {stats?.total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={movieTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать фильмов на странице\"\r\n                searchLabel='Поиск'\r\n                />\r\n\r\n            <div hidden={movieChartData.length < 1}>\r\n                <BarChart width={1000} height={300}\r\n                    data={movieChartData}\r\n                    margin={{ top: 5, right: 10, left: 10, bottom: 15, }}\r\n                >\r\n                  <XAxis dataKey=\"name\" tickLine={false} tick={{ fill: \"rgb(238, 238, 238)\"}} interval={0} angle={-10} tickMargin={15}/>\r\n                  <YAxis domain={[0, 'dataMax']} tick={{ fill: \"rgb(238, 238, 238)\"}}/>\r\n                  <Tooltip itemStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)'}}\r\n                    contentStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)', borderRadius: \"10px\"}}\r\n                    cursor={false}/>\r\n                  <Bar dataKey=\"Процент\">\r\n                      {\r\n                          movieChartData.map((entry, index) => <Cell fill={COLORS[index]} key={index}/>)\r\n                      }\r\n                  </Bar>\r\n                </BarChart>\r\n              </div>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default MovieBlock;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport './style.css';\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction LogRow ( {log, showUsername} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [log]\r\n    );\r\n\r\n    function translateActionType(action, actionResult){\r\n        switch (action) {\r\n            case 'score':\r\n                switch (actionResult) {\r\n                    case '0':\r\n                        return 'посмотрел(а)';\r\n                    case '-1':\r\n                        return 'не смотрела(а)';\r\n                    default:\r\n                        return 'оценил(а)';\r\n                }\r\n            case 'status':\r\n                return 'изменил(а) статус';\r\n            case 'review':\r\n                return 'оставил(а) отзыв на';\r\n            case 'spent_time':\r\n                return 'изменил(а) время прохождения';\r\n            case 'is_following':\r\n                if (actionResult === 'True')\r\n                    return 'подписан(а) на';\r\n                else\r\n                    return 'отписан(а) от';\r\n            default:\r\n                return action;\r\n        }\r\n    }\r\n\r\n    function translateType(type, actionType){\r\n        switch (type) {\r\n            case 'game':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'игру';\r\n                else\r\n                    return 'игры';\r\n            case 'movie':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'фильм';\r\n                else\r\n                    return 'фильма';\r\n            case 'show':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'сериал';\r\n                else\r\n                    return 'сериала';\r\n            case 'season':\r\n                return '';\r\n            case 'episode':\r\n                return '';\r\n            case 'user':\r\n                return 'пользователя';\r\n            default:\r\n                return type;\r\n        }\r\n    }\r\n\r\n    function nameToLink(name, type, id){\r\n        switch (type){\r\n            case 'game':\r\n                return  <a href={window.location.origin + '/game/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/game/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'movie':\r\n                return  <a href={window.location.origin + '/movie/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/movie/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'show':\r\n                return  <a href={window.location.origin + '/show/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/show/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'season':\r\n                return  <div style={{display: 'inline-block'}}>\r\n                            <a href={window.location.origin + '/show/' + id.show_id + '/season/' + id.season_number} \r\n                                className=\"logLink\"\r\n                                onClick={(e) => { history.push('/show/' + id.show_id  + '/season/' + id.season_number); e.preventDefault();}}>\r\n                                    {name.name}\r\n                            </a>\r\n                            &nbsp;сериала&nbsp;\r\n                            <a href={window.location.origin + '/show/' + id.show_id} \r\n                                className=\"logLink\"\r\n                                onClick={(e) => { history.push('/show/' + id.show_id); e.preventDefault();}}>\r\n                                    {name.parent_name}\r\n                            </a>\r\n                            \r\n                        </div>\r\n                        ;\r\n            case 'episode':\r\n                return  <div style={{display: 'inline-block'}}>\r\n                            \r\n                            <a href={window.location.origin + '/show/' + id.show_id + '/season/' + id.season_number + '/episode/' + id.episode_number} \r\n                                className=\"logLink\"\r\n                                onClick={(e) => { history.push('/show/' + id.show_id  + '/season/' + id.season_number + '/episode/' + id.episode_number); e.preventDefault();}}>\r\n                                    [s{id.season_number}e{id.episode_number}] серию\r\n                            </a>\r\n                            &nbsp;сериала&nbsp;\r\n                            <a href={window.location.origin + '/show/' + id.show_id} \r\n                                className=\"logLink\"\r\n                                onClick={(e) => { history.push('/show/' + id.show_id); e.preventDefault();}}>\r\n                                    {name.parent_name}\r\n                            </a>\r\n                            \r\n                        </div>\r\n                        ;\r\n            case 'user':\r\n                return  <a href={window.location.origin + '/user/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/user/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            default:\r\n                return name;\r\n        }\r\n    }\r\n\r\n    function userToLink(username, userID){\r\n            return  <a href={window.location.origin + '/user/' + userID} \r\n                        className=\"logLink\"\r\n                        onClick={(e) => { history.push('/user/' + userID); e.preventDefault();}}>\r\n                            {username}\r\n                    </a>;\r\n    }\r\n\r\n    function actionResultToStr(actionType, actionResult, target){\r\n        switch (actionType){\r\n            case 'score':\r\n                if (target !== 'episode' | actionResult > 0)\r\n                    return  <Rating stop={10}\r\n                                emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\"/>}\r\n                                fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" title={n}/>)}\r\n                                initialRating={actionResult}\r\n                                readonly={true}\r\n                            />\r\n                else\r\n                    return '';\r\n            case 'status':\r\n                return '\"' + actionResult + '\"';\r\n            case 'review':\r\n                return '\"' + actionResult + '\"';\r\n            case 'spent_time':\r\n                return actionResult + ' ' + intToHours(actionResult);\r\n            case 'is_following':\r\n                return '';\r\n            default:\r\n                return actionResult;\r\n        }\r\n    }\r\n\r\n    function parseDate(date){\r\n        let newDate = new Date(date);\r\n        return newDate.toLocaleTimeString(\"ru-RU\");\r\n    }\r\n\r\n    return(\r\n            <div className=\"logRow\">{parseDate(log.created)} {showUsername?userToLink(log.user, log.user_id):''} {translateActionType(log.action_type, log.action_result)} {translateType(log.type, log.action_type)} {nameToLink(log.target, log.type, log.target_id)}{(log.type==='user'|log.action_result===\"0\")?'':':'} {actionResultToStr(log.action_type, log.action_result, log.type)}</div>\r\n    )\r\n}\r\n\r\nfunction intToHours(number){\r\n    if (11 <= number && number <= 14)\r\n        return 'часов'\r\n    else if (number % 10 === 1)\r\n        return 'час'\r\n    else if (2 <= number % 10 && number % 10 <= 4)\r\n        return 'часа'\r\n    else\r\n        return 'часов'\r\n}\r\n\r\nexport default LogRow;","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\nimport './style.css';\r\nimport LogRow from './LogRow';\r\n\r\nfunction UserLogBlock ( {logs, showUsername, onChangePage} ) {\r\n    const [logsByDay, setLogsByDay] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    useEffect(() =>{\r\n            setLogsByDay(groupLogsByDay(logs.log));\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [logs]\r\n    );\r\n\r\n    function groupLogsByDay(logs){\r\n        let newLogs = [];\r\n\r\n        for (let i in logs){\r\n            let date = new Date(logs[i].created);\r\n\r\n            if (newLogs.length === 0)\r\n                newLogs.push({\r\n                    date: date,\r\n                    logs: [logs[i]]\r\n                });\r\n            else if (date.getDay() === newLogs[newLogs.length - 1].date.getDay())\r\n                newLogs[newLogs.length - 1].logs.push(logs[i]);\r\n            else\r\n                newLogs.push({\r\n                    date: date,\r\n                    logs: [logs[i]]\r\n                });\r\n        }\r\n        return newLogs;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            { \r\n                logsByDay.map((dayLog) => \r\n                    <div key={dayLog.logs[0].id} className=\"logDay\">\r\n                        <h5 className='logDate'>\r\n                            {dayLog.date.toLocaleDateString(\"ru-RU\")}\r\n                        </h5>\r\n                        <div className='logRows'>\r\n                            { dayLog.logs.map((log) => <LogRow log={log} showUsername={showUsername} key={log.id + log.created}/>) }\r\n                        </div>\r\n                    </div>\r\n                )  \r\n            } \r\n            <button \r\n                className=\"logPaginationButton\" \r\n                disabled={!logs.has_next_page}\r\n                onClick={() => {\r\n                        if (logs.has_next_page){\r\n                            onChangePage(currentPage+1);\r\n                            setCurrentPage(currentPage+1);\r\n                        } \r\n                    }}\r\n                >\r\n                <MDBIcon icon=\"arrow-down\" />\r\n            </button> \r\n\r\n            <button \r\n                className=\"logPaginationButton\" \r\n                disabled={currentPage===1}\r\n                onClick={() => {\r\n                        if (currentPage>1){\r\n                            onChangePage(currentPage-1);\r\n                            setCurrentPage(currentPage-1);\r\n                        } \r\n                    }}\r\n                >\r\n                <MDBIcon icon=\"arrow-up\" />\r\n            </button>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default UserLogBlock;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n  Cell, BarChart, Bar, XAxis, YAxis, Tooltip,\r\n} from 'recharts';\r\nimport {COLORS} from \"./Colors\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction ShowBlock ( {shows, stats} ) {\r\n  const [showChartData, setShowChartData] = useState([]);\r\n\r\n    const showColumns = [\r\n      {\r\n        label: 'Название',\r\n        field: 'name',\r\n        sort: 'disabled'\r\n      },\r\n      {\r\n        label: 'Статус',\r\n        field: 'status',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Оценка',\r\n        field: 'score',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Отзыв',\r\n        field: 'review',\r\n        sort: 'asc'\r\n      }\r\n    ];\r\n\r\n  const [showTableData, setShowTableData] = useState({\r\n      columns: showColumns,\r\n      rows: [\r\n      ]\r\n  });\r\n\r\n    useEffect(() =>{\r\n            if (shows)\r\n            {\r\n              setShowTableData({\r\n                columns: showColumns,\r\n                rows: shows.map((show) => {\r\n                    return {\r\n                            name: <a className=\"dataTable\" href={window.location.origin + '/show/' + show.show.tmdb_id}>{show.show.tmdb_name}</a>,\r\n                            name2: show.show.tmdb_name,\r\n                            status: show.status,\r\n                            score: show.score,\r\n                            review: show.review,\r\n                            /*clickEvent: (e) => {\r\n                                //window.open('/game/' + game.game.rawg_slug);\r\n                                history.push('/movie/' + movie.movie.tmdb_id)\r\n                            }*/\r\n                        }      \r\n                  })\r\n              });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [shows]\r\n    );\r\n\r\n    useEffect(() =>{\r\n      setShowChartData([]);\r\n      if (stats)\r\n      {\r\n        if (stats?.genres){\r\n            let newData = [];\r\n            for (let genre in stats.genres)\r\n              if (stats.genres[genre].spent_time_percent > 2)\r\n                newData.push({name: stats.genres[genre].name, 'Процент': stats.genres[genre].spent_time_percent});\r\n            newData = newData.sort((a, b) => a['Процент'] > b['Процент'] ? -1 : 1);\r\n            setShowChartData(newData);\r\n        }\r\n      }},\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [stats]\r\n      );\r\n\r\n    \r\n\r\n    return(\r\n        <div>\r\n            <p>Серий сериалов посмотрено: {stats?.count}, часов просмотра: {stats?.total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={showTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать сериалов на странице\"\r\n                searchLabel='Поиск'\r\n                />\r\n              <div hidden={showChartData.length < 1}>\r\n                <BarChart width={1000} height={300}\r\n                    data={showChartData}\r\n                    margin={{ top: 5, right: 10, left: 10, bottom: 20, }}\r\n                >\r\n                  <XAxis dataKey=\"name\" tickLine={false} tick={{ fill: \"rgb(238, 238, 238)\"}} interval={0} angle={-10} tickMargin={15}/>\r\n                  <YAxis domain={[0, 'dataMax']} tick={{ fill: \"rgb(238, 238, 238)\"}}/>\r\n                  <Tooltip itemStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)'}}\r\n                    contentStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)', borderRadius: \"10px\"}}\r\n                    cursor={false}/>\r\n                  <Bar dataKey=\"Процент\">\r\n                      {\r\n                          showChartData.map((entry, index) => <Cell fill={COLORS[index]} key={index}/>)\r\n                      }\r\n                  </Bar>\r\n                </BarChart>\r\n            </div>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default ShowBlock;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer\r\n} from \"mdbreact\";\r\nimport {\r\n    PieChart, Pie, Legend, Cell, Tooltip,\r\n  } from 'recharts';\r\nimport {COLORS} from \"./Colors\";\r\nimport './style.css';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport GameBlock from './GameBlock';\r\nimport FriendBlock from './FriendBlock';\r\nimport MovieBlock from './MovieBlock';\r\nimport UserLogBlock from './UserLogBlock';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\nimport ShowBlock from \"./ShowBlock\";\r\n\r\nconst LOG_ROWS_COUNT = 15; \r\n\r\n//const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#FA8542'];\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction UserPage ( { loggedIn, userInfo, \r\n                    userIsLoading, getUserInfo, currentUserInfo, setUserStatus, \r\n                    getUserLogs, userLogs, userLogsIsLoading,\r\n                    getUserFriendsLogs, userFriendsLogs, userFriendsLogsIsLoading}) \r\n{ \r\n    let { userID } = useParams();\r\n    const [activeCategory, setActiveCategory] = useState(\"Профиль\");\r\n    const [chartData, setChartData] = useState([]);\r\n    \r\n    useEffect(\r\n\t\t() => {\r\n            getUserInfo(userID);\r\n            getUserLogs(userID, 1, LOG_ROWS_COUNT);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[userID, getUserInfo, getUserLogs, getUserFriendsLogs]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                getUserFriendsLogs(userID, 1, LOG_ROWS_COUNT);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn, userID]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setChartData([]);\r\n            document.title = 'Профиль ' + userInfo.username;\r\n            if (userInfo.stats.games){\r\n                let newData = [];\r\n                if (userInfo.stats.games.total_spent_time > 0)\r\n                    newData.push({name: 'Часов в играх', value: userInfo.stats.games.total_spent_time});\r\n                if (userInfo.stats.movies.total_spent_time > 0)\r\n                    newData.push({name: 'Часов в фильмах', value: userInfo.stats.movies.total_spent_time});\r\n                if (userInfo.stats.episodes.total_spent_time > 0)\r\n                    newData.push({name: 'Часов в сериалах', value: userInfo.stats.episodes.total_spent_time});\r\n                setChartData(newData);\r\n            }\r\n\t\t},\r\n\t\t[userInfo]\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"bg searchBG\"/> \r\n            <LoadingOverlay\r\n                active={userIsLoading}\r\n                spinner\r\n                text='Загрузка...'\r\n                >\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                    <MDBCol className=\"userPage\"> \r\n                        <h1>Информация о пользователе {userInfo.username}</h1>\r\n                        <button \r\n                            hidden={currentUserInfo.username === userInfo.username}\r\n                            className='addFriendButton'\r\n                            onClick={ () => {\r\n                                setUserStatus({is_following: userInfo.is_followed?false:true}, userInfo.id);\r\n                            }}>\r\n                            {userInfo.is_followed?'Отписаться':'Подписаться'}\r\n                        </button>\r\n                        <CategoriesTab\r\n                            categories={['Профиль', 'Игры', 'Фильмы', 'Сериалы', 'Друзья']}\r\n                            activeColor='#7654de' \r\n                            onChangeCategory={(category) => { setActiveCategory(category) }}/>\r\n\r\n                            <div hidden={activeCategory!=='Профиль'}>\r\n                                <h4>Моя активность: </h4>\r\n                                <LoadingOverlay\r\n                                    active={userLogsIsLoading}\r\n                                    spinner\r\n                                    text='Загрузка активности...'\r\n                                    >\r\n\r\n                                    <div hidden={chartData.length < 1}>\r\n                                        <PieChart width={350} height={250} hidden={chartData.length < 1}>\r\n                                            <Pie dataKey=\"value\" \r\n                                                data={chartData} \r\n                                                cx=\"50%\" cy=\"50%\"\r\n                                                outerRadius={80} \r\n                                                fill=\"#8884d8\" \r\n                                                labelLine={true}\r\n                                                label\r\n                                                minAngle={5}\r\n                                                >\r\n                                            {\r\n                                                chartData.map((entry, index) => <Cell fill={COLORS[index]} key={index}/>)\r\n                                            }\r\n                                            </Pie>\r\n                                            <Tooltip itemStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)'}}\r\n                                                contentStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)', borderRadius: \"10px\"}}\r\n                                                cursor={false}/>\r\n                                            <Legend verticalAlign=\"bottom\" horizontalAlign=\"center\"/>\r\n                                        </PieChart>\r\n                                    </div>\r\n                                    <UserLogBlock logs={userLogs} onChangePage={(pageNumber) => getUserLogs(userID, pageNumber, LOG_ROWS_COUNT)}/>\r\n                                </LoadingOverlay>\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Игры'}>\r\n                                <GameBlock games={userInfo.games} stats={userInfo.stats.games} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Фильмы'}>\r\n                                <MovieBlock movies={userInfo.movies} stats={userInfo.stats.movies} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Сериалы'}>\r\n                                <ShowBlock shows={userInfo.shows} stats={userInfo.stats.episodes} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Друзья'}>\r\n                                <FriendBlock users={userInfo.followed_users?userInfo.followed_users:[]} />\r\n                                <h4>Активность друзей: </h4>\r\n                                <LoadingOverlay\r\n                                    active={userFriendsLogsIsLoading}\r\n                                    spinner\r\n                                    text='Загрузка активности...'\r\n                                    >\r\n                                    <UserLogBlock logs={userFriendsLogs} onChangePage={(pageNumber) => getUserFriendsLogs(userID, pageNumber, LOG_ROWS_COUNT)} showUsername={true}/>\r\n                                </LoadingOverlay>\r\n                            </div>\r\n                    </MDBCol>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n            </LoadingOverlay>\r\n        </div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    userIsLoading: selectors.getIsLoadingUserPageContent(state),\r\n    userInfo: selectors.getUserPageContent(state),\r\n    userLogs: selectors.getUserPageLogs(state),\r\n    userLogsIsLoading: selectors.getIsLoadingUserPageLogs(state),\r\n    userFriendsLogs: selectors.getUserPageFriendsLogs(state),\r\n    userFriendsLogsIsLoading: selectors.getIsLoadingUserPageFriendsLogs(state),\r\n    currentUserInfo: selectors.getUser(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        getUserInfo: (user_id) => {\r\n            dispatch(actions.requestUserPageContent(user_id));\r\n        },\r\n        setUserStatus: (is_following, userID) => {\r\n            dispatch(actions.setUserStatus(is_following, userID));\r\n        },\r\n        getUserLogs: (userID, page, resultsOnPage) => {\r\n            dispatch(actions.requestUserPageLogs(userID, page, resultsOnPage));\r\n        },\r\n        getUserFriendsLogs: (userID, page, resultsOnPage) => {\r\n            dispatch(actions.requestUserPageFriendsLogs(userID, page, resultsOnPage));\r\n        },\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage);\r\n","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nimport {\r\n\tMDBNavbar,\r\n    MDBNavItem,\r\n    MDBNavbarBrand,\r\n    MDBNavbarNav,\r\n    MDBNavLink,\r\n    MDBIcon,\r\n    MDBFormInline,\r\n    MDBDropdown,\r\n    MDBDropdownItem,\r\n    MDBDropdownMenu,\r\n    MDBDropdownToggle\r\n} from \"mdbreact\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\nfunction Navbar( {loggedIn, onLoginClick, onLogoutClick, onRegistrationClick, user} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n            <MDBNavbar style={{ backgroundColor: \"#4527a0\" }} dark expand=\"md\" fixed=\"top\">\r\n            <MDBNavbarBrand onClick={ (event) => {event.preventDefault(); history.push('/'); return false; }}>\r\n                <strong className=\"white-text\" style={{cursor: 'pointer'}}>Interests</strong>\r\n            </MDBNavbarBrand>\r\n            <MDBNavbarNav left>\r\n                \r\n            </MDBNavbarNav>\r\n\r\n            <MDBNavbarNav right>\r\n                <MDBNavItem>\r\n                    <MDBFormInline onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput').value); return false; }}>\r\n                        <div className=\"md-form my-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Найти\" aria-label=\"Найти\"\r\n                            id=\"searchInput\"/>\r\n                        </div>\r\n                    </MDBFormInline>\r\n                </MDBNavItem>\r\n\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onLoginClick} >\r\n                        <MDBIcon icon=\"sign-in-alt\" /> Войти\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onRegistrationClick} >\r\n                        <MDBIcon icon=\"user-plus\" /> Зарегистрироваться\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem hidden={!loggedIn} className=\"font-weight-bold\">\r\n                    <MDBDropdown>\r\n                        <MDBDropdownToggle nav caret>\r\n                        <span className=\"mr-2\">{user.username}</span>\r\n                        </MDBDropdownToggle>\r\n                        <MDBDropdownMenu>\r\n                            <MDBDropdownItem href={\"/user/\"+user.id}>Профиль</MDBDropdownItem>\r\n                            <MDBDropdownItem onClick={ onLogoutClick }>\r\n                                <MDBIcon icon=\"sign-out-alt\"/> Выйти\r\n                            </MDBDropdownItem>\r\n                        </MDBDropdownMenu>\r\n                    </MDBDropdown>\r\n                </MDBNavItem>\r\n            </MDBNavbarNav>\r\n        </MDBNavbar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    user: selectors.getUser(state)\r\n});\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonLoginClick: () => {\r\n\t\t\tdispatch(actions.openLoginForm());\r\n        },\r\n        onLogoutClick: () =>{\r\n            dispatch(actions.resetAuthorization());\r\n        },\r\n        onRegistrationClick: () =>{\r\n            dispatch(actions.openRegistrateForm());\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport HomePage from \"./components/HomePage\";\r\nimport GamePage from \"./components/Game/GamePage\";\r\nimport MoviePage from \"./components/Movie/MoviePage\";\r\nimport ShowPage from \"./components/Show/ShowPage\";\r\nimport SeasonPage from \"./components/Show/SeasonPage\";\r\nimport EpisodePage from \"./components/Show/EpisodePage\";\r\nimport SearchPage from \"./components/Search/SearchPage\";\r\nimport LoginForm from \"./components/Modals/LoginForm\";\r\nimport RegistrationForm from \"./components/Modals/RegistrationForm\";\r\nimport ResetPasswordForm from \"./components/Modals/ResetPasswordForm\";\r\nimport ConfirmPage from \"./components/ConfirmPage\";\r\nimport ConfirmPasswordPage from \"./components/ConfirmPasswordPage\";\r\nimport UserPage from \"./components/UserPage/UserPage\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar/>\r\n        <div className=\"navbar\"></div>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route exact path=\"/game/:id\" component={GamePage} />\r\n            <Route exact path=\"/movie/:id\" component={MoviePage} />\r\n            <Route exact path=\"/show/:id\" component={ShowPage} />\r\n            <Route exact path=\"/show/:show_id/season/:number\" component={SeasonPage} />\r\n            <Route exact path=\"/show/:show_id/season/:season_number/episode/:episode_number\" component={EpisodePage} />\r\n            <Route exact path=\"/search/:query\" component={SearchPage} />\r\n            <Route exact path=\"/confirm/\" component={ConfirmPage} />\r\n            <Route exact path=\"/confirm_password/\" component={ConfirmPasswordPage} />\r\n            <Route exact path=\"/user/:userID\" component={UserPage} />\r\n            <Route render={function () { return <h1>Not Found</h1>; }} />\r\n            \r\n        </Switch>\r\n      <ToastContainer position=\"top-center\" hideProgressBar newestOnTop closeOnClick/>\r\n      <LoginForm/>\r\n      <RegistrationForm/>\r\n      <ResetPasswordForm/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// \r\nexport default Routes;","import React, {useEffect} from \"react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { connect } from 'react-redux'; \r\nimport Routes from \"./Routes\";\r\nimport * as actions from \"./store/actions\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App({onLoad}) {\r\n\r\n  useEffect(\r\n    () => {\r\n        onLoad();\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"flyout\">\r\n        <main>\r\n          <Routes />\r\n        </main>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n    onLoad: () => {\r\n      dispatch(actions.checkAuthorization());\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore, \r\n  applyMiddleware, \r\n  //combineReducers,\r\n   compose } from 'redux';\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './store/reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk) ) );\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\nexport default store;\r\n\r\n"],"sourceRoot":""}