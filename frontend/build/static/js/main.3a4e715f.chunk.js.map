{"version":3,"sources":["components/HomePage.js","store/reducers.js","settings.js","services/jwtAuth.js","services/requests.js","store/actions.js","store/actionTypes.js","components/Common/StatusButtonGroup.js","components/GamePage.js","components/MoviePage.js","components/SearchPage/CardGame.js","components/SearchPage/CardMovie.js","components/SearchPage/CardUser.js","components/Common/CategoriesTab.js","components/SearchPage/SearchPage.js","components/LoginForm.js","components/RegistrationForm.js","components/ConfirmPage.js","components/UserPage/GameBlock.js","components/UserPage/MovieBlock.js","components/UserPage/UserPage.js","components/Navbar.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","initialState","Map","auth","loggedIn","user","username","email","id","content","game","rawg","name","background_image","background_image_additional","developers","hltb","game_image_url","user_info","status","review","score","spent_time","movie","tmdb","title","poster_path","searchContent","games","movies","users","userPageContent","stats","openedPages","LoginForm","RegistrateForm","errors","registrate","gameRequest","movieRequest","userPage","isLoading","contentGame","contentMovie","searchGames","searchMovies","searchUsers","getLoggedIn","state","get","getContentGame","getContentMovie","getSearchContentGames","getSearchContentMovies","getSearchContentUsers","getAuthError","getRegistrateError","getGameRequestError","getUser","getLoginForm","getRegistrateForm","getIsLoadingContentGame","getIsLoadingContentMovie","getIsLoadingSearchGames","getIsLoadingSearchMovies","getIsLoadingSearchUsers","getIsLoadingUserPageContent","getUserPageContent","BACKEND_URL","GET_TOKEN_URL","REFRESH_TOKEN_URL","REGISTRATE_URL","CONFIRM_URL","GET_GAME_URL","GET_MOVIE_URL","USER_INFO_URL","axiosConfig","headers","getToken","password","a","axios","post","res","userData","jwt_decode","data","access","user_id","token","refreshToken","refresh","console","log","updateToken","registration","response","confirmation","uid64","patch","getGame","AuthStr","getMovie","setGameStatus","gameSlug","put","setMovieStatus","query","page","params","getUserInfo","userID","checkAuthorization","dispatch","localStorage","getItem","Date","now","type","setItem","resetAuthorization","removeItem","defaults","common","StatusButtonGroup","statuses","activeColor","onChangeStatus","userStatus","useState","activeStatus","setActiveStatus","useEffect","map","className","key","style","backgroundColor","onClick","connect","selectors","requestError","gameIsLoading","requestGame","Requests","then","result","toast","error","actions","openLoginForm","isOpen","getState","slug","useParams","genres","setGenres","metascoreBlock","setMetascoreBlock","setReview","spentTime","setSpentTime","setDevelopers","gameplay_main_extra","gameplay_main","gameplay_comletionist","hltbInfo","setHtlbInfo","newGenres","i","length","metacritic","newDevelopers","backgroundImage","active","spinner","text","md","size","src","alt","marginBottom","released","hidden","far","icon","gameplay_main_unit","stop","emptySymbol","fontSize","fullSymbol","n","initialRating","readonly","onChange","paddingTop","dangerouslySetInnerHTML","__html","description","paddingLeft","label","value","event","target","outline","disabled","document","getElementById","movieIsLoading","requestMovie","companies","setCompanies","vote_average","production_companies","newCompanies","backdrop_path","release_date","runtime","tagline","overview","CardGame","history","useHistory","push","CardMovie","CardUser","CategoriesTab","categories","onChangeCategory","activeCategory","setActiveCategory","category","color","height","borderColor","marginTop","gamesIsLoading","moviesIsLoading","usersIsLoading","searchGame","searchMovie","results","queryText","setQueryText","gamesCards","setGamesCards","moviesCards","setMoviesCards","usersCards","setUsersCards","onSubmit","preventDefault","placeholder","aria-label","authError","closeForm","logIn","login","toggle","centered","htmlFor","registrateArror","confirmEmailRequest","success","search","window","location","URLSearchParams","GameBlock","gameColumns","field","sort","columns","rows","gameTableData","setGameTableData","rawg_name","clickEvent","e","rawg_slug","games_count","games_total_spent_time","striped","bordered","small","info","barReverse","noBottomColumns","noRecordsFoundLabel","paginationLabel","entriesLabel","searchLabel","MovieBlock","movieColumns","movieTableData","setMovieTableData","tmdb_name","tmdb_id","movies_count","movies_total_spent_time","userIsLoading","userInfo","onLoginClick","onLogoutClick","onRegistrationClick","dark","expand","fixed","left","right","to","nav","caret","href","Routes","exact","path","component","GamePage","MoviePage","SearchPage","ConfirmPage","UserPage","render","position","hideProgressBar","newestOnTop","closeOnClick","React","Component","onLoad","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","setIn","applyMiddleware","thunk","ReactDOM","URL","process","origin","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3a4e715f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction HomePage () \r\n{\r\n    return (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Страница ещё не готова</h1>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nexport default HomePage;","import * as types from './actionTypes';\r\nimport { Map } from 'immutable';\r\n\r\n// Создаем reducer с начальным состоянием.\r\nconst initialState = Map(\r\n    {\r\n        auth: { loggedIn: false },\r\n        user: { username:\"\", email:\"\", id: null },\r\n        content: { \r\n            game: {\r\n                rawg: {\r\n                    name: \"\",\r\n                    background_image: \"\",\r\n                    background_image_additional: \"\",\r\n                    developers: [{}],\r\n                },\r\n                hltb:{\r\n                    game_image_url: \"\"\r\n                },\r\n                user_info:{\r\n                    status: null,\r\n                    review: \"\",\r\n                    score: 0,\r\n                    spent_time: 0\r\n                }\r\n            },\r\n            movie: {\r\n                tmdb: {\r\n                    title: \"\",\r\n                    poster_path: \"\",\r\n                    developers: [{}],\r\n                },\r\n                user_info:{\r\n                    status: null,\r\n                    review: \"\",\r\n                    score: 0,\r\n                    spent_time: 0\r\n                }\r\n            } \r\n        },\r\n        searchContent: {\r\n            games: [],\r\n            movies: [],\r\n            users: []\r\n        },\r\n        userPageContent: {\r\n            stats: {}\r\n        },\r\n        openedPages: { LoginForm: false, RegistrateForm: false },\r\n        errors: {auth: false, registrate: false, gameRequest: false, movieRequest: false, userPage: false },\r\n        isLoading: {contentGame: false, contentMovie: false, searchGames: false, searchMovies: false, userPageContent: false, searchUsers: false}\r\n    }\r\n);\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case types.SET_USER:\r\n        return state.setIn(['user'], action.user);\r\n    case types.SET_AUTH:\r\n        return state.setIn(['auth'], action.auth);\r\n\r\n    case types.SET_CONTENT_GAME:\r\n        return state.setIn(['content', 'game'], action.game);\r\n    case types.SET_CONTENT_MOVIE:\r\n        return state.setIn(['content', 'movie'], action.movie);\r\n\r\n    case types.SET_SEARCH_CONTENT_GAMES:\r\n        return state.setIn(['searchContent', 'games'], action.games);\r\n    case types.SET_SEARCH_CONTENT_MOVIES:\r\n        return state.setIn(['searchContent', 'movies'], action.movies);\r\n    case types.SET_SEARCH_CONTENT_USERS:\r\n        return state.setIn(['searchContent', 'users'], action.users);\r\n\r\n    case types.SET_CONTENT_GAME_USERINFO:\r\n        return state.setIn(['content', 'game', 'user_info'], action.user_info);\r\n    case types.SET_CONTENT_GAME_USERINFO_STATUS:\r\n        return state.setIn(['content', 'game', 'user_info', 'status'], action.status)\r\n    case types.SET_CONTENT_GAME_USERINFO_SCORE:\r\n        return state.setIn(['content', 'game', 'user_info', 'score'], action.score)\r\n\r\n    case types.SET_CONTENT_MOVIE_USERINFO:\r\n        return state.setIn(['content', 'movie', 'user_info'], action.user_info);\r\n\r\n    case types.SET_USER_PAGE_CONTENT:\r\n        return state.setIn(['userPageContent'], action.content)\r\n\r\n    case types.SET_LOGINFORM:\r\n        return state.setIn(['openedPages', 'LoginForm'], action.isOpen);\r\n    case types.SET_REGISTRATEFORM:\r\n        return state.setIn(['openedPages', 'RegistrateForm'], action.isOpen);\r\n\r\n    case types.AUTH_ERROR:\r\n        return state.setIn(['errors', 'auth'], action.error);\r\n    case types.REGISTRATE_ERROR:\r\n        return state.setIn(['errors', 'registrate'], action.error);\r\n    case types.GAME_REQUEST_ERROR:\r\n        return state.setIn(['errors', 'gameRequest'], action.error);\r\n    case types.MOVIE_REQUEST_ERROR:\r\n        return state.setIn(['errors', 'movieRequest'], action.error);\r\n    case types.USER_PAGE_ERROR:\r\n        return state.setIn(['errors', 'userPage'], action.error);\r\n\r\n    case types.SET_IS_LOADING_CONTENT_GAME:\r\n        return state.setIn(['isLoading', 'contentGame'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_MOVIE:\r\n        return state.setIn(['isLoading', 'contentMovie'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_GAMES:\r\n        return state.setIn(['isLoading', 'searchGames'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_MOVIES:\r\n        return state.setIn(['isLoading', 'searchMovies'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_CONTENT:\r\n        return state.setIn(['isLoading', 'userPageContent'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_USERS:\r\n        return state.setIn(['isLoading', 'searchUsers'], action.isLoading);\r\n    default:\r\n        return state;\r\n  }\r\n}\r\n\r\nexport function getLoggedIn(state) {\r\n    return state.get('auth').loggedIn;\r\n}\r\n\r\nexport function getAuth(state) {\r\n    return state.get('auth');\r\n}\r\n\r\nexport function getContentGame(state) {\r\n    return state.get('content').game;\r\n}\r\n\r\nexport function getContentMovie(state) {\r\n    return state.get('content').movie;\r\n}\r\n\r\nexport function getSearchContentGames(state) {\r\n    return state.get('searchContent').games;\r\n}\r\n\r\nexport function getSearchContentMovies(state) {\r\n    return state.get('searchContent').movies;\r\n}\r\n\r\nexport function getSearchContentUsers(state) {\r\n    return state.get('searchContent').users;\r\n}\r\n\r\nexport function getAuthError(state) {\r\n    return state.get('errors').auth;\r\n}\r\n\r\nexport function getRegistrateError(state) {\r\n    return state.get('errors').registrate;\r\n}\r\n\r\nexport function getGameRequestError(state) {\r\n    return state.get('errors').gameRequest;\r\n}\r\n\r\nexport function getMovieRequestError(state) {\r\n    return state.get('errors').movieRequest;\r\n}\r\n\r\nexport function getUserPageError(state) {\r\n    return state.get('errors').userPage;\r\n}\r\n\r\nexport function getUser(state) {\r\n    return state.get('user');\r\n}\r\n\r\nexport function getLoginForm(state) {\r\n    return state.get('openedPages').LoginForm;\r\n}\r\n\r\nexport function getRegistrateForm(state) {\r\n    return state.get('openedPages').RegistrateForm;\r\n}\r\n\r\nexport function getIsLoadingContentGame(state) {\r\n    return state.get('isLoading').contentGame;\r\n}\r\n\r\nexport function getIsLoadingContentMovie(state) {\r\n    return state.get('isLoading').contentMovie;\r\n}\r\n\r\nexport function getIsLoadingSearchGames(state) {\r\n    return state.get('isLoading').searchGames;\r\n}\r\n\r\nexport function getIsLoadingSearchMovies(state) {\r\n    return state.get('isLoading').searchMovies;\r\n}\r\n\r\nexport function getIsLoadingSearchUsers(state) {\r\n    return state.get('isLoading').searchUsers;\r\n}\r\n\r\nexport function getIsLoadingSearchAll(state) {\r\n    return (state.get('isLoading').searchUsers || state.get('isLoading').searchMovies || state.get('isLoading').searchGames);\r\n}\r\n\r\nexport function getIsLoadingUserPageContent(state) {\r\n    return state.get('isLoading').userPageContent;\r\n}\r\n\r\nexport function getUserPageContent(state){\r\n    return state.get('userPageContent');\r\n}","/** Время жизни токена в миллисекундах, после истечения которого будет запрошен новый токен*/\r\nexport const TOKEN_LIFETIME = 86000000; \r\n/**Адрес сервера*/\r\nexport const BACKEND_URL = \"http://35.193.124.214:8001/\";\r\n/**Адрес получения токена */\r\nexport const GET_TOKEN_URL = BACKEND_URL + \"users/auth/login/\"; \r\n/**Адрес обновления токена */\r\nexport const REFRESH_TOKEN_URL = BACKEND_URL + \"users/auth/refresh-token/\";\r\n/**Адрес регистрации */\r\nexport const REGISTRATE_URL = BACKEND_URL + \"users/auth/signup/\";\r\n/**Адрес подтверждения почты */\r\nexport const CONFIRM_URL = BACKEND_URL + \"users/auth/confirmation/\";\r\n/**Адрес запроса игры */\r\nexport const GET_GAME_URL = BACKEND_URL + \"games/game/\";\r\n/**Адрес поиска игр */\r\nexport const SEARCH_GAMES_URL = BACKEND_URL + \"games/search/\";\r\n/**Адрес запроса фильма */\r\nexport const GET_MOVIE_URL = BACKEND_URL + \"movies/movie/\";\r\n/**Адрес поиска фильмов */\r\nexport const SEARCH_MOVIES_URL = BACKEND_URL + \"movies/search/\";\r\n/**Адрес получения информации о пользователе */\r\nexport const USER_INFO_URL = BACKEND_URL + \"users/user/\";\r\n/**Адрес поиска пользователей */\r\nexport const SEARCH_USERS_URL = BACKEND_URL + \"users/search/\"; \r\n","import axios from \"axios\";\r\nimport jwt_decode from 'jwt-decode';\r\nimport {GET_TOKEN_URL, REFRESH_TOKEN_URL, REGISTRATE_URL, CONFIRM_URL} from '../settings';\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\n/**\r\n * ПОлучение токена авторизации. Токен сохраняется в localStorage\r\n * @param {string} username Имя пользователя\r\n * @param {string} password Пароль \r\n */\r\nexport async function getToken(username, password){\r\n    try{\r\n        const res = await axios.post(GET_TOKEN_URL, {\r\n                    username: username,\r\n                    password: password \r\n                }, axiosConfig);\r\n\r\n        let userData = jwt_decode(res.data.access);\r\n        let user = {username: userData.username, id: userData.user_id, email: userData.email}\r\n\r\n        return {token: res.data.access, refreshToken: res.data.refresh, user: user};\r\n    }catch(e){\r\n        console.log(\"axios error: \" + e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Функция обновления токена\r\n */\r\nexport async function updateToken(refreshToken){\r\n    if (typeof refreshToken !== 'undefined' & refreshToken != null)\r\n        try{\r\n            const res = await axios.post(REFRESH_TOKEN_URL, {\r\n                        refresh: refreshToken\r\n                    }, axiosConfig);\r\n                    \r\n            let userData = jwt_decode(res.data.access);\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n\r\n            return {token: res.data.access, user: user};\r\n        }catch(e){\r\n            console.log(\"exios error: \" + e);\r\n            return null;\r\n        }\r\n    return null;\r\n}\r\n\r\nexport async function registration(username, email, password) {\r\n   try{\r\n        const res = await axios.post(REGISTRATE_URL, \r\n            {  username: username,\r\n                email: email, \r\n                password: password \r\n            }, axiosConfig);\r\n        let data = res.data;\t\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e.response);\r\n        return e.response;\r\n    }\r\n}\r\n\r\nexport async function confirmation(uid64, token) {\r\n    try{\r\n        console.log(uid64);\r\n        console.log(token);\r\n        const res = await axios.patch(CONFIRM_URL, \r\n             {  \r\n                uid64: uid64,\r\n                token: token\r\n             }, \r\n             axiosConfig);\r\n        let data = res.data;\t\r\n        return data;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }\r\n","import axios from \"axios\";\r\nimport {GET_GAME_URL, SEARCH_GAMES_URL, USER_INFO_URL, SEARCH_MOVIES_URL, GET_MOVIE_URL, SEARCH_USERS_URL} from \"../settings\";\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\naxios.defaults.headers.common = {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getGame(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о фильме\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID фильма  \r\n * @returns {object} Информация о фильме\r\n */\r\nexport async function getMovie(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса игры\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус игры\r\n * @param {string} gameSlug Слаг игры\r\n */\r\nexport async function setGameStatus(token, gameSlug, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        console.log(user_info);\r\n        const res = await axios.put(GET_GAME_URL + gameSlug + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса фильма\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус фильма\r\n * @param {string} movieID ID фильма\r\n */\r\nexport async function setMovieStatus(token, id, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        console.log(user_info);\r\n        const res = await axios.put(GET_MOVIE_URL + id + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса игры\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Объект статуса игры\r\n * @param {string} gameSlug Слаг игры\r\n \r\nexport async function patchGameStatus(token, gameSlug, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.patch(GET_GAME_URL + gameSlug + \"/\", \r\n        {status: user_info.status, score: user_info.score, review: user_info.review, spent_time: user_info.spent_time }, { 'headers': { 'Authorization': AuthStr } });\r\n        console.log(res.data);\r\n        if (res.status === 204 || res.status === 201|| res.status === 200)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}*/\r\n\r\n\r\n/**\r\n * Запрос на поиск игр\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchGames(query, page){\r\n    try{\r\n        const res = await axios.get(SEARCH_GAMES_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск фильмов\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchMovies(query, page){\r\n    try{\r\n        const res = await axios.get(SEARCH_MOVIES_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n            console.log(res);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск пользователей\r\n * @param {string} query Поисковый запрос\r\n */\r\nexport async function searchUsers(query){\r\n    try{\r\n        const res = await axios.get(SEARCH_USERS_URL, { params : {query: query} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n            console.log(res);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getUserInfo(token, userID) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}","import * as actionTypes from './actionTypes';\r\nimport * as selectors from './reducers';\r\nimport {getToken, updateToken, registration, confirmation} from \"../services/jwtAuth\";\r\nimport {TOKEN_LIFETIME} from \"../settings\";\r\nimport * as Requests from \"../services/requests\";\r\nimport { toast } from \"react-toastify\";\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nexport function tryAuth(login, password) {\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.AUTH_ERROR,\r\n            error: false \r\n        });\r\n\r\n      try {\r\n        const res = await getToken(login, password);\r\n        if (res !== null){\r\n            localStorage.setItem('refreshToken', res.refreshToken);\r\n            localStorage.setItem('token', res.token);\r\n            localStorage.setItem('tokenTime', Date.now());\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: res.user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_LOGINFORM,\r\n                isOpen: false \r\n            });\r\n        }else{\r\n            dispatch({\r\n                type: actionTypes.AUTH_ERROR,\r\n                error: true \r\n            });\r\n        }\r\n            \r\n      }catch (error) {\r\n        console.error(error);\r\n        dispatch({\r\n            type: actionTypes.AUTH_ERROR,\r\n            error: true \r\n        });\r\n      }\r\n    };\r\n}\r\n\r\nexport function checkAuthorization(){\r\n    return async(dispatch) => {\r\n        if (localStorage.getItem('token') === null | Date.now() - localStorage.getItem('tokenTime') > TOKEN_LIFETIME){\r\n            const res = await updateToken(localStorage.getItem(\"refreshToken\"));\r\n            if (res !== null){\r\n                dispatch({\r\n                    type: actionTypes.SET_AUTH,\r\n                    auth: { loggedIn: true }, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: res.user, \r\n                });\r\n                localStorage.setItem('token', res.token);\r\n                localStorage.setItem('tokenTime', Date.now());\r\n                return true;\r\n            }else{\r\n                //toast.warn(\"Произошла ошибка авторизации. Зайдите ещё раз\");\r\n                dispatch(resetAuthorization());\r\n                return false;\r\n            } \r\n        }else{\r\n            let userData = jwt_decode(localStorage.getItem('token'));\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            return true;\r\n        }\r\n            \r\n    }\r\n}\r\n\r\nexport function resetAuthorization(){\r\n    return async(dispatch) => {\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('tokenTime');\r\n        dispatch({\r\n            type: actionTypes.SET_AUTH,\r\n            auth: { loggedIn: false }, \r\n        });\r\n        dispatch({\r\n            type: actionTypes.SET_USER,\r\n            user: { username:\"\", id: null, email:\"\" }, \r\n        });\r\n    }\r\n}\r\n\r\nexport function registrationRequest(username, email, password){\r\n    return async(dispatch) => {\r\n        registration(username, email, password).then((result) => {\r\n            console.log(result);\r\n            if (result.status !== 400){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: { login: result.username, email: result.email }, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.REGISTRATE_ERROR,\r\n                    error: false \r\n                });\r\n            }\r\n            else{\r\n                for (let error in result.data)\r\n                    toast.error(result.data[error][0]);\r\n                   \r\n                dispatch({\r\n                    type: actionTypes.REGISTRATE_ERROR,\r\n                    error: true \r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function confirmEmailRequest(uid64, token){\r\n    return async() => {\r\n        confirmation(uid64, token).then((result) => {\r\n            console.log(result);\r\n            if (result.status !== 400){\r\n                toast.success(\"Почта подтверждена!\");\r\n            }\r\n            else{\r\n                toast.error(result.data);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestGame(id){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.SET_IS_LOADING_CONTENT_GAME,\r\n            isLoading: true\r\n        });\r\n        Requests.getGame(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME,\r\n                    game: result, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_IS_LOADING_CONTENT_GAME,\r\n                    isLoading: false\r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Игра не найдена!\");\r\n                dispatch({\r\n                    type: actionTypes.GAME_REQUEST_ERROR,\r\n                    error: true \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_IS_LOADING_CONTENT_GAME,\r\n                    isLoading: false\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestMovie(id){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.SET_IS_LOADING_CONTENT_MOVIE,\r\n            isLoading: true\r\n        });\r\n        Requests.getMovie(localStorage.getItem('token'), id).then((result) => {\r\n            console.log(result);\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_MOVIE,\r\n                    movie: result, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_IS_LOADING_CONTENT_MOVIE,\r\n                    isLoading: false\r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Фильм не найден!\");\r\n                dispatch({\r\n                    type: actionTypes.MOVIE_REQUEST_ERROR,\r\n                    error: true \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_IS_LOADING_CONTENT_MOVIE,\r\n                    isLoading: false\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function setGameStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setGameStatus(localStorage.getItem('token'), selectors.getContentGame(getState()).rawg.slug, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_GAME_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/*export function patchGameStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.patchGameStatus(localStorage.getItem('token'), selectors.getContentGame(getState()).rawg.slug, user_info).then((result) => {\r\n                console.log(result)\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_GAME_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}*/\r\n\r\nexport function requestUserPageContent(username){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT,\r\n            isLoading: true\r\n        });\r\n        Requests.getUserInfo(localStorage.getItem('token'), username).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_CONTENT,\r\n                    content: result, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT,\r\n                    isLoading: false\r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Профиль не найден!\");\r\n                dispatch({\r\n                    type: actionTypes.USER_PAGE_ERROR,\r\n                    error: true \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT,\r\n                    isLoading: false\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchGames(query, page){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.SET_IS_LOADING_SEARCH_GAMES,\r\n            isLoading: true\r\n        });\r\n        Requests.searchGames(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_GAMES,\r\n                    games: result, \r\n                });\r\n            }\r\n            dispatch({\r\n                type: actionTypes.SET_IS_LOADING_SEARCH_GAMES,\r\n                isLoading: false\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchMovies(query, page){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.SET_IS_LOADING_SEARCH_MOVIES,\r\n            isLoading: true\r\n        });\r\n        Requests.searchMovies(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_MOVIES,\r\n                    movies: result.results, \r\n                });\r\n            }\r\n            dispatch({\r\n                type: actionTypes.SET_IS_LOADING_SEARCH_MOVIES,\r\n                isLoading: false\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport function setMovieStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setMovieStatus(localStorage.getItem('token'), selectors.getContentMovie(getState()).tmdb.id, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_MOVIE_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function searchUsers(query){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.SET_IS_LOADING_SEARCH_USERS,\r\n            isLoading: true\r\n        });\r\n        Requests.searchUsers(query).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_USERS,\r\n                    users: result, \r\n                });\r\n            }\r\n            dispatch({\r\n                type: actionTypes.SET_IS_LOADING_SEARCH_USERS,\r\n                isLoading: false\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport function setUser(user) {\r\n    return({ type: actionTypes.SET_USER, user: user });\r\n}\r\n\r\nexport function openLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: false  });\r\n}\r\n\r\nexport function openRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: false  });\r\n}","export const SET_USER = 'SET_USER';\r\nexport const SET_AUTH = \"SET_AUTH\";\r\nexport const SET_LOGINFORM = \"SET_LOGINFORM\";\r\nexport const SET_REGISTRATEFORM = \"SET_REGISTRATEFORM\";\r\nexport const SET_CONTENT_GAME = \"SET_CONTENT_GAME\";\r\nexport const SET_CONTENT_MOVIE = \"SET_CONTENT_MOVIE\";\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const REGISTRATE_ERROR = \"REGISTRATE_ERROR\";\r\nexport const GAME_REQUEST_ERROR = \"GAME_REQUEST_ERROR\";\r\nexport const MOVIE_REQUEST_ERROR = \"MOVIE_REQUEST_ERROR\";\r\nexport const USER_PAGE_ERROR = \"USER_PAGE_ERROR\";\r\nexport const SET_CONTENT_GAME_USERINFO = \"SET_CONTENT_GAME_USERINFO\";\r\nexport const SET_CONTENT_GAME_USERINFO_STATUS = \"SET_CONTENT_GAME_USERINFO_STATUS\";\r\nexport const SET_CONTENT_GAME_USERINFO_SCORE = \"SET_CONTENT_GAME_USERINFO_SCORE\";\r\nexport const SET_CONTENT_GAME_USERINFO_REVIEW = \"SET_CONTENT_GAME_USERINFO_REVIEW\";\r\nexport const SET_CONTENT_MOVIE_USERINFO = \"SET_CONTENT_MOVIE_USERINFO\";\r\nexport const SET_SEARCH_CONTENT_GAMES = \"SET_SEARCH_CONTENT_GAMES\";\r\nexport const SET_SEARCH_CONTENT_MOVIES = \"SET_SEARCH_CONTENT_MOVIES\";\r\nexport const SET_SEARCH_CONTENT_USERS = \"SET_SEARCH_CONTENT_USERS\";\r\nexport const SET_IS_LOADING_CONTENT_GAME = \"SET_IS_LOADING_CONTENT_GAME\";\r\nexport const SET_IS_LOADING_CONTENT_MOVIE = \"SET_IS_LOADING_CONTENT_MOVIE\";\r\nexport const SET_IS_LOADING_SEARCH_GAMES = \"SET_IS_LOADING_SEARCH_GAMES\";\r\nexport const SET_IS_LOADING_SEARCH_MOVIES = \"SET_IS_LOADING_SEARCH_MOVIES\";\r\nexport const SET_IS_LOADING_SEARCH_USERS = \"SET_IS_LOADING_SEARCH_USERS\";\r\nexport const SET_IS_LOADING_USER_PAGE_CONTENT = \"SET_IS_LOADING_USER_PAGE_CONTENT\";\r\nexport const SET_USER_PAGE_CONTENT = \"SET_USER_PAGE_CONTENT\";\r\n","import React, {useState, useEffect} from \"react\";\r\n\r\n\r\nfunction StatusButtonGroup( {statuses, activeColor, onChangeStatus, userStatus} ) {\r\n    const [activeStatus, setActiveStatus] = useState('');\r\n\r\n    useEffect(() =>{\r\n            setActiveStatus(userStatus?userStatus:statuses[0]);\r\n        },\r\n        [statuses, userStatus]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            {statuses.map((status) => <button className={'contentStatuses'} \r\n                                            key={status}\r\n                                            style={{backgroundColor: (activeStatus === status?activeColor:'#000000')}}\r\n                                            onClick={()=>{ \r\n                                                if (onChangeStatus(status)){\r\n                                                    setActiveStatus(status);\r\n                                                }\r\n                                            }}>\r\n                                            {status}\r\n                                        </button>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default StatusButtonGroup;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\nimport StatusButtonGroup from \"./Common/StatusButtonGroup\";\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction GamePage ( {requestGame, game, requestError, loggedIn, openLoginForm, setGameStatus, gameIsLoading\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [spentTime, setSpentTime] = useState(0);\r\n    const [developers, setDevelopers] = useState(\"\");\r\n    const [hltbInfo, setHtlbInfo] = useState({gameplay_main_extra: -1, gameplay_main: -1, gameplay_comletionist: -1});\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestGame(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestGame, loggedIn]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (game.rawg.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < game.rawg.genres.length; i++){\r\n                    newGenres += game.rawg.genres[i].name;\r\n                    if (i !== game.rawg.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                 setGenres(newGenres);   \r\n            }\r\n\r\n            if (game.rawg.metacritic){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{game.rawg.metacritic}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">Metascore</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            if (game.hltb){\r\n                setHtlbInfo(game.hltb);\r\n            }else{\r\n                setHtlbInfo({gameplay_main_extra: -1, gameplay_main: -1, gameplay_comletionist: -1});\r\n            }\r\n\r\n            if (game.user_info){\r\n                setReview(game.user_info.review);\r\n                setSpentTime(game.user_info.spent_time);\r\n            }\r\n\r\n            if (game.rawg.developers){\r\n                let newDevelopers = \"\"\r\n                for (let i = 0; i < game.rawg.developers.length; i++){\r\n                    newDevelopers += game.rawg.developers[i].name;\r\n                    if (i !== game.rawg.developers.length - 1)\r\n                    newDevelopers += \", \";\r\n                }\r\n                setDevelopers(newDevelopers);   \r\n            }\r\n\t\t},\r\n\t\t[game]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${game.rawg.background_image_additional?game.rawg.background_image_additional:game.rawg.background_image})`}}/>\r\n                <LoadingOverlay\r\n                    active={gameIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"gameContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"gameContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\">\r\n                                        <img src={game.rawg.background_image} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{game.rawg.name}</h1>\r\n                                        <p style={{marginBottom: \"2px\"}}>Разработчики: {developers}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Дата релиза: {game.rawg.released}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Жанр: {genres}</p>\r\n                                        <p style={{marginBottom: \"4px\"}} \r\n                                            hidden={hltbInfo.gameplay_main < 0}>\r\n                                            <MDBIcon far icon=\"clock\" /> Время прохождения: {hltbInfo.gameplay_main} {hltbInfo.gameplay_main_unit}\r\n                                        </p>\r\n                                        <br/>\r\n                                        <Rating stop={10}\r\n                                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                            initialRating={game.user_info?game.user_info.score:0}\r\n                                            readonly={!loggedIn | (!game.user_info)}\r\n                                            onChange={(score) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setGameStatus({score: score });\r\n                                                }}\r\n                                            }\r\n                                        /> <br/>\r\n                                        <StatusButtonGroup\r\n                                            statuses={['Не играл', 'Буду играть', 'Играю', 'Дропнул', 'Прошел']}\r\n                                            activeColor='#4527a0' \r\n                                            userStatus={game.user_info?game.user_info.status:'Не играл'}\r\n                                            onChangeStatus={(status) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                   setGameStatus({ status: status });\r\n                                                }\r\n                                            }}/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"gameContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: game.rawg.description}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"20px\"}}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        \r\n                                        <MDBInput \r\n                                            type=\"textarea\" \r\n                                            id=\"reviewInput\"\r\n                                            label=\"Ваш отзыв\" \r\n                                            value={review}\r\n                                            onChange={(event) =>setReview(event.target.value)}\r\n                                            outline\r\n                                        />\r\n                                        <MDBInput\r\n                                            type=\"number\"\r\n                                            id=\"spentTimeInput\"\r\n                                            label=\"Время прохождения (часы)\" \r\n                                            value={spentTime}\r\n                                            onChange={(event) =>setSpentTime(event.target.value)}\r\n                                        />\r\n                                        <button \r\n                                            className={'savePreviewButton'} \r\n                                            disabled={!loggedIn | (!game.user_info)}\r\n                                            onClick={() => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setGameStatus({   review: document.getElementById('reviewInput').value, spent_time: document.getElementById('spentTimeInput').value });\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            >\r\n                                            Сохранить\r\n                                        </button>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBContainer>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getGameRequestError(state),\r\n    game: selectors.getContentGame(state),\r\n    gameIsLoading: selectors.getIsLoadingContentGame(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestGame: (id) => {\r\n            dispatch(actions.requestGame(id));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        /*patchGameStatus: (user_info) => {\r\n            dispatch(actions.patchGameStatus(user_info));\r\n        },*/\r\n        setGameStatus: (status) => {\r\n            dispatch(actions.setGameStatus(status));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\nimport StatusButtonGroup from \"./Common/StatusButtonGroup\";\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction MoviePage ( {requestMovie, movie, loggedIn, movieIsLoading, setMovieStatus, openLoginForm\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [companies, setCompanies] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestMovie(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestMovie, loggedIn]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (movie.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{movie.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            if (movie.tmdb.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < movie.tmdb.genres.length; i++){\r\n                    newGenres += movie.tmdb.genres[i].name;\r\n                    if (i !== movie.tmdb.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                setGenres(newGenres);   \r\n            }\r\n\r\n            if (movie.tmdb.production_companies){\r\n                let newCompanies = \"\"\r\n                for (let i = 0; i < movie.tmdb.production_companies.length; i++){\r\n                    newCompanies += movie.tmdb.production_companies[i].name;\r\n                    if (i !== movie.tmdb.production_companies.length - 1)\r\n                        newCompanies += \", \";\r\n                }\r\n                setCompanies(newCompanies);   \r\n            }\r\n\r\n            if (movie.user_info){\r\n                setReview(movie.user_info.review);\r\n            }\r\n\t\t},\r\n\t\t[movie]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + movie.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={movieIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"movieContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"movieContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{movie.tmdb.title}</h1>\r\n                                        <p style={{marginBottom: \"2px\"}}>Дата релиза: {movie.tmdb.release_date}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Продолжительность (мин): {movie.tmdb.runtime}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Жанр: {genres}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Компания: {companies}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Слоган: {movie.tmdb.tagline}</p>\r\n                                        <br/>\r\n                                        <Rating stop={10}\r\n                                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                            initialRating={movie.user_info?movie.user_info.score:0}\r\n                                            readonly={!loggedIn | (!movie.user_info)}\r\n                                            onChange={(score) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setMovieStatus({score: score });\r\n                                                }}\r\n                                            }\r\n                                        /> <br/>\r\n                                        <StatusButtonGroup loggedIn={loggedIn} \r\n                                            statuses={['Не смотрел', 'Буду смотреть', 'Дропнул', 'Посмотрел']}\r\n                                            activeColor='#4527a0' \r\n                                            userStatus={movie.user_info?movie.user_info.status:'Не смотрел'}\r\n                                            onChangeStatus={(status) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                   setMovieStatus({ status: status });\r\n                                                }\r\n                                            }}/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"movieContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: movie.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"20px\"}}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        \r\n                                        <MDBInput \r\n                                            type=\"textarea\" \r\n                                            id=\"reviewInput\"\r\n                                            label=\"Ваш отзыв\" \r\n                                            value={review}\r\n                                            onChange={(event) =>setReview(event.target.value)}\r\n                                            outline\r\n                                        />\r\n                                        <button \r\n                                            className={'savePreviewButton'} \r\n                                            disabled={!loggedIn | (!movie.user_info)}\r\n                                            onClick={() => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setMovieStatus({   review: document.getElementById('reviewInput').value });\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            >\r\n                                            Сохранить\r\n                                        </button>\r\n                                    </MDBCol>\r\n                            </MDBContainer>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getGameRequestError(state),\r\n    movie: selectors.getContentMovie(state),\r\n    movieIsLoading: selectors.getIsLoadingContentMovie(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestMovie: (id) => {\r\n            dispatch(actions.requestMovie(id));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        setMovieStatus: (status) => {\r\n            dispatch(actions.setMovieStatus(status));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviePage);\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardGame( {game} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [game]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardGame\" \r\n            style={{backgroundImage: `url(${game.background_image})`}}\r\n            onClick={() => history.push('/game/' + game.slug)}>\r\n            <h3 className=\"searchCardGame\" >{game.name}</h3>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardGame;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardMovie ( {movie} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [movie]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardGame\" \r\n            style={{backgroundImage: `url(${\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.poster_path})`}}\r\n            onClick={() => history.push('/movie/' + movie.id)}>\r\n            <h3 className=\"searchCardGame\" >{movie.title}</h3>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardMovie;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardUser ( {user} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [user]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardGame\" \r\n            style={{backgroundImage: `url(${'http://twitchinfo.ru/wp-content/uploads/2020/08/Как-сделать-портрет-по-фотографии-Аватарку-для-Youtube-VK-INSTAGRAMM-TIKTOK-TWITCH-0-12-03-920-1024x576.jpg'})`}}\r\n            onClick={() => history.push('/user/' + user.id)}>\r\n            <h3 className=\"searchCardGame\" >{user.username}</h3>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardUser;\r\n","import React, {useState, useEffect} from \"react\";\r\n\r\n\r\nfunction CategoriesTab( {categories, activeColor, onChangeCategory} ) {\r\n    const [activeCategory, setActiveCategory] = useState(categories[0]);\r\n\r\n    return(\r\n        <div>\r\n            {categories.map((category) => <button className={'userPageCategoriesTab'} \r\n                                            key={category}\r\n                                            style={{color: (activeCategory === category?activeColor:'#000000')}}\r\n                                            onClick={()=>{ \r\n                                                setActiveCategory(category);\r\n                                                onChangeCategory(category);\r\n                                            }}>\r\n                                            {category}\r\n                                        </button>) }\r\n            <br/>\r\n`           <hr style={{ color: activeColor, backgroundColor: '#6C0AAB', height: 2.5,  borderColor : '#6C0AAB', marginTop: \"-16px\", marginBottom: \"-10px\" }}/>`\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default CategoriesTab;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBFormInline\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport CardGame from './CardGame';\r\nimport CardMovie from './CardMovie';\r\nimport CardUser from './CardUser';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction SearchPage ( { loggedIn, openLoginForm, gamesIsLoading, moviesIsLoading, usersIsLoading, searchGame, games, searchMovie, movies, searchUsers, users } ) {\r\n    let history = useHistory();\r\n    let { query } = useParams();\r\n    const [queryText, setQueryText] = useState(\"\");\r\n    const [gamesCards, setGamesCards] = useState(\"\");\r\n    const [moviesCards, setMoviesCards] = useState(\"\");\r\n    const [usersCards, setUsersCards] = useState(\"\");\r\n\r\n    const [activeCategory, setActiveCategory] = useState(\"Всё\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            searchGame(query, 1);\r\n            searchMovie(query, 1);\r\n            searchUsers(query);\r\n            setQueryText(query);\r\n\t\t},\r\n\t\t[query]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setGamesCards(<div className=\"searchCardsGroup\">{games.map(game => <CardGame game={game} key={game.id}/>)}</div>);\r\n\t\t},\r\n\t\t[games]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setMoviesCards(<div className=\"searchCardsGroup\">{movies.map(movie => <CardMovie movie={movie} key={movie.id}/>)}</div>);\r\n\t\t},\r\n\t\t[movies]\r\n    );\r\n\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setUsersCards(<div className=\"searchCardsGroup\">{users.map(user => <CardUser user={user} key={user.username}/>)}</div>);\r\n\t\t},\r\n\t\t[users]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg searchBG\"/> \r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"searchPage\"> \r\n                            <h1>Поиск</h1>\r\n                            <MDBFormInline className=\"md-form\"\r\n                                onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput2').value); return false; }}>\r\n                                <MDBIcon icon=\"search\" />\r\n                                <input \r\n                                    className=\"form-control form-control-sm ml-3 w-50\" \r\n                                    type=\"text\" \r\n                                    placeholder=\"Найти\" \r\n                                    aria-label=\"Search\" \r\n                                    id=\"searchInput2\" \r\n                                    value={queryText} \r\n                                    onChange={(event) =>setQueryText(event.target.value)}/>\r\n                            </MDBFormInline>\r\n\r\n                            <h1>Результаты поиска</h1>\r\n                                <CategoriesTab\r\n                                    categories={['Всё', 'Игры', 'Фильмы', 'Пользователи']}\r\n                                    activeColor='#4527a0' \r\n                                    onChangeCategory={(category) => {\r\n                                        setActiveCategory(category);\r\n                                    }}/>\r\n\r\n                                <LoadingOverlay\r\n                                    active={gamesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем игры...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Игры'}>\r\n                                        <h3>Игры</h3>\r\n                                        {gamesCards}\r\n                                    </div>\r\n                                </LoadingOverlay>\r\n\r\n                                <LoadingOverlay\r\n                                    active={moviesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем фильмы...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Фильмы'}>\r\n                                        <h3>Фильмы</h3>\r\n                                        {moviesCards}\r\n                                    </div>       \r\n                                </LoadingOverlay>\r\n                                \r\n                                <LoadingOverlay\r\n                                    active={usersIsLoading}\r\n                                    spinner\r\n                                    text='Ищем пользователей...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Пользователи'}>\r\n                                        <h3>Пользователи</h3>\r\n                                        {usersCards}\r\n                                    </div>    \r\n                                </LoadingOverlay>\r\n                                \r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    gamesIsLoading: selectors.getIsLoadingSearchGames(state),\r\n    moviesIsLoading: selectors.getIsLoadingSearchMovies(state),\r\n    usersIsLoading: selectors.getIsLoadingSearchUsers(state),\r\n    games: selectors.getSearchContentGames(state),\r\n    movies: selectors.getSearchContentMovies(state),\r\n    users: selectors.getSearchContentUsers(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        searchGame: (query, page) => {\r\n            dispatch(actions.searchGames(query, page));\r\n        },\r\n        searchMovie: (query, page) => {\r\n            dispatch(actions.searchMovies(query, page));\r\n        },\r\n        searchUsers: (query) => {\r\n            dispatch(actions.searchUsers(query));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);\r\n","import React from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../store/actions';\r\nimport * as selectors from '../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction LoginForm( {isOpen, closeForm, logIn, authError} ) {\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody>\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form onSubmit={(event) => {event.preventDefault();\r\n\t\t\t\t\t\t\t\t\t\tlogIn(document.getElementById(\"loginInput\").value,\r\n\t\t\t\t\t\t\t\t\t\t\tdocument.getElementById(\"passwordInput\").value)}}>\r\n\t              <p className=\"h4 text-center mb-4\">Войти</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!authError} >Неверный логин или пароль!</p>\r\n\t              <label htmlFor=\"loginInput\" className=\"grey-text\">\r\n\t                Логин\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" />\r\n\t              <br />\r\n\t              <label htmlFor=\"passwordInput\" className=\"grey-text\">\r\n\t                Пароль\r\n\t              </label>\r\n\t              <input type=\"password\" id=\"passwordInput\" className=\"form-control\" />\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn style={{color: \"white\", backgroundColor: \"#6C0AAB\"}} type=\"submit\">\r\n\t\t\t\t\t\tВойти\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getLoginForm(state),\r\n\tauthError: selectors.getAuthError(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeLoginForm());\r\n\t\t},\r\n\t\tlogIn: (login, password) => {\r\n\t\t\tdispatch(actions.tryAuth(login, password));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n","import React from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../store/actions';\r\nimport * as selectors from '../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction RegistrationForm( {isOpen, closeForm, registrate, registrateArror, user} ) {\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody>\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form>\r\n\t              <p className=\"h4 text-center mb-4\">Регистрация</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!registrateArror} >Ошибка регистрации!</p>\r\n                  <p className=\"note note-success\" hidden={user.email===\"\"} >{user.login}, добро пожаловать! Осталось только подтвердить вашу почту: {user.email}</p>\r\n\t              <label htmlFor=\"loginInput\" className=\"grey-text\">\r\n\t                Никнейм\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" />\r\n\t              <br />\r\n                  <label htmlFor=\"emailInput\" className=\"grey-text\">\r\n\t                Электронная почта\r\n\t              </label>\r\n\t              <input type=\"email\" id=\"emailInput\" className=\"form-control\" />\r\n\t              <br />\r\n\t              <label htmlFor=\"passwordInput\" className=\"grey-text\">\r\n\t                Пароль\r\n\t              </label>\r\n\t              <input type=\"password\" id=\"passwordInput\" className=\"form-control\" />\r\n\t              <div className=\"text-center mt-4\">\r\n                    <MDBBtn style={{color: \"white\", backgroundColor: \"#6C0AAB\"}} type=\"button\" onClick={() => registrate(document.getElementById(\"loginInput\").value,\r\n                                                                                                                        document.getElementById(\"emailInput\").value,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    document.getElementById(\"passwordInput\").value)}>\r\n\t\t\t\t\t\tЗарегистрироваться\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getRegistrateForm(state),\r\n    registrateArror: selectors.getRegistrateError(state),\r\n    user: selectors.getUser(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeRegistrateForm());\r\n\t\t},\r\n\t\tregistrate: (login, email, password) => {\r\n\t\t\tdispatch(actions.registrationRequest(login, email, password));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);\r\n","import React, {\r\n    useEffect\r\n} from \"react\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ConfirmPage ( {confirmEmailRequest} ) \r\n{\r\n\tlet search = window.location.search;\r\n\tlet params = new URLSearchParams(search);\r\n\tlet uid64 = params.get('uid64');\r\n\tlet token = params.get('token');\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconfirmEmailRequest(uid64, token);\r\n\t\t},\r\n\t\t[]\r\n\t);\r\n\t\r\n    return (\r\n\t\t\t<div>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        confirmEmailRequest: (uid64, token) => {\r\n            dispatch(actions.confirmEmailRequest(uid64, token));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmPage);","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction GameBlock ( {games, stats} ) {\r\n    let history = useHistory();\r\n\r\n    const gameColumns = [\r\n        {\r\n          label: 'Название',\r\n          field: 'name',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Статус',\r\n          field: 'status',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Оценка',\r\n          field: 'score',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Отзыв',\r\n          field: 'review',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Время прохождения',\r\n          field: 'spent_time',\r\n          sort: 'asc'\r\n        }\r\n      ];\r\n\r\n    const [gameTableData, setGameTableData] = useState({\r\n        columns: gameColumns,\r\n        rows: [\r\n        ]\r\n    });\r\n\r\n    useEffect(() =>{\r\n            if (games)\r\n            {\r\n                setGameTableData({\r\n                    columns: gameColumns,\r\n                    rows: games.map((game) => {\r\n                        return {\r\n                                name: game.game.rawg_name,\r\n                                status: game.status,\r\n                                score: game.score,\r\n                                review: game.review,\r\n                                spent_time: game.spent_time,\r\n                                clickEvent: (e) => {\r\n                                    //window.open('/game/' + game.game.rawg_slug);\r\n                                    history.push('/game/' + game.game.rawg_slug)\r\n                                }\r\n                            }      \r\n                    })\r\n                });\r\n            }\r\n        },\r\n        [games]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            <p>Игр сыграно: {stats.games_count}, часов наиграно: {stats.games_total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={gameTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать игр на странице\"\r\n                searchLabel='Поиск'\r\n                />\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default GameBlock;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction MovieBlock ( {movies, stats} ) {\r\n    let history = useHistory();\r\n\r\n    const movieColumns = [\r\n      {\r\n        label: 'Название',\r\n        field: 'name',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Статус',\r\n        field: 'status',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Оценка',\r\n        field: 'score',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Отзыв',\r\n        field: 'review',\r\n        sort: 'asc'\r\n      }\r\n    ];\r\n\r\n  const [movieTableData, setMovieTableData] = useState({\r\n      columns: movieColumns,\r\n      rows: [\r\n      ]\r\n  });\r\n\r\n    useEffect(() =>{\r\n            if (movies)\r\n            {\r\n              setMovieTableData({\r\n                columns: movieColumns,\r\n                rows: movies.map((movie) => {\r\n                    return {\r\n                            name: movie.movie.tmdb_name,\r\n                            status: movie.status,\r\n                            score: movie.score,\r\n                            review: movie.review,\r\n                            clickEvent: (e) => {\r\n                                //window.open('/game/' + game.game.rawg_slug);\r\n                                history.push('/movie/' + movie.movie.tmdb_id)\r\n                            }\r\n                        }      \r\n                  })\r\n              });\r\n            }\r\n        },\r\n        [movies]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            <p>Фильмов посмотрено: {stats.movies_count}, часов просмотра: {stats.movies_total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={movieTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать фильмов на странице\"\r\n                searchLabel='Поиск'\r\n                />\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default MovieBlock;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer\r\n} from \"mdbreact\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport GameBlock from './GameBlock';\r\nimport MovieBlock from './MovieBlock';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction UserPage ( { userIsLoading, getUserInfo, userInfo }) \r\n{ \r\n    let history = useHistory();\r\n    let { username } = useParams();\r\n    const [activeCategory, setActiveCategory] = useState(\"\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            getUserInfo(username);\r\n\t\t},\r\n\t\t[username]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setActiveCategory(<GameBlock games={userInfo.games} stats={userInfo.stats} />);\r\n\t\t},\r\n\t\t[userInfo]\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"bg searchBG\"/> \r\n            <LoadingOverlay\r\n                active={userIsLoading}\r\n                spinner\r\n                text='Загрузка...'\r\n                >\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                    <MDBCol className=\"searchPage\"> \r\n                        <h1>Информация о пользователе {userInfo.username}</h1>\r\n                        <CategoriesTab\r\n                            categories={['Игры', 'Фильмы']}\r\n                            activeColor='#4527a0' \r\n                            onChangeCategory={(category) => {\r\n                                if (category === 'Игры')\r\n                                    setActiveCategory(<GameBlock games={userInfo.games} stats={userInfo.stats} />);\r\n                                if (category === 'Фильмы')\r\n                                    setActiveCategory(<MovieBlock movies={userInfo.movies} stats={userInfo.stats} />);\r\n                            }}/>\r\n                        {activeCategory}\r\n                    </MDBCol>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n            </LoadingOverlay>\r\n        </div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    userIsLoading: selectors.getIsLoadingUserPageContent(state),\r\n    userInfo: selectors.getUserPageContent(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        getUserInfo: (user_id) => {\r\n            dispatch(actions.requestUserPageContent(user_id));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage);","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nimport {\r\n\tMDBNavbar,\r\n    MDBNavItem,\r\n    MDBNavbarBrand,\r\n    MDBNavbarNav,\r\n    MDBNavLink,\r\n    MDBIcon,\r\n    MDBFormInline,\r\n    MDBDropdown,\r\n    MDBDropdownItem,\r\n    MDBDropdownMenu,\r\n    MDBDropdownToggle\r\n} from \"mdbreact\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\nfunction Navbar( {loggedIn, onLoginClick, onLogoutClick, onRegistrationClick, user} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n            <MDBNavbar style={{ backgroundColor: \"#4527a0\" }} dark expand=\"md\" fixed=\"top\">\r\n            <MDBNavbarBrand>\r\n                <strong className=\"white-text\">Interests</strong>\r\n            </MDBNavbarBrand>\r\n            <MDBNavbarNav left>\r\n                \r\n            </MDBNavbarNav>\r\n\r\n            <MDBNavbarNav right>\r\n                <MDBNavItem>\r\n                    <MDBFormInline onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput').value); return false; }}>\r\n                        <div className=\"md-form my-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Найти\" aria-label=\"Найти\"\r\n                            id=\"searchInput\"/>\r\n                        </div>\r\n                    </MDBFormInline>\r\n                </MDBNavItem>\r\n\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onLoginClick} >\r\n                        <MDBIcon icon=\"sign-in-alt\" /> Войти\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onRegistrationClick} >\r\n                        <MDBIcon icon=\"user-plus\" /> Зарегистрироваться\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem hidden={!loggedIn} className=\"font-weight-bold\">\r\n                    <MDBDropdown>\r\n                        <MDBDropdownToggle nav caret>\r\n                        <span className=\"mr-2\">{user.username}</span>\r\n                        </MDBDropdownToggle>\r\n                        <MDBDropdownMenu>\r\n                        <MDBDropdownItem href={\"/user/\"+user.id}>Профиль</MDBDropdownItem>\r\n                        <MDBDropdownItem onClick={ onLogoutClick }>\r\n                            <MDBIcon icon=\"sign-out-alt\"/> Выйти\r\n                        </MDBDropdownItem>\r\n                        </MDBDropdownMenu>\r\n                    </MDBDropdown>\r\n                </MDBNavItem>\r\n            </MDBNavbarNav>\r\n        </MDBNavbar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    user: selectors.getUser(state)\r\n});\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonLoginClick: () => {\r\n\t\t\tdispatch(actions.openLoginForm());\r\n        },\r\n        onLogoutClick: () =>{\r\n            dispatch(actions.resetAuthorization());\r\n        },\r\n        onRegistrationClick: () =>{\r\n            dispatch(actions.openRegistrateForm());\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport HomePage from \"./components/HomePage\";\r\nimport GamePage from \"./components/GamePage\";\r\nimport MoviePage from \"./components/MoviePage\";\r\nimport SearchPage from \"./components/SearchPage/SearchPage\";\r\nimport LoginForm from \"./components/LoginForm\";\r\nimport RegistrationForm from \"./components/RegistrationForm\";\r\nimport ConfirmPage from \"./components/ConfirmPage\";\r\nimport UserPage from \"./components/UserPage/UserPage\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar/>\r\n        <div className=\"navbar\"></div>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route exact path=\"/game/:id\" component={GamePage} />\r\n            <Route exact path=\"/movie/:id\" component={MoviePage} />\r\n            <Route exact path=\"/search/:query\" component={SearchPage} />\r\n            <Route exact path=\"/confirm/\" component={ConfirmPage} />\r\n            <Route exact path=\"/user/:username\" component={UserPage} />\r\n            <Route render={function () { return <h1>Not Found</h1>; }} />\r\n        </Switch>\r\n      <ToastContainer position=\"top-center\" hideProgressBar newestOnTop closeOnClick/>\r\n      <LoginForm/>\r\n      <RegistrationForm/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;","import React, {useEffect} from \"react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { connect } from 'react-redux'; \r\nimport Routes from \"./Routes\";\r\nimport * as actions from \"./store/actions\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App({onLoad}) {\r\n\r\n  useEffect(\r\n    () => {\r\n        onLoad();\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"flyout\">\r\n        <main>\r\n          <Routes />\r\n        </main>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n    onLoad: () => {\r\n      dispatch(actions.checkAuthorization());\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore, \r\n  applyMiddleware, \r\n  //combineReducers,\r\n   compose } from 'redux';\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './store/reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk) ) );\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\nexport default store;\r\n\r\n"],"sourceRoot":""}