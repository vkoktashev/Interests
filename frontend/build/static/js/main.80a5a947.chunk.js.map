{"version":3,"sources":["components/HomePage.js","store/reducers.js","settings.js","services/jwtAuth.js","services/requests.js","store/actions.js","store/actionTypes.js","components/Common/StatusButtonGroup.js","components/Common/FriendsActivityRow.js","components/Common/FriendsActivity.js","components/GamePage/GamePage.js","components/MoviePage/MoviePage.js","components/SearchPage/CardGame.js","components/SearchPage/CardMovie.js","components/Common/CardUser.js","components/Common/CategoriesTab.js","components/SearchPage/SearchPage.js","components/Modals/LoginForm.js","components/Modals/RegistrationForm.js","components/Modals/ResetPasswordForm.js","components/ConfirmPage.js","components/ConfirmPasswordPage.js","components/UserPage/GameBlock.js","components/UserPage/FriendBlock.js","components/UserPage/MovieBlock.js","components/UserPage/LogRow.js","components/UserPage/UserLogBlock.js","components/UserPage/UserPage.js","components/Navbar.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","className","style","color","marginTop","initialState","Map","auth","loggedIn","user","username","email","id","content","game","main_info","rawg","name","background_image","background_image_additional","developers","hltb","game_image_url","user_info","status","review","score","spent_time","friends_info","movie","tmdb","title","poster_path","searchContent","games","movies","users","userPageContent","stats","userLogs","log","userFriendsLogs","openedPages","LoginForm","RegistrateForm","ResetPasswordForm","errors","registrate","gameRequest","movieRequest","userPage","resetPassword","confirmPassword","isLoading","contentGame","contentMovie","searchGames","searchMovies","searchUsers","userPageLogs","userPageFriendsLogs","contentGameFriends","contentMovieFriends","getLoggedIn","state","get","getUser","getContentGame","getContentGameFriends","getContentMovie","getContentMovieFriends","getSearchContentGames","getSearchContentMovies","getSearchContentUsers","getAuthError","getRegistrateError","getGameRequestError","getResetPasswordError","getConfirmPasswordError","getLoginForm","getRegistrateForm","getResetPasswordForm","getIsLoadingContentGame","getIsLoadingContentGameFriends","getIsLoadingContentMovie","getIsLoadingContentMovieFriends","getIsLoadingSearchGames","getIsLoadingSearchMovies","getIsLoadingSearchUsers","getIsLoadingUserPageContent","getIsLoadingUserPageLogs","getIsLoadingUserPageFriendsLogs","getUserPageContent","getUserPageLogs","getUserPageFriendsLogs","BACKEND_URL","GET_TOKEN_URL","REFRESH_TOKEN_URL","REGISTRATE_URL","CONFIRM_URL","CONFIRM_PASSWORD_URL","GET_GAME_URL","GET_MOVIE_URL","USER_INFO_URL","axiosConfig","headers","getToken","password","a","axios","post","urls","res","userData","jwt_decode","data","access","user_id","token","refreshToken","refresh","console","updateToken","registration","response","confirmation","uid64","patch","put","getGame","AuthStr","getMovie","setGameStatus","gameSlug","setMovieStatus","query","page","gamesCount","params","page_size","warn","getUserInfo","userID","setUserStatus","is_following","getUserLog","resultsOnPage","getUserFriendsLog","getGameFriends","slug","getMovieFriends","checkAuthorization","dispatch","localStorage","getItem","Date","now","type","setItem","resetAuthorization","removeItem","setLoading","setError","isError","error","defaults","common","StatusButtonGroup","statuses","activeColor","onChangeStatus","userStatus","useState","activeStatus","setActiveStatus","useEffect","map","key","backgroundColor","onClick","FriendsActivityRow","number","info","history","useHistory","href","window","location","origin","e","push","preventDefault","stop","emptySymbol","far","icon","size","fullSymbol","n","initialRating","readonly","hidden","FriendsActivity","friendInfo","updated_at","connect","selectors","requestError","gameIsLoading","gameFriends","gameFriendsIsLoading","requestGame","Requests","then","result","toast","actions","requestGameFriends","openLoginForm","isOpen","getState","useParams","genres","setGenres","metascoreBlock","setMetascoreBlock","setReview","spentTime","setSpentTime","setDevelopers","date","setDate","gameplay_main_extra","gameplay_main","gameplay_comletionist","hltbInfo","setHtlbInfo","newGenres","i","length","metacritic","playtime","gameplay_completionist","newDevelopers","released","mas","split","newDate","document","backgroundImage","active","spinner","text","md","src","alt","marginBottom","display","gameplay_main_unit","gameplay_main_extra_unit","gameplay_completionist_unit","fontSize","onChange","paddingTop","dangerouslySetInnerHTML","__html","description","paddingLeft","label","value","event","target","outline","disabled","getElementById","movieIsLoading","movieFriends","movieFriendsIsLoading","requestMovie","requestMovieFriends","companies","setCompanies","cast","setCast","director","setDirector","vote_average","production_companies","newCompanies","newCast","crew","newDirector","job","backdrop_path","release_date","runtime","tagline","overview","CardGame","setName","newName","substr","CardMovie","CardUser","CategoriesTab","categories","onChangeCategory","activeCategory","setActiveCategory","category","height","gamesIsLoading","moviesIsLoading","usersIsLoading","searchGame","searchMovie","results","queryText","setQueryText","gamesCards","setGamesCards","moviesCards","setMoviesCards","usersCards","setUsersCards","gamesPage","setGamesPage","moviesPage","setMoviesPage","onSubmit","placeholder","aria-label","authError","closeForm","logIn","login","openResetPasswordForm","setPassword","setLogin","toggle","centered","htmlFor","registrateArror","passwordConfirm","setPasswordConfirm","setEmail","outlineColor","resetPasswordError","confirmEmailRequest","success","search","URLSearchParams","confirmPasswordError","GameBlock","gameColumns","field","sort","columns","rows","gameTableData","setGameTableData","rawg_slug","rawg_name","name2","parseFloat","games_count","games_total_spent_time","striped","bordered","small","barReverse","noBottomColumns","noRecordsFoundLabel","paginationLabel","entriesLabel","searchLabel","FriendBlock","MovieBlock","movieColumns","movieTableData","setMovieTableData","tmdb_id","tmdb_name","movies_count","movies_total_spent_time","LogRow","showUsername","created","toLocaleTimeString","action","actionResult","translateActionType","action_type","action_result","actionType","translateType","nameToLink","target_id","actionResultToStr","UserLogBlock","logs","onChangePage","logsByDay","setLogsByDay","currentPage","setCurrentPage","newLogs","getDay","groupLogsByDay","dayLog","toLocaleDateString","has_next_page","userIsLoading","userInfo","userLogsIsLoading","userFriendsLogsIsLoading","currentUserInfo","getUserLogs","getUserFriendsLogs","is_followed","pageNumber","followed_users","onLoginClick","onLogoutClick","onRegistrationClick","dark","expand","fixed","cursor","left","right","to","nav","caret","Routes","exact","path","component","GamePage","MoviePage","SearchPage","ConfirmPage","ConfirmPasswordPage","UserPage","render","position","hideProgressBar","newestOnTop","closeOnClick","React","Component","onLoad","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","setIn","applyMiddleware","thunk","ReactDOM","URL","process","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.80a5a947.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction HomePage () \r\n{\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n\t\t\t\t<h1 style={{color: 'rgb(207, 207, 207)', marginTop: '50px'}}>Страница ещё не готова</h1>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nexport default HomePage;","import * as types from './actionTypes';\r\nimport { Map } from 'immutable';\r\n\r\n// Создаем reducer с начальным состоянием.\r\nconst initialState = Map(\r\n    {\r\n        auth: { loggedIn: false },\r\n        user: { username:\"\", email:\"\", id: null },\r\n        content: { \r\n            game: {\r\n                main_info:{\r\n                    rawg: {\r\n                        name: \"\",\r\n                        background_image: \"\",\r\n                        background_image_additional: \"\",\r\n                        developers: [{}],\r\n                    },\r\n                    hltb:{\r\n                        game_image_url: \"\"\r\n                    },\r\n                    user_info:{\r\n                        status: null,\r\n                        review: \"\",\r\n                        score: 0,\r\n                        spent_time: 0\r\n                    }\r\n                },\r\n                friends_info: {\r\n                    friends_info: []\r\n                }\r\n            },\r\n            movie: {\r\n                main_info:{\r\n                    tmdb: {\r\n                        title: \"\",\r\n                        poster_path: \"\",\r\n                        developers: [{}],\r\n                    },\r\n                    user_info:{\r\n                        status: null,\r\n                        review: \"\",\r\n                        score: 0,\r\n                        spent_time: 0\r\n                    }\r\n                },\r\n                friends_info: {\r\n                    friends_info: []\r\n                }\r\n            } \r\n        },\r\n        searchContent: {\r\n            games: [],\r\n            movies: [],\r\n            users: []\r\n        },\r\n        userPageContent: {\r\n            user: {\r\n                stats: {}\r\n            },\r\n            userLogs: {log: []},\r\n            userFriendsLogs: {log: []},\r\n        },\r\n        openedPages: { LoginForm: false, RegistrateForm: false, ResetPasswordForm: false },\r\n        errors: {auth: false, registrate: false, gameRequest: false, movieRequest: false, userPage: false, resetPassword: false, confirmPassword: false },\r\n        isLoading: {contentGame: false, contentMovie: false, searchGames: false, searchMovies: false, userPageContent: false, searchUsers: false, userPageLogs: false, userPageFriendsLogs: false, contentGameFriends: false, contentMovieFriends: false}\r\n    }\r\n);\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    //Редьюсеры пользовательской информации\r\n    case types.SET_USER: return state.setIn(['user'], action.user);\r\n    case types.SET_AUTH: return state.setIn(['auth'], action.auth);\r\n\r\n    //Редьюсеры информации об игре\r\n    case types.SET_CONTENT_GAME: return state.setIn(['content', 'game', 'main_info'], action.game);\r\n    case types.SET_CONTENT_GAME_FRIENDS: return state.setIn(['content', 'game', 'friends_info'], action.info);\r\n    case types.SET_CONTENT_GAME_USERINFO: return state.setIn(['content', 'game', 'main_info','user_info'], action.user_info);\r\n\r\n    //Редьюсеры информации о фильме\r\n    case types.SET_CONTENT_MOVIE: return state.setIn(['content', 'movie', 'main_info'], action.movie);\r\n    case types.SET_CONTENT_MOVIE_FRIENDS: return state.setIn(['content', 'movie', 'friends_info'], action.info);\r\n    case types.SET_CONTENT_MOVIE_USERINFO: return state.setIn(['content', 'movie', 'main_info', 'user_info'], action.user_info);\r\n\r\n    //Редьюсеры результатов поиска\r\n    case types.SET_SEARCH_CONTENT_GAMES: return state.setIn(['searchContent', 'games'], action.games);\r\n    case types.SET_SEARCH_CONTENT_MOVIES: return state.setIn(['searchContent', 'movies'], action.movies);\r\n    case types.SET_SEARCH_CONTENT_USERS: return state.setIn(['searchContent', 'users'], action.users);\r\n\r\n    //Редьюсеры страницы профиля\r\n    case types.SET_USER_PAGE_CONTENT: return state.setIn(['userPageContent', 'user'], action.content);\r\n    case types.SET_USER_PAGE_FOLLOWING: return state.setIn(['userPageContent', 'user', 'is_followed'], action.is_following);\r\n    case types.SET_USER_PAGE_LOGs:  return state.setIn(['userPageContent', 'userLogs'], action.logs);\r\n    case types.SET_USER_PAGE_FRIENDS_LOGS: return state.setIn(['userPageContent', 'userFriendsLogs'], action.logs);\r\n\r\n    //Редьюсеры состояния всплывающих окон\r\n    case types.SET_LOGINFORM:  return state.setIn(['openedPages', 'LoginForm'], action.isOpen);\r\n    case types.SET_REGISTRATEFORM:  return state.setIn(['openedPages', 'RegistrateForm'], action.isOpen);\r\n    case types.SET_RESET_PASSWORD_FORM:  return state.setIn(['openedPages', 'ResetPasswordForm'], action.isOpen);\r\n\r\n    //Редьюсеры ошибок\r\n    case types.AUTH_ERROR:  return state.setIn(['errors', 'auth'], action.error);\r\n    case types.REGISTRATE_ERROR:  return state.setIn(['errors', 'registrate'], action.error);\r\n    case types.GAME_REQUEST_ERROR: return state.setIn(['errors', 'gameRequest'], action.error);\r\n    case types.MOVIE_REQUEST_ERROR:  return state.setIn(['errors', 'movieRequest'], action.error);\r\n    case types.USER_PAGE_ERROR: return state.setIn(['errors', 'userPage'], action.error);\r\n    case types.RESET_PASSWORD_ERROR: return state.setIn(['errors', 'resetPassword'], action.error);\r\n    case types.CONFIRM_PASSWORD_ERROR: return state.setIn(['errors', 'confirmPassword'], action.error);\r\n\r\n    //Редьюсеры состояния загрузки\r\n    case types.SET_IS_LOADING_CONTENT_GAME:  return state.setIn(['isLoading', 'contentGame'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_GAME_FRIENDS:  return state.setIn(['isLoading', 'contentGameFriends'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_MOVIE:  return state.setIn(['isLoading', 'contentMovie'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_MOVIE_FRIENDS:  return state.setIn(['isLoading', 'contentMovieFriends'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_GAMES:  return state.setIn(['isLoading', 'searchGames'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_MOVIES:  return state.setIn(['isLoading', 'searchMovies'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_CONTENT:  return state.setIn(['isLoading', 'userPageContent'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_LOGS: return state.setIn(['isLoading', 'userPageLogs'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS:  return state.setIn(['isLoading', 'userPageFriendsLogs'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_USERS: return state.setIn(['isLoading', 'searchUsers'], action.isLoading);\r\n\r\n    default: return state;\r\n  }\r\n}\r\n\r\n//Селекторы пользовательской информации\r\nexport function getLoggedIn(state) { return state.get('auth').loggedIn; }\r\nexport function getAuth(state) { return state.get('auth');}\r\nexport function getUser(state) {  return state.get('user'); }\r\n\r\n//Селекторы информации о контенте\r\nexport function getContentGame(state) {  return state.get('content').game.main_info; }\r\nexport function getContentGameFriends(state) {  return state.get('content').game.friends_info; }\r\nexport function getContentMovie(state) { return state.get('content').movie.main_info; }\r\nexport function getContentMovieFriends(state) {  return state.get('content').movie.friends_info; }\r\n\r\n//Селекторы поисковых результатов\r\nexport function getSearchContentGames(state) { return state.get('searchContent').games;}\r\nexport function getSearchContentMovies(state) { return state.get('searchContent').movies; }\r\nexport function getSearchContentUsers(state) { return state.get('searchContent').users; }\r\n\r\n//Селекторы ошибок\r\nexport function getAuthError(state) { return state.get('errors').auth; }\r\nexport function getRegistrateError(state) { return state.get('errors').registrate; }\r\nexport function getGameRequestError(state) {  return state.get('errors').gameRequest; }\r\nexport function getMovieRequestError(state) { return state.get('errors').movieRequest; }\r\nexport function getUserPageError(state) {  return state.get('errors').userPage;}\r\nexport function getResetPasswordError(state) {  return state.get('errors').resetPassword;}\r\nexport function getConfirmPasswordError(state) {  return state.get('errors').confirmPassword;}\r\n\r\n//Селекторы состояния высплывающих окон\r\nexport function getLoginForm(state) { return state.get('openedPages').LoginForm; }\r\nexport function getRegistrateForm (state) { return state.get('openedPages').RegistrateForm; }\r\nexport function getResetPasswordForm (state) { return state.get('openedPages').ResetPasswordForm; }\r\n\r\n//Селекторы состояния загрузки\r\nexport function getIsLoadingContentGame(state) { return state.get('isLoading').contentGame; }\r\nexport function getIsLoadingContentGameFriends(state) { return state.get('isLoading').contentGameFriends; }\r\nexport function getIsLoadingContentMovie(state) {  return state.get('isLoading').contentMovie; }\r\nexport function getIsLoadingContentMovieFriends(state) { return state.get('isLoading').contentMovieFriends; }\r\nexport function getIsLoadingSearchGames(state) { return state.get('isLoading').searchGames; }\r\nexport function getIsLoadingSearchMovies(state) { return state.get('isLoading').searchMovies; }\r\nexport function getIsLoadingSearchUsers(state) { return state.get('isLoading').searchUsers;}\r\nexport function getIsLoadingSearchAll(state) { return (state.get('isLoading').searchUsers || state.get('isLoading').searchMovies || state.get('isLoading').searchGames); }\r\nexport function getIsLoadingUserPageContent(state) { return state.get('isLoading').userPageContent; }\r\nexport function getIsLoadingUserPageLogs(state) { return state.get('isLoading').userPageLogs; }\r\nexport function getIsLoadingUserPageFriendsLogs(state) { return state.get('isLoading').userPageFriendsLogs; }\r\n\r\n//Селекторы страницы профиля\r\nexport function getUserPageContent(state){  return state.get('userPageContent').user; }\r\nexport function getUserPageLogs(state){ return state.get('userPageContent').userLogs; }\r\nexport function getUserPageFriendsLogs(state){  return state.get('userPageContent').userFriendsLogs; }","/** Время жизни токена в миллисекундах, после истечения которого будет запрошен новый токен*/\r\nexport const TOKEN_LIFETIME = 86000000; \r\n/**Адрес сервера*/\r\nexport const BACKEND_URL = \"http://35.193.124.214:8001/\";\r\n/**Адрес получения токена */\r\nexport const GET_TOKEN_URL = BACKEND_URL + \"users/auth/login/\"; \r\n/**Адрес обновления токена */\r\nexport const REFRESH_TOKEN_URL = BACKEND_URL + \"users/auth/refresh-token/\";\r\n/**Адрес регистрации */\r\nexport const REGISTRATE_URL = BACKEND_URL + \"users/auth/signup/\";\r\n/**Адрес подтверждения почты */\r\nexport const CONFIRM_URL = BACKEND_URL + \"users/auth/confirm_email/\";\r\n/**Адрес сброса пароля */\r\nexport const RESET_PASSWORD_URL = BACKEND_URL + \"users/user/password_reset/\"; \r\n/**Адрес подтверждения сброса пароля */\r\nexport const CONFIRM_PASSWORD_URL = BACKEND_URL + \"users/user/confirm_password_reset/\";\r\n/**Адрес запроса игры */\r\nexport const GET_GAME_URL = BACKEND_URL + \"games/game/\";\r\n/**Адрес поиска игр */\r\nexport const SEARCH_GAMES_URL = BACKEND_URL + \"games/search/\";\r\n/**Адрес запроса фильма */\r\nexport const GET_MOVIE_URL = BACKEND_URL + \"movies/movie/\";\r\n/**Адрес поиска фильмов */\r\nexport const SEARCH_MOVIES_URL = BACKEND_URL + \"movies/search/\";\r\n/**Адрес получения информации о пользователе */\r\nexport const USER_INFO_URL = BACKEND_URL + \"users/user/\";\r\n/**Адрес поиска пользователей */\r\nexport const SEARCH_USERS_URL = BACKEND_URL + \"users/search/\"; \r\n","import axios from \"axios\";\r\nimport jwt_decode from 'jwt-decode';\r\nimport * as urls from '../settings';\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\n/**\r\n * ПОлучение токена авторизации. Токен сохраняется в localStorage\r\n * @param {string} username Имя пользователя\r\n * @param {string} password Пароль \r\n */\r\nexport async function getToken(username, password){\r\n    try{\r\n        const res = await axios.post(urls.GET_TOKEN_URL, {\r\n                    username: username,\r\n                    password: password \r\n                }, axiosConfig);\r\n\r\n        let userData = jwt_decode(res.data.access);\r\n        let user = {username: userData.username, id: userData.user_id, email: userData.email}\r\n\r\n        return {token: res.data.access, refreshToken: res.data.refresh, user: user};\r\n    }catch(e){\r\n        console.log(\"axios error: \" + e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Функция обновления токена\r\n */\r\nexport async function updateToken(refreshToken){\r\n    if (typeof refreshToken !== 'undefined' & refreshToken != null)\r\n        try{\r\n            const res = await axios.post(urls.REFRESH_TOKEN_URL, {\r\n                        refresh: refreshToken\r\n                    }, axiosConfig);\r\n                    \r\n            let userData = jwt_decode(res.data.access);\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n\r\n            return {token: res.data.access, user: user};\r\n        }catch(e){\r\n            console.log(\"exios error: \" + e);\r\n            return null;\r\n        }\r\n    return null;\r\n}\r\n\r\nexport async function registration(username, email, password) {\r\n   try{\r\n        const res = await axios.post(urls.REGISTRATE_URL, \r\n            {  \r\n                username: username,\r\n                email: email, \r\n                password: password \r\n            }, axiosConfig);\r\n        let data = res.data;\t\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e.response);\r\n        return e.response;\r\n    }\r\n}\r\n\r\nexport async function confirmation(uid64, token) {\r\n    try{\r\n        const res = await axios.patch(urls.CONFIRM_URL + '?uid64=' + uid64 + '&token=' + token);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }\r\n\r\n export async function resetPassword(email) {\r\n    try{\r\n        const res = await axios.put(urls.RESET_PASSWORD_URL,  {  email: email }, axiosConfig);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }\r\n\r\n export async function confirmPassword(token, password) {\r\n    try{\r\n        const res = await axios.patch(urls.CONFIRM_PASSWORD_URL + '?reset_token=' + token,  { password: password }, axiosConfig);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }","import axios from \"axios\";\r\nimport {GET_GAME_URL, SEARCH_GAMES_URL, USER_INFO_URL, SEARCH_MOVIES_URL, GET_MOVIE_URL, SEARCH_USERS_URL} from \"../settings\";\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\naxios.defaults.headers.common = {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getGame(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о фильме\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID фильма  \r\n * @returns {object} Информация о фильме\r\n */\r\nexport async function getMovie(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса игры\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус игры\r\n * @param {string} gameSlug Слаг игры\r\n */\r\nexport async function setGameStatus(token, gameSlug, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n\r\n        const res = await axios.put(GET_GAME_URL + gameSlug + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса фильма\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус фильма\r\n * @param {string} movieID ID фильма\r\n */\r\nexport async function setMovieStatus(token, id, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        console.log(user_info);\r\n        const res = await axios.put(GET_MOVIE_URL + id + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск игр\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchGames(query, page, gamesCount){\r\n    try{\r\n        const res = await axios.get(SEARCH_GAMES_URL, { params : {query: query, page: page, page_size: gamesCount} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n        console.warn(res.data);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск фильмов\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchMovies(query, page){\r\n    try{\r\n        const res = await axios.get(SEARCH_MOVIES_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n            console.log(res);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск пользователей\r\n * @param {string} query Поисковый запрос\r\n */\r\nexport async function searchUsers(query){\r\n    try{\r\n        const res = await axios.get(SEARCH_USERS_URL, { params : {query: query} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n            console.log(res);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getUserInfo(token, userID) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса пользовтеля (добавить в друзья и тд)\r\n * @param {string} token Токен доступа\r\n * @param {boolean} is_following Статус фильма\r\n * @param {string} userID ID пользовтеля\r\n */\r\nexport async function setUserStatus(token, is_following, userID){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(USER_INFO_URL + userID + \"/follow/\", \r\n            is_following, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий лог пользователя\r\n * @param {string} userID ID пользователя\r\n * @param {string} page страница \r\n * @param {int} resultsOnPage количество результатов на странице \r\n */\r\nexport async function getUserLog(token, userID, page, resultsOnPage) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/log/\", { params : { page: page, page_size: resultsOnPage } }, { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/log/\", { params : { page: page, page_size: resultsOnPage } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий лог друзей пользователя\r\n * @param {string} userID ID пользователя\r\n * @param {int} page страница\r\n * @param {int} resultsOnPage количество результатов на странице \r\n */\r\nexport async function getUserFriendsLog(token, userID, page, resultsOnPage) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/friends_log/\", { params : { page: page, page_size: resultsOnPage }, 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/friends_log/\", { params : { page: page, page_size: resultsOnPage } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для игры\r\n * @param {string} slug slug игры\r\n * @param {int} page страница\r\n */\r\nexport async function getGameFriends(token, slug, page) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_GAME_URL + slug + \"/friends_info/\", { params : { page: page } , 'headers': { 'Authorization': AuthStr } });\r\n            console.log(res);\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_GAME_URL + slug + \"/friends_info/\", { params : { page: page } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для фильма\r\n * @param {string} id id фильма\r\n * @param {int} page страница\r\n */\r\nexport async function getMovieFriends(token, id, page) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/friends_info/\", { params : { page: page } , 'headers': { 'Authorization': AuthStr } });\r\n            console.log(res);\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/friends_info/\", { params : { page: page } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}","import * as actionTypes from './actionTypes';\r\nimport * as selectors from './reducers';\r\nimport * as auth from \"../services/jwtAuth\";\r\nimport {TOKEN_LIFETIME} from \"../settings\";\r\nimport * as Requests from \"../services/requests\";\r\nimport { toast } from \"react-toastify\";\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nexport function tryAuth(login, password) {\r\n    return async(dispatch) => {\r\n        \r\n        setError(dispatch, actionTypes.AUTH_ERROR, false);\r\n\r\n      try {\r\n        const res = await auth.getToken(login, password);\r\n        if (res !== null){\r\n            localStorage.setItem('refreshToken', res.refreshToken);\r\n            localStorage.setItem('token', res.token);\r\n            localStorage.setItem('tokenTime', Date.now());\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: res.user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_LOGINFORM,\r\n                isOpen: false \r\n            });\r\n        }else{\r\n            setError(dispatch, actionTypes.AUTH_ERROR, true);\r\n        }\r\n            \r\n      }catch (error) {\r\n        console.error(error);\r\n        setError(dispatch, actionTypes.AUTH_ERROR, true);\r\n      }\r\n    };\r\n}\r\n\r\nexport function checkAuthorization(){\r\n    return async(dispatch) => {\r\n        if (localStorage.getItem('token') === null | Date.now() - localStorage.getItem('tokenTime') > TOKEN_LIFETIME){\r\n            const res = await auth.updateToken(localStorage.getItem(\"refreshToken\"));\r\n            if (res !== null){\r\n                dispatch({\r\n                    type: actionTypes.SET_AUTH,\r\n                    auth: { loggedIn: true }, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: res.user, \r\n                });\r\n                localStorage.setItem('token', res.token);\r\n                localStorage.setItem('tokenTime', Date.now());\r\n                return true;\r\n            }else{\r\n                //toast.warn(\"Произошла ошибка авторизации. Зайдите ещё раз\");\r\n                dispatch(resetAuthorization());\r\n                return false;\r\n            } \r\n        }else{\r\n            let userData = jwt_decode(localStorage.getItem('token'));\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            return true;\r\n        }\r\n            \r\n    }\r\n}\r\n\r\nexport function resetAuthorization(){\r\n    return async(dispatch) => {\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('tokenTime');\r\n        dispatch({\r\n            type: actionTypes.SET_AUTH,\r\n            auth: { loggedIn: false }, \r\n        });\r\n        dispatch({\r\n            type: actionTypes.SET_USER,\r\n            user: { username:\"\", id: null, email:\"\" }, \r\n        });\r\n    }\r\n}\r\n\r\nexport function registrationRequest(username, email, password){\r\n    return async(dispatch) => {\r\n        setError(dispatch, actionTypes.REGISTRATE_ERROR, false);\r\n        auth.registration(username, email, password).then((result) => {\r\n            console.log(result);\r\n            if (result.status !== 400){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: { login: result.username, email: result.email }, \r\n                });\r\n            }\r\n            else{\r\n                for (let error in result.data)\r\n                    toast.error(result.data[error][0]);\r\n                \r\n                setError(dispatch, actionTypes.REGISTRATE_ERROR, true);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function confirmEmailRequest(uid64, token){\r\n    return async() => {\r\n        auth.confirmation(uid64, token).then((result) => {\r\n            console.log(result);\r\n            if (result.status === 200){\r\n                toast.success(\"Почта подтверждена!\");\r\n            }\r\n            else{\r\n                if (result.data)\r\n                    toast.error(result.data.error);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestGame(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME, true);\r\n        setError(dispatch, actionTypes.GAME_REQUEST_ERROR, false);\r\n        Requests.getGame(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME,\r\n                    game: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Игра не найдена!\");\r\n                setError(dispatch, actionTypes.GAME_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME, false);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport function requestGameFriends(slug, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME_FRIENDS, true);\r\n        Requests.getGameFriends(localStorage.getItem('token'), slug, page).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME_FRIENDS,\r\n                    info: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME_FRIENDS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestMovie(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE, true);\r\n        setError(dispatch, actionTypes.MOVIE_REQUEST_ERROR, false);\r\n        Requests.getMovie(localStorage.getItem('token'), id).then((result) => {\r\n            console.log(result);\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_MOVIE,\r\n                    movie: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Фильм не найден!\");\r\n                setError(dispatch, actionTypes.MOVIE_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestMovieFriends(id, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE_FRIENDS, true);\r\n        Requests.getMovieFriends(localStorage.getItem('token'), id, page).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_MOVIE_FRIENDS,\r\n                    info: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE_FRIENDS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setGameStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setGameStatus(localStorage.getItem('token'), selectors.getContentGame(getState()).rawg.slug, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_GAME_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function requestUserPageContent(username){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT, true);\r\n        setError(dispatch, actionTypes.USER_PAGE_ERROR, false);\r\n        Requests.getUserInfo(localStorage.getItem('token'), username).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_CONTENT,\r\n                    content: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Профиль не найден!\");\r\n                setError(dispatch, actionTypes.USER_PAGE_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestUserPageLogs(userID, page, resultsOnPage){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_LOGS, true);\r\n        Requests.getUserLog(localStorage.getItem('token'), userID, page, resultsOnPage).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_LOGs,\r\n                    logs: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n                \r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_LOGS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestUserPageFriendsLogs(userID, page, resultsOnPage){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS, true);\r\n        Requests.getUserFriendsLog(localStorage.getItem('token'), userID, page, resultsOnPage).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_FRIENDS_LOGS,\r\n                    logs: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchGames(query, page, gamesCount){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_GAMES, true);\r\n        Requests.searchGames(query, page, gamesCount).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_GAMES,\r\n                    games: result, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_GAMES, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchMovies(query, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_MOVIES, true);\r\n        Requests.searchMovies(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска фильмов\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_MOVIES,\r\n                    movies: result.results, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_MOVIES, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setMovieStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setMovieStatus(localStorage.getItem('token'), selectors.getContentMovie(getState()).tmdb.id, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_MOVIE_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function searchUsers(query){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_USERS, true);\r\n        Requests.searchUsers(query).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_USERS,\r\n                    users: result, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_USERS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setUserStatus(is_following, userID){\r\n    return async(dispatch) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setUserStatus(localStorage.getItem('token'), is_following, userID).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_USER_PAGE_FOLLOWING,\r\n                        is_following: result.is_following\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function resetPassword(email){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.RESET_PASSWORD_ERROR,\r\n            error: false\r\n        });\r\n        auth.resetPassword(email).then((result) => {\r\n            if (result.status !== 200){\r\n                dispatch({\r\n                    type: actionTypes.RESET_PASSWORD_ERROR,\r\n                    error: result.data.error\r\n                });\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.RESET_PASSWORD_ERROR,\r\n                    error: 'ok'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function confirmPassword(token, password){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n            error: false\r\n        });\r\n        auth.confirmPassword(token, password).then((result) => {\r\n            if (result.status !== 200){\r\n                dispatch({\r\n                    type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n                    error: result.data.error?result.data.error:'Неизвестная ошибка'\r\n                });\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n                    error: 'ok'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function setUser(user) {\r\n    return({ type: actionTypes.SET_USER, user: user });\r\n}\r\n\r\nexport function openLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: false  });\r\n}\r\n\r\nexport function openRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: false  });\r\n}\r\n\r\nexport function openResetPasswordForm() {\r\n    return({ type: actionTypes.SET_RESET_PASSWORD_FORM, isOpen: true  });\r\n}\r\n\r\nexport function closeResetPasswordForm() {\r\n    return({ type: actionTypes.SET_RESET_PASSWORD_FORM, isOpen: false  });\r\n}\r\n\r\nfunction setLoading(dispatch, type, isLoading){\r\n    dispatch({\r\n        type: type,\r\n        isLoading: isLoading\r\n    });\r\n}\r\n\r\nfunction setError(dispatch, type, isError){\r\n    dispatch({\r\n        type: type,\r\n        error: isError\r\n    });\r\n}","export const SET_USER = 'SET_USER';\r\nexport const SET_AUTH = \"SET_AUTH\";\r\n\r\nexport const SET_LOGINFORM = \"SET_LOGINFORM\";\r\nexport const SET_REGISTRATEFORM = \"SET_REGISTRATEFORM\";\r\nexport const SET_RESET_PASSWORD_FORM = \"SET_RESET_PASSWORD_FORM\";\r\n\r\nexport const SET_CONTENT_GAME = \"SET_CONTENT_GAME\";\r\nexport const SET_CONTENT_GAME_USERINFO = \"SET_CONTENT_GAME_USERINFO\";\r\nexport const SET_CONTENT_GAME_FRIENDS = \"SET_CONTENT_GAME_FRIENDS\";\r\n\r\nexport const SET_CONTENT_MOVIE = \"SET_CONTENT_MOVIE\";\r\nexport const SET_CONTENT_MOVIE_USERINFO = \"SET_CONTENT_MOVIE_USERINFO\";\r\nexport const SET_CONTENT_MOVIE_FRIENDS = \"SET_CONTENT_MOVIE_FRIENDS\";\r\n\r\nexport const SET_SEARCH_CONTENT_GAMES = \"SET_SEARCH_CONTENT_GAMES\";\r\nexport const SET_SEARCH_CONTENT_MOVIES = \"SET_SEARCH_CONTENT_MOVIES\";\r\nexport const SET_SEARCH_CONTENT_USERS = \"SET_SEARCH_CONTENT_USERS\";\r\n\r\nexport const SET_USER_PAGE_CONTENT = \"SET_USER_PAGE_CONTENT\";\r\nexport const SET_USER_PAGE_FOLLOWING = \"SET_USER_PAGE_FOLLOWING\";\r\nexport const SET_USER_PAGE_LOGs = \"SET_USER_PAGE_LOGs\";\r\nexport const SET_USER_PAGE_FRIENDS_LOGS = \"SET_USER_PAGE_FRIENDS_LOGS\";\r\n\r\nexport const SET_IS_LOADING_CONTENT_GAME = \"SET_IS_LOADING_CONTENT_GAME\";\r\nexport const SET_IS_LOADING_CONTENT_GAME_FRIENDS = \"SET_IS_LOADING_CONTENT_GAME_FRIENDS\";\r\nexport const SET_IS_LOADING_CONTENT_MOVIE = \"SET_IS_LOADING_CONTENT_MOVIE\";\r\nexport const SET_IS_LOADING_CONTENT_MOVIE_FRIENDS = \"SET_IS_LOADING_CONTENT_MOVIE_FRIENDS\";\r\nexport const SET_IS_LOADING_SEARCH_GAMES = \"SET_IS_LOADING_SEARCH_GAMES\";\r\nexport const SET_IS_LOADING_SEARCH_MOVIES = \"SET_IS_LOADING_SEARCH_MOVIES\";\r\nexport const SET_IS_LOADING_SEARCH_USERS = \"SET_IS_LOADING_SEARCH_USERS\";\r\nexport const SET_IS_LOADING_USER_PAGE_CONTENT = \"SET_IS_LOADING_USER_PAGE_CONTENT\";\r\nexport const SET_IS_LOADING_USER_PAGE_LOGS = \"SET_IS_LOADING_USER_PAGE_LOGS\";\r\nexport const SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS = \"SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS\";\r\n\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const REGISTRATE_ERROR = \"REGISTRATE_ERROR\";\r\nexport const GAME_REQUEST_ERROR = \"GAME_REQUEST_ERROR\";\r\nexport const MOVIE_REQUEST_ERROR = \"MOVIE_REQUEST_ERROR\";\r\nexport const USER_PAGE_ERROR = \"USER_PAGE_ERROR\";\r\nexport const RESET_PASSWORD_ERROR = \"RESET_PASSWORD_ERROR\";\r\nexport const CONFIRM_PASSWORD_ERROR = \"CONFIRM_PASSWORD_ERROR\";","import React, {useState, useEffect} from \"react\";\r\nimport './style.css';\r\n\r\nfunction StatusButtonGroup( {statuses, activeColor, onChangeStatus, userStatus} ) {\r\n    const [activeStatus, setActiveStatus] = useState('');\r\n\r\n    useEffect(() =>{\r\n            setActiveStatus(userStatus?userStatus:statuses[0]);\r\n        },\r\n        [statuses, userStatus]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            {statuses.map((status) => <button className={'contentStatuses'} \r\n                                            key={status}\r\n                                            style={{backgroundColor: (activeStatus === status?activeColor:'#000000')}}\r\n                                            onClick={()=>{ \r\n                                                if (onChangeStatus(status)){\r\n                                                    setActiveStatus(status);\r\n                                                }\r\n                                            }}>\r\n                                            {status}\r\n                                        </button>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default StatusButtonGroup;\r\n","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction FriendsActivityRow ( {info} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n        <div className=\"fActivityBlock\">\r\n            <h5 className='fActivityUser'>\r\n                <a href={window.location.origin + '/user/' + info.user.id} \r\n                        onClick={(e) => { history.push('/user/' + info.user.id); e.preventDefault();}}\r\n                    >\r\n                    {info.user.username}\r\n                </a>\r\n            </h5>\r\n            <div className='fActivityInfo'>\r\n                <Rating stop={10}\r\n                                    emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\"/>}\r\n                                    fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" title={n}/>)}\r\n                                    initialRating={info.score}\r\n                                    className=\"fActivityInfoText\"\r\n                                    readonly={true}\r\n                        />\r\n                <p className=\"fActivityInfoText\">Статус: {info.status} </p>\r\n                <p className=\"fActivityInfoText\" hidden={!(info.spent_time)}>Время проходения: {info.spent_time} {intToHours(info.spent_time)}</p>\r\n                <p className=\"fActivityInfoText\" hidden={info.review===\"\"}>Отзыв: {info.review}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction intToHours(number){\r\n    if (11 <= number && number <= 14)\r\n        return 'часов'\r\n    else if (number % 10 === 1)\r\n        return 'час'\r\n    else if (2 <= number % 10 && number % 10 <= 4)\r\n        return 'часа'\r\n    else\r\n        return 'часов'\r\n}\r\n\r\nexport default FriendsActivityRow;","import React from \"react\";\r\nimport FriendsActivityRow from './FriendsActivityRow';\r\n\r\nfunction FriendsActivity ( {info} ) {\r\n\r\n    return(\r\n        <div className=\"friendsBlock\">\r\n            { info.friends_info.map((friendInfo) => <FriendsActivityRow info={friendInfo} key={friendInfo.updated_at}/>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FriendsActivity;","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport './style.css';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction GamePage ( {requestGame, game, loggedIn, openLoginForm, setGameStatus, gameIsLoading, requestGameFriends, gameFriends, gameFriendsIsLoading\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [spentTime, setSpentTime] = useState(0);\r\n    const [developers, setDevelopers] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [hltbInfo, setHtlbInfo] = useState({gameplay_main_extra: -1, gameplay_main: -1, gameplay_comletionist: -1});\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestGame(id);\r\n            requestGameFriends(id, 1);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestGame]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (game.rawg.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < game.rawg.genres.length; i++){\r\n                    newGenres += game.rawg.genres[i].name;\r\n                    if (i !== game.rawg.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                 setGenres(newGenres);   \r\n            }\r\n\r\n            if (game.rawg.metacritic){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{game.rawg.metacritic}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">Metascore</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            if (game.hltb){\r\n                setHtlbInfo(game.hltb);\r\n            }else if (game.rawg.playtime){\r\n                setHtlbInfo({gameplay_main_extra: game.rawg.playtime, gameplay_main: -1, gameplay_completionist: -1});\r\n            }else{\r\n                setHtlbInfo({gameplay_main_extra: -1, gameplay_main: -1, gameplay_completionist: -1});\r\n            }\r\n\r\n            if (game.user_info){\r\n                setReview(game.user_info.review);\r\n                setSpentTime(game.user_info.spent_time);\r\n            }\r\n\r\n            if (game.rawg.developers){\r\n                let newDevelopers = \"\"\r\n                for (let i = 0; i < game.rawg.developers.length; i++){\r\n                    newDevelopers += game.rawg.developers[i].name;\r\n                    if (i !== game.rawg.developers.length - 1)\r\n                    newDevelopers += \", \";\r\n                }\r\n                setDevelopers(newDevelopers);   \r\n            }\r\n\r\n            if (game.rawg.released){\r\n                let mas = game.rawg.released.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            document.title = game.rawg.name;\r\n\t\t},\r\n\t\t[game]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${game.rawg.background_image_additional?game.rawg.background_image_additional:game.rawg.background_image})`}}/>\r\n                <LoadingOverlay\r\n                    active={gameIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"gameContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"gameContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\">\r\n                                        <img src={game.rawg.background_image} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{game.rawg.name}</h1>\r\n                                        <p style={{marginBottom: \"2px\"}}>Разработчики: {developers}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Дата релиза: {date}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Жанр: {genres}</p>\r\n                                        <p style={{marginBottom: \"4px\", display: \"inline\"}} >Время прохождения: </p>\r\n                                            <div hidden={hltbInfo.gameplay_main < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"light-green-text\" title={\"Главный сюжет\"}/><span className=\"hs\"/>{hltbInfo.gameplay_main} {hltbInfo.gameplay_main_unit}<span className=\"hs\"/>\r\n                                            </div> <p style={{display: \"inline\"}} > </p>\r\n                                            <div hidden={hltbInfo.gameplay_main_extra < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"yellow-text\" title={\"Главный сюжет + побочные задания\"}/><span className=\"hs\"/>{hltbInfo.gameplay_main_extra} {hltbInfo.gameplay_main_extra_unit}<span className=\"hs\"/> \r\n                                            </div> <p style={{display: \"inline\"}} > </p>\r\n                                            <div hidden={hltbInfo.gameplay_completionist < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"red-text\" title={\"Полное прохождение\"}/><span className=\"hs\"/>{hltbInfo.gameplay_completionist} {hltbInfo.gameplay_completionist_unit}\r\n                                            </div>\r\n                                        <br/>\r\n                                        <Rating stop={10}\r\n                                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                            initialRating={game.user_info?game.user_info.score:0}\r\n                                            readonly={!loggedIn | (!game.user_info)}\r\n                                            onChange={(score) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setGameStatus({score: score });\r\n                                                }}\r\n                                            }\r\n                                            style={{marginTop: \"20px\", marginBottom: \"10px\"}}\r\n                                        /> <br/>\r\n                                        <StatusButtonGroup\r\n                                            statuses={['Не играл', 'Буду играть', 'Играю', 'Дропнул', 'Прошел']}\r\n                                            activeColor='#4527a0' \r\n                                            userStatus={game.user_info?game.user_info.status:'Не играл'}\r\n                                            onChangeStatus={(status) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                   setGameStatus({ status: status });\r\n                                                }\r\n                                            }}\r\n                                            />\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"gameContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: game.rawg.description}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"20px\"}}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        \r\n                                        <MDBInput \r\n                                            type=\"textarea\" \r\n                                            id=\"reviewInput\"\r\n                                            label=\"Ваш отзыв\" \r\n                                            value={review}\r\n                                            onChange={(event) =>setReview(event.target.value)}\r\n                                            outline\r\n                                        />\r\n                                        <MDBInput\r\n                                            type=\"number\"\r\n                                            id=\"spentTimeInput\"\r\n                                            label=\"Время прохождения (часы)\" \r\n                                            value={spentTime}\r\n                                            onChange={(event) =>setSpentTime(event.target.value)}\r\n                                        />\r\n                                        <button \r\n                                            className={'savePreviewButton'} \r\n                                            disabled={!loggedIn | (!game.user_info)}\r\n                                            onClick={() => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setGameStatus({   review: document.getElementById('reviewInput').value, spent_time: document.getElementById('spentTimeInput').value });\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            >\r\n                                            Сохранить\r\n                                        </button>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBContainer>\r\n                            <div className=\"gameFriendsBlock\" hidden={gameFriends.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={gameFriends}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getGameRequestError(state),\r\n    game: selectors.getContentGame(state),\r\n    gameIsLoading: selectors.getIsLoadingContentGame(state),\r\n    gameFriends: selectors.getContentGameFriends(state),\r\n    gameFriendsIsLoading: selectors.getIsLoadingContentGameFriends(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestGame: (id) => {\r\n            dispatch(actions.requestGame(id));\r\n        },\r\n        requestGameFriends: (slug, page) => {\r\n            dispatch(actions.requestGameFriends(slug, page));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        setGameStatus: (status) => {\r\n            dispatch(actions.setGameStatus(status));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction MoviePage ( {requestMovie, movie, loggedIn, movieIsLoading, setMovieStatus, openLoginForm, requestMovieFriends, movieFriends, movieFriendsIsLoading\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [companies, setCompanies] = useState(\"\");\r\n    const [cast, setCast] = useState(\"\");\r\n    const [director, setDirector] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestMovie(id);\r\n            requestMovieFriends(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestMovie]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (movie.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{movie.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            if (movie.tmdb.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < movie.tmdb.genres.length; i++){\r\n                    newGenres += movie.tmdb.genres[i].name;\r\n                    if (i !== movie.tmdb.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                setGenres(newGenres);   \r\n            }\r\n\r\n            if (movie.tmdb.production_companies){\r\n                let newCompanies = \"\"\r\n                for (let i = 0; i < movie.tmdb.production_companies.length; i++){\r\n                    newCompanies += movie.tmdb.production_companies[i].name;\r\n                    if (i !== movie.tmdb.production_companies.length - 1)\r\n                        newCompanies += \", \";\r\n                }\r\n                setCompanies(newCompanies);   \r\n            }\r\n\r\n            if (movie.tmdb.cast){\r\n                let newCast = \"\";\r\n                let length = movie.tmdb.cast.length>5?5:movie.tmdb.cast.length;\r\n                for (let i = 0; i < length; i++){\r\n                    newCast += movie.tmdb.cast[i].name;\r\n                    if (i !== length - 1)\r\n                        newCast += \", \";\r\n                }\r\n                setCast(newCast);   \r\n            }\r\n\r\n            if (movie.tmdb.crew){\r\n                let newDirector = \"\"\r\n                for (let i = 0; i < movie.tmdb.crew.length; i++){\r\n                    if (movie.tmdb.crew[i].job === \"Director\"){\r\n                        newDirector = movie.tmdb.crew[i].name;\r\n                        break;\r\n                    }\r\n                }\r\n                setDirector(newDirector);   \r\n            }\r\n\r\n            if (movie.user_info){\r\n                setReview(movie.user_info.review);\r\n            }\r\n\r\n            document.title = movie.tmdb.title;\r\n\t\t},\r\n\t\t[movie]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + movie.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={movieIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"movieContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"movieContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{movie.tmdb.title}</h1>\r\n                                        <p style={{marginBottom: \"2px\"}}>Дата релиза: {movie.tmdb.release_date}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Продолжительность (мин): {movie.tmdb.runtime}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Жанр: {genres}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Компания: {companies}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Слоган: {movie.tmdb.tagline}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>В ролях: {cast}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Режиссер: {director}</p>\r\n                                        <br/>\r\n                                        <Rating stop={10}\r\n                                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                            initialRating={movie.user_info?movie.user_info.score:0}\r\n                                            readonly={!loggedIn | (!movie.user_info)}\r\n                                            onChange={(score) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setMovieStatus({score: score });\r\n                                                }}\r\n                                            }\r\n                                        /> <br/>\r\n                                        <StatusButtonGroup loggedIn={loggedIn} \r\n                                            statuses={['Не смотрел', 'Буду смотреть', 'Дропнул', 'Посмотрел']}\r\n                                            activeColor='#4527a0' \r\n                                            userStatus={movie.user_info?movie.user_info.status:'Не смотрел'}\r\n                                            onChangeStatus={(status) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                   setMovieStatus({ status: status });\r\n                                                }\r\n                                            }}/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"movieContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: movie.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"10px\"}}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        \r\n                                        <MDBInput \r\n                                            type=\"textarea\" \r\n                                            id=\"reviewInput\"\r\n                                            label=\"Ваш отзыв\" \r\n                                            value={review}\r\n                                            onChange={(event) =>setReview(event.target.value)}\r\n                                            outline\r\n                                        />\r\n                                        <button \r\n                                            className={'savePreviewButton'} \r\n                                            disabled={!loggedIn | (!movie.user_info)}\r\n                                            onClick={() => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setMovieStatus({   review: document.getElementById('reviewInput').value });\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            >\r\n                                            Сохранить\r\n                                        </button>\r\n                                    </MDBCol>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={movieFriends.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={movieFriends}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getGameRequestError(state),\r\n    movie: selectors.getContentMovie(state),\r\n    movieIsLoading: selectors.getIsLoadingContentMovie(state),\r\n    movieFriends: selectors.getContentMovieFriends(state),\r\n    movieFriendsIsLoading: selectors.getIsLoadingContentMovieFriends(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestMovie: (id) => {\r\n            dispatch(actions.requestMovie(id));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        setMovieStatus: (status) => {\r\n            dispatch(actions.setMovieStatus(status));\r\n        },\r\n        requestMovieFriends: (id, page) => {\r\n            dispatch(actions.requestMovieFriends(id, page));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviePage);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\n\r\nfunction CardGame( {game} ) {\r\n    let history = useHistory();\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (game.released){\r\n                let mas = game.released.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (game.name.length > 55){\r\n                let newName = game.name.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(game.name);\r\n        },\r\n        [game]\r\n    );\r\n\r\n    /*const mouseDownHandler = ( event ) => {\r\n        if( event.button === 1 ) {\r\n            console.log(window.location.origin + '/game/' + game.slug );\r\n\r\n        }\r\n      }*/\r\n\r\n    return(\r\n        <div className=\"searchCardGame\" >\r\n            <div className=\"searchCardGameImage\" style={{backgroundImage: `url(${game.background_image})`}}> </div>\r\n            <div className=\"searchCardGameText\">\r\n                <a href={window.location.origin + '/game/' + game.slug} \r\n                    onClick={(e) => { history.push('/game/' + game.slug); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n//onMouseDown={mouseDownHandler} \r\n\r\nexport default CardGame;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardMovie ( {movie} ) {\r\n    let history = useHistory();\r\n\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (movie.release_date){\r\n                let mas = movie.release_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (movie.title.length > 55){\r\n                let newName = movie.title.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(movie.title);\r\n        },\r\n        [movie]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardMovie\" >\r\n            <div className=\"searchCardMovieImage\" style={{backgroundImage: `url(${\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.poster_path})`}}> </div>\r\n            <div className=\"searchCardMovieText\">\r\n                <a href={window.location.origin + '/movie/' + movie.id} \r\n                    onClick={(e) => { history.push('/movie/' + movie.id); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardMovie;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardUser ( {user} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [user]\r\n    );\r\n\r\n    return(\r\n        <a href={window.location.origin + '/user/' + user.id} \r\n                    onClick={(e) => { history.push('/user/' + user.id); e.preventDefault();}}>\r\n            <div className=\"cardUser\" >\r\n                <div className=\"cardUserImage\" style={{backgroundImage: `url(${'http://upload.wikimedia.org/wikipedia/commons/f/f4/User_Avatar_2.png'})`}}> </div>\r\n                <div className=\"cardUserText\">\r\n                    <h4 >{user.username}</h4>\r\n                </div>\r\n            </div> \r\n        </a>\r\n        \r\n    )\r\n}\r\n\r\nexport default CardUser;\r\n","import React, {useState} from \"react\";\r\nimport './style.css';\r\n\r\nfunction CategoriesTab( {categories, activeColor, onChangeCategory} ) {\r\n    const [activeCategory, setActiveCategory] = useState(categories[0]);\r\n\r\n    return(\r\n        <div>\r\n            {categories.map((category) => <button className={'categoriesTab'} \r\n                                            key={category}\r\n                                            style={{color: (activeCategory === category?activeColor:'rgb(207, 207, 207)')}}\r\n                                            onClick={()=>{ \r\n                                                setActiveCategory(category);\r\n                                                onChangeCategory(category);\r\n                                            }}>\r\n                                            {category}\r\n                                        </button>) }\r\n           <hr style={{  backgroundColor: activeColor, height: 2.5, marginTop: \"0px\", marginBottom: \"10px\" }}/>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default CategoriesTab;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBFormInline\r\n} from \"mdbreact\";\r\nimport './style.css';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport CardGame from './CardGame';\r\nimport CardMovie from './CardMovie';\r\nimport CardUser from '../Common/CardUser';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction SearchPage ( { loggedIn, gamesIsLoading, moviesIsLoading, usersIsLoading, searchGame, games, searchMovie, movies, searchUsers, users } ) {\r\n    let history = useHistory();\r\n    let { query } = useParams();\r\n    const [queryText, setQueryText] = useState(\"\");\r\n    const [gamesCards, setGamesCards] = useState(\"\");\r\n    const [moviesCards, setMoviesCards] = useState(\"\");\r\n    const [usersCards, setUsersCards] = useState(\"\");\r\n    const [gamesPage, setGamesPage] = useState(1);\r\n    const [moviesPage, setMoviesPage] = useState(1);\r\n\r\n    const [activeCategory, setActiveCategory] = useState(\"Всё\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            searchGame(query, 1, 6);\r\n            searchMovie(query, 1);\r\n            searchUsers(query);\r\n            setQueryText(query);\r\n            document.title = 'Поиск';\r\n\t\t},\r\n\t\t[query, searchGame, searchMovie, searchUsers]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setGamesCards(<div className=\"searchCardsGroup\">{games.map(game => <CardGame game={game} key={game.id}/>)}</div>);\r\n\t\t},\r\n\t\t[games]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setMoviesCards(<div className=\"searchCardsGroup\">{movies.map(movie => <CardMovie movie={movie} key={movie.id}/>)}</div>);\r\n\t\t},\r\n\t\t[movies]\r\n    );\r\n\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setUsersCards(<div className=\"searchCardsGroup\">{users.map(user => <CardUser user={user} key={user.username}/>)}</div>);\r\n\t\t},\r\n\t\t[users]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg searchBG\"/> \r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"searchPage\"> \r\n                            <h1>Поиск</h1>\r\n                            <MDBFormInline className=\"md-form\"\r\n                                onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput2').value); return false; }}>\r\n                                <MDBIcon icon=\"search\" />\r\n                                <input \r\n                                    className=\"form-control form-control-sm ml-3 w-50\" \r\n                                    type=\"text\" \r\n                                    placeholder=\"Найти\" \r\n                                    aria-label=\"Search\" \r\n                                    id=\"searchInput2\" \r\n                                    value={queryText} \r\n                                    onChange={(event) =>setQueryText(event.target.value)}/>\r\n                            </MDBFormInline>\r\n\r\n                            <h1>Результаты поиска</h1>\r\n                                <CategoriesTab\r\n                                    categories={['Всё', 'Игры', 'Фильмы', 'Пользователи']}\r\n                                    activeColor='#7654de' \r\n                                    onChangeCategory={(category) => {\r\n                                        setActiveCategory(category);\r\n                                    }}/>\r\n\r\n                                <LoadingOverlay\r\n                                    active={gamesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем игры...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Игры'}>\r\n                                        <h3>Игры</h3>\r\n                                        <button className=\"paginationButton\" \r\n                                            disabled={gamesPage===1}\r\n                                            onClick={() => {searchGame(query, gamesPage-1, 6); setGamesPage(gamesPage-1)}}\r\n                                            >\r\n                                            &lt;\r\n                                        </button>\r\n                                        {gamesCards}\r\n                                        <button className=\"paginationButton\"\r\n                                            disabled={games.length < 6}\r\n                                            onClick={() => {searchGame(query, gamesPage+1, 6); setGamesPage(gamesPage+1)}}\r\n                                            >\r\n                                            &gt;\r\n                                        </button>\r\n                                    </div>\r\n                                </LoadingOverlay>\r\n\r\n                                <LoadingOverlay\r\n                                    active={moviesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем фильмы...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Фильмы'}>\r\n                                        <h3>Фильмы</h3>\r\n                                        <button className=\"paginationButton\" \r\n                                            disabled={moviesPage===1}\r\n                                            onClick={() => {searchMovie(query, moviesPage-1); setMoviesPage(moviesPage-1)}}\r\n                                            >\r\n                                            &lt;\r\n                                        </button>\r\n                                        {moviesCards}\r\n                                        <button className=\"paginationButton\"\r\n                                            disabled={movies.length < 20}\r\n                                            onClick={() => {searchMovie(query, moviesPage+1); setMoviesPage(moviesPage+1)}}\r\n                                            >\r\n                                            &gt;\r\n                                        </button>\r\n                                    </div>       \r\n                                </LoadingOverlay>\r\n                                \r\n                                <LoadingOverlay\r\n                                    active={usersIsLoading}\r\n                                    spinner\r\n                                    text='Ищем пользователей...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Пользователи'}>\r\n                                        <h3>Пользователи</h3>\r\n                                        {usersCards}\r\n                                    </div>    \r\n                                </LoadingOverlay>\r\n                                \r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    gamesIsLoading: selectors.getIsLoadingSearchGames(state),\r\n    moviesIsLoading: selectors.getIsLoadingSearchMovies(state),\r\n    usersIsLoading: selectors.getIsLoadingSearchUsers(state),\r\n    games: selectors.getSearchContentGames(state),\r\n    movies: selectors.getSearchContentMovies(state),\r\n    users: selectors.getSearchContentUsers(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        searchGame: (query, page, gamesCount) => {\r\n            dispatch(actions.searchGames(query, page, gamesCount));\r\n        },\r\n        searchMovie: (query, page) => {\r\n            dispatch(actions.searchMovies(query, page));\r\n        },\r\n        searchUsers: (query) => {\r\n            dispatch(actions.searchUsers(query));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);\r\n","import React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction LoginForm( {isOpen, closeForm, logIn, authError, openResetPasswordForm} ) {\r\n\tconst [password, setPassword] = useState(\"\");\r\n\tconst [login, setLogin] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody className=\"loginBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form onSubmit={(event) => {event.preventDefault(); logIn(login, password)}}>\r\n\t              <p className=\"h4 text-center mb-4\">Войти</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!authError} >Неверный логин или пароль!</p>\r\n\r\n\t              <label htmlFor=\"loginInput\" className=\"grey-text\">\r\n\t                Логин\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={login}\r\n\t\t\t\t\tonChange={(event) =>setLogin(event.target.value)}/>\r\n\t\t\t\t\t\r\n\t              <label htmlFor=\"passwordInput\" className=\"grey-text\">\r\n\t                Пароль\r\n\t              </label>\r\n\t              <input type=\"password\" id=\"passwordInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={password}\r\n\t\t\t\t\tonChange={(event) =>setPassword(event.target.value)}/>\r\n\t\t\t\t\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"submit\" className=\"confirmButton\">\r\n\t\t\t\t\t\tВойти\r\n\t\t\t\t\t</MDBBtn>\r\n\t\t\t\t\t<label className=\"passwordResetLabel\" onClick={() => {closeForm(); openResetPasswordForm()}}>\r\n\t\t\t\t\t\tВосстановить пароль\r\n\t              \t</label>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getLoginForm(state),\r\n\tauthError: selectors.getAuthError(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeLoginForm());\r\n\t\t},\r\n\t\tlogIn: (login, password) => {\r\n\t\t\tdispatch(actions.tryAuth(login, password));\r\n\t\t},\r\n\t\topenResetPasswordForm: () => {\r\n\t\t\tdispatch(actions.openResetPasswordForm());\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n","\r\nimport React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction RegistrationForm( {isOpen, closeForm, registrate, registrateArror, user} ) {\r\n\tconst [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n\tconst [password, setPassword] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\tconst [login, setLogin] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered >\r\n\t    <MDBModalBody className=\"registrationBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form>\r\n\t\t\t      <p className=\"note note-danger\" hidden={!registrateArror} >Ошибка регистрации!</p>\r\n                  <p className=\"note note-success\" hidden={user.email===\"\"} >{user.login}, добро пожаловать! Осталось только подтвердить вашу почту</p>\r\n\t              <h4>Регистрация</h4>\r\n\r\n\t              <label htmlFor=\"loginInput\">\r\n\t                Никнейм\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" \r\n\t\t\t\t\t\tvalue={login}\r\n\t\t\t\t\t\tonChange={(event) =>setLogin(event.target.value)}/>\r\n\r\n                  <label htmlFor=\"emailInput\">\r\n\t                Электронная почта\r\n\t              </label>\r\n\t\t\t\t  <input type=\"email\"  id=\"emailInput\"  className=\"form-control\" \r\n\t\t\t\t\t  value={email} \r\n\t\t\t\t\t  onChange={(event) =>setEmail(event.target.value)} />\r\n\r\n\t              <label htmlFor=\"passwordInput\">\r\n\t                Пароль\r\n\t              </label>\r\n\t\t\t\t  <input type=\"password\"id=\"passwordInput\" className=\"form-control\"\r\n\t\t\t\t  \t\tvalue={password}\r\n\t\t\t\t\t\tonChange={(event) =>setPassword(event.target.value)}/>\r\n\r\n\t\t\t\t  <label htmlFor=\"passwordConfirmInput\">\r\n\t                Подтверждение пароля\r\n\t              </label>\r\n\t\t\t\t  <input type=\"password\" id=\"passwordConfirmInput\" className=\"form-control\"\r\n\t\t\t\t  \t\tstyle={passwordConfirm===password?{outlineColor: 'green'}:{outlineColor: 'red'}}\r\n\t\t\t\t\t\tvalue={passwordConfirm}\r\n\t\t\t\t\t\tonChange={(event) =>setPasswordConfirm(event.target.value)}/>\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"button\" className=\"confirmButton\" \r\n\t\t\t\t\t\tdisabled={password!==passwordConfirm || login.length < 1  || email.length < 1 || password.length < 1}\r\n\t\t\t\t\t\tonClick={() => registrate(login, email, password)}>\r\n\t\t\t\t\t\tЗарегистрироваться\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getRegistrateForm(state),\r\n    registrateArror: selectors.getRegistrateError(state),\r\n    user: selectors.getUser(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeRegistrateForm());\r\n\t\t},\r\n\t\tregistrate: (login, email, password) => {\r\n\t\t\tdispatch(actions.registrationRequest(login, email, password));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);\r\n","import React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы сброса пароля\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction ResetPasswordForm( {isOpen, closeForm, resetPassword, resetPasswordError} ) {\r\n\tconst [email, setEmail] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody className=\"loginBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form onSubmit={(event) => {event.preventDefault(); resetPassword(email)}}>\r\n\t              <p className=\"h4 text-center mb-4\">Сбросить пароль</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!resetPasswordError | resetPasswordError === 'ok'} >{resetPasswordError}</p>\r\n                  <p className=\"note note-success\" hidden={resetPasswordError !== 'ok'} >На вашу почту отправлено письмо</p>\r\n\r\n\t              <label htmlFor=\"emailInput\" className=\"grey-text\">\r\n\t                Почта\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"emailInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={email}\r\n\t\t\t\t\tonChange={(event) =>setEmail(event.target.value)}/>\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"submit\" className=\"confirmButton\">\r\n\t\t\t\t\t\tСбросить\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getResetPasswordForm(state),\r\n\tresetPasswordError: selectors.getResetPasswordError(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeResetPasswordForm());\r\n\t\t},\r\n\t\tresetPassword: (email) => {\r\n\t\t\tdispatch(actions.resetPassword(email));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPasswordForm);\r\n","import React, {\r\n    useEffect\r\n} from \"react\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ConfirmPage ( {confirmEmailRequest} ) \r\n{\r\n\tlet search = window.location.search;\r\n\tlet params = new URLSearchParams(search);\r\n\tlet uid64 = params.get('uid64');\r\n\tlet token = params.get('token');\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconfirmEmailRequest(uid64, token);\r\n\t\t},\r\n\t\t// eslint-disable-next-line\r\n\t\t[]\r\n\t);\r\n\t\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        confirmEmailRequest: (uid64, token) => {\r\n            dispatch(actions.confirmEmailRequest(uid64, token));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmPage);","import React, {\r\n    useState\r\n} from \"react\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../store/actions';\r\nimport * as selectors from '../store/reducers';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ConfirmPasswordPage ( {confirmPassword, confirmPasswordError} ) \r\n{\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n    \r\n\tlet search = window.location.search;\r\n\tlet params = new URLSearchParams(search);\r\n\tlet token = params.get('token');\r\n\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n                <form onSubmit={(event) => {event.preventDefault(); confirmPassword(token, password)}} className=\"confirmPasswordForm\">\r\n                    <p className=\"h4\">Обновить пароль</p>\r\n                    <p className=\"note note-danger\" hidden={!confirmPasswordError | confirmPasswordError==='ok'} >{confirmPasswordError}</p>\r\n                    <p className=\"note note-success\" hidden={confirmPasswordError !== 'ok'} >Пароль обновлен!</p>\r\n\r\n                    <label htmlFor=\"passwordInput\" className=\"confirmPasswordLabel\">\r\n                        Новый пароль\r\n                    </label><br/>\r\n                    <input type=\"password\" id=\"passwordInput\" className=\"confirmPasswordInput\" \r\n                        value={password}\r\n                        onChange={(event) =>setPassword(event.target.value)}/>\r\n                    <br/>\r\n\r\n                    <label htmlFor=\"passwordConfurmInput\" className='confirmPasswordLabel'>\r\n                        Подтверждение пароля\r\n                    </label><br/>\r\n                    <input type=\"password\" id=\"passwordConfurmInput\" className=\"confirmPasswordInput\"\r\n                        value={passwordConfirm}\r\n                        onChange={(event) =>setPasswordConfirm(event.target.value)}/>\r\n                    <br/>\r\n\r\n                    <button type=\"submit\" \r\n                        className=\"confirmPasswordButton\"\r\n                        disabled={password!==passwordConfirm | password.length < 1}>\r\n                        Обновить\r\n                    </button>\r\n                </form>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    confirmPasswordError: selectors.getConfirmPasswordError(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        confirmPassword: (token, password) => {\r\n            dispatch(actions.confirmPassword(token, password));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmPasswordPage);","import React, { useEffect, useState} from \"react\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction GameBlock ( {games, stats} ) {\r\n\r\n    const gameColumns = [\r\n        {\r\n          label: 'Название',\r\n          field: 'name',\r\n          sort: 'disabled'\r\n        },\r\n        {\r\n          label: 'Статус',\r\n          field: 'status',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Оценка',\r\n          field: 'score',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Отзыв',\r\n          field: 'review',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Время прохождения',\r\n          field: 'spent_time',\r\n          sort: 'asc'\r\n        }\r\n      ];\r\n\r\n    const [gameTableData, setGameTableData] = useState({\r\n        columns: gameColumns,\r\n        rows: [\r\n        ]\r\n    });\r\n\r\n    useEffect(() =>{\r\n            if (games)\r\n            {\r\n                setGameTableData({\r\n                    columns: gameColumns,\r\n                    rows: games.map((game) => {\r\n                        return {\r\n                                name: <a className=\"dataTable\" href={window.location.origin + '/game/' + game.game.rawg_slug}>{game.game.rawg_name}</a>,\r\n                                name2: game.game.rawg_name,\r\n                                status: game.status,\r\n                                score: game.score,\r\n                                review: game.review,\r\n                                spent_time: parseFloat(game.spent_time),\r\n                                /*clickEvent: (e) => {\r\n                                    //window.open('/game/' + game.game.rawg_slug);\r\n                                    history.push('/game/' + game.game.rawg_slug);\r\n                                }*/\r\n                            }      \r\n                    })\r\n                });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [games]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            <p>Игр сыграно: {stats.games_count}, часов наиграно: {stats.games_total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={gameTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать игр на странице\"\r\n                searchLabel='Поиск'\r\n                className='dataTable'\r\n                />\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default GameBlock;\r\n","import React from \"react\";\r\n\r\nimport CardUser from '../Common/CardUser';\r\n\r\nfunction FriendBlock ( {users} ) {\r\n\r\n    return(\r\n        <div className=\"friendsBlock\">\r\n            { users.map((user) => <CardUser user={user} key={user.id}/>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FriendBlock;\r\n","import React, { useEffect, useState} from \"react\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction MovieBlock ( {movies, stats} ) {\r\n\r\n    const movieColumns = [\r\n      {\r\n        label: 'Название',\r\n        field: 'name',\r\n        sort: 'disabled'\r\n      },\r\n      {\r\n        label: 'Статус',\r\n        field: 'status',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Оценка',\r\n        field: 'score',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Отзыв',\r\n        field: 'review',\r\n        sort: 'asc'\r\n      }\r\n    ];\r\n\r\n  const [movieTableData, setMovieTableData] = useState({\r\n      columns: movieColumns,\r\n      rows: [\r\n      ]\r\n  });\r\n\r\n    useEffect(() =>{\r\n            if (movies)\r\n            {\r\n              setMovieTableData({\r\n                columns: movieColumns,\r\n                rows: movies.map((movie) => {\r\n                    return {\r\n                            name: <a className=\"dataTable\" href={window.location.origin + '/movie/' + movie.movie.tmdb_id}>{movie.movie.tmdb_name}</a>,\r\n                            name2: movie.movie.tmdb_name,\r\n                            status: movie.status,\r\n                            score: movie.score,\r\n                            review: movie.review,\r\n                            /*clickEvent: (e) => {\r\n                                //window.open('/game/' + game.game.rawg_slug);\r\n                                history.push('/movie/' + movie.movie.tmdb_id)\r\n                            }*/\r\n                        }      \r\n                  })\r\n              });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [movies]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            <p>Фильмов посмотрено: {stats.movies_count}, часов просмотра: {stats.movies_total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={movieTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать фильмов на странице\"\r\n                searchLabel='Поиск'\r\n                />\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default MovieBlock;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport './style.css';\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction LogRow ( {log, showUsername} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [log]\r\n    );\r\n\r\n    function translateActionType(action, actionResult){\r\n        switch (action) {\r\n            case 'score':\r\n                return 'оценил(а)';\r\n            case 'status':\r\n                return 'изменил(а) статус';\r\n            case 'review':\r\n                return 'оставил(а) отзыв на';\r\n            case 'spent_time':\r\n                return 'изменил(а) время прохождения';\r\n            case 'is_following':\r\n                if (actionResult === 'True')\r\n                    return 'подписан(а) на';\r\n                else\r\n                    return 'отписан(а) от';\r\n            default:\r\n                return action;\r\n        }\r\n    }\r\n\r\n    function translateType(type, actionType){\r\n        switch (type) {\r\n            case 'game':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'игру';\r\n                else\r\n                    return 'игры';\r\n            case 'movie':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'фильм';\r\n                else\r\n                    return 'фильма';\r\n            case 'user':\r\n                return 'пользователя';\r\n            default:\r\n                return type;\r\n        }\r\n    }\r\n\r\n    function nameToLink(name, type, id){\r\n        switch (type){\r\n            case 'game':\r\n                return  <a href={window.location.origin + '/game/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/game/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'movie':\r\n                return  <a href={window.location.origin + '/movie/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/movie/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'user':\r\n                return  <a href={window.location.origin + '/user/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/user/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            default:\r\n                return name;\r\n        }\r\n    }\r\n\r\n    function userToLink(username, userID){\r\n            return  <a href={window.location.origin + '/user/' + userID} \r\n                        className=\"logLink\"\r\n                        onClick={(e) => { history.push('/user/' + userID); e.preventDefault();}}>\r\n                            {username}\r\n                    </a>;\r\n    }\r\n\r\n    function actionResultToStr(actionType, actionResult){\r\n        switch (actionType){\r\n            case 'score':\r\n                return  <Rating stop={10}\r\n                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\"/>}\r\n                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" title={n}/>)}\r\n                            initialRating={actionResult}\r\n                            readonly={true}\r\n                        />\r\n            case 'status':\r\n                return '\"' + actionResult + '\"';\r\n            case 'review':\r\n                return '\"' + actionResult + '\"';\r\n            case 'spent_time':\r\n                return actionResult + ' ' + intToHours(actionResult);\r\n            case 'is_following':\r\n                return '';\r\n            default:\r\n                return actionResult;\r\n        }\r\n    }\r\n\r\n    function parseDate(date){\r\n        let newDate = new Date(date);\r\n        return newDate.toLocaleTimeString(\"ru-RU\");\r\n    }\r\n\r\n    return(\r\n            <p className=\"logRow\">{parseDate(log.created)} {showUsername?userToLink(log.user, log.user_id):''} {translateActionType(log.action_type, log.action_result)} {translateType(log.type, log.action_type)} {nameToLink(log.target, log.type, log.target_id)}{log.type==='user'?'':':'} {actionResultToStr(log.action_type, log.action_result)}</p>\r\n    )\r\n}\r\n\r\nfunction intToHours(number){\r\n    if (11 <= number && number <= 14)\r\n        return 'часов'\r\n    else if (number % 10 === 1)\r\n        return 'час'\r\n    else if (2 <= number % 10 && number % 10 <= 4)\r\n        return 'часа'\r\n    else\r\n        return 'часов'\r\n}\r\n\r\nexport default LogRow;","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\nimport './style.css';\r\nimport LogRow from './LogRow';\r\n\r\nfunction UserLogBlock ( {logs, showUsername, onChangePage} ) {\r\n    const [logsByDay, setLogsByDay] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    useEffect(() =>{\r\n            setLogsByDay(groupLogsByDay(logs.log));\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [logs]\r\n    );\r\n\r\n    function groupLogsByDay(logs){\r\n        let newLogs = [];\r\n\r\n        for (let i in logs){\r\n            let date = new Date(logs[i].created);\r\n\r\n            if (newLogs.length === 0)\r\n                newLogs.push({\r\n                    date: date,\r\n                    logs: [logs[i]]\r\n                });\r\n            else if (date.getDay() === newLogs[newLogs.length - 1].date.getDay())\r\n                newLogs[newLogs.length - 1].logs.push(logs[i]);\r\n            else\r\n                newLogs.push({\r\n                    date: date,\r\n                    logs: [logs[i]]\r\n                });\r\n        }\r\n        return newLogs;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            { \r\n                logsByDay.map((dayLog) => \r\n                    <div key={dayLog.logs[0].id} className=\"logDay\">\r\n                        <h5 className='logDate'>\r\n                            {dayLog.date.toLocaleDateString(\"ru-RU\")}\r\n                        </h5>\r\n                        <div className='logRows'>\r\n                            { dayLog.logs.map((log) => <LogRow log={log} showUsername={showUsername} key={log.id}/>) }\r\n                        </div>\r\n                    </div>\r\n                )  \r\n            } \r\n            <button \r\n                className=\"logPaginationButton\" \r\n                disabled={!logs.has_next_page}\r\n                onClick={() => {\r\n                        if (logs.has_next_page){\r\n                            onChangePage(currentPage+1);\r\n                            setCurrentPage(currentPage+1);\r\n                        } \r\n                    }}\r\n                >\r\n                <MDBIcon icon=\"arrow-down\" />\r\n            </button> \r\n\r\n            <button \r\n                className=\"logPaginationButton\" \r\n                disabled={currentPage===1}\r\n                onClick={() => {\r\n                        if (currentPage>1){\r\n                            onChangePage(currentPage-1);\r\n                            setCurrentPage(currentPage-1);\r\n                        } \r\n                    }}\r\n                >\r\n                <MDBIcon icon=\"arrow-up\" />\r\n            </button>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default UserLogBlock;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer\r\n} from \"mdbreact\";\r\nimport './style.css';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport GameBlock from './GameBlock';\r\nimport FriendBlock from './FriendBlock';\r\nimport MovieBlock from './MovieBlock';\r\nimport UserLogBlock from './UserLogBlock';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\n\r\nconst LOG_ROWS_COUNT = 15; \r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction UserPage ( { loggedIn, userIsLoading, getUserInfo, userInfo, currentUserInfo, setUserStatus, getUserLogs, userLogs, userLogsIsLoading,getUserFriendsLogs, userFriendsLogs, userFriendsLogsIsLoading}) \r\n{ \r\n    let { userID } = useParams();\r\n    const [activeCategory, setActiveCategory] = useState(\"Профиль\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            getUserInfo(userID);\r\n            getUserLogs(userID, 1, LOG_ROWS_COUNT);\r\n            if (loggedIn)\r\n                getUserFriendsLogs(userID, 1, LOG_ROWS_COUNT);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[userID, getUserInfo, getUserLogs, getUserFriendsLogs]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            document.title = 'Профиль ' + userInfo.username;\r\n\t\t},\r\n\t\t[userInfo]\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"bg searchBG\"/> \r\n            <LoadingOverlay\r\n                active={userIsLoading}\r\n                spinner\r\n                text='Загрузка...'\r\n                >\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                    <MDBCol className=\"userPage\"> \r\n                        <h1>Информация о пользователе {userInfo.username}</h1>\r\n                        <button \r\n                            hidden={currentUserInfo.username === userInfo.username}\r\n                            className='addFriendButton'\r\n                            onClick={ () => {\r\n                                setUserStatus({is_following: userInfo.is_followed?false:true}, userInfo.id);\r\n                            }}>\r\n                            {userInfo.is_followed?'Отписаться':'Подписаться'}\r\n                        </button>\r\n                        <CategoriesTab\r\n                            categories={['Профиль', 'Игры', 'Фильмы', 'Друзья']}\r\n                            activeColor='#7654de' \r\n                            onChangeCategory={(category) => { setActiveCategory(category) }}/>\r\n\r\n                            <div hidden={activeCategory!=='Профиль'}>\r\n                                <h4>Моя активность: </h4>\r\n                                <LoadingOverlay\r\n                                    active={userLogsIsLoading}\r\n                                    spinner\r\n                                    text='Загрузка активности...'\r\n                                    >\r\n                                    <UserLogBlock logs={userLogs} onChangePage={(pageNumber) => getUserLogs(userID, pageNumber, LOG_ROWS_COUNT)}/>\r\n                                </LoadingOverlay>\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Игры'}>\r\n                                <GameBlock games={userInfo.games} stats={userInfo.stats} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Фильмы'}>\r\n                                <MovieBlock movies={userInfo.movies} stats={userInfo.stats} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Друзья'}>\r\n                                <FriendBlock users={userInfo.followed_users?userInfo.followed_users:[]} />\r\n                                <h4>Активность друзей: </h4>\r\n                                <LoadingOverlay\r\n                                    active={userFriendsLogsIsLoading}\r\n                                    spinner\r\n                                    text='Загрузка активности...'\r\n                                    >\r\n                                    <UserLogBlock logs={userFriendsLogs} onChangePage={(pageNumber) => getUserFriendsLogs(userID, pageNumber, LOG_ROWS_COUNT)} showUsername={true}/>\r\n                                </LoadingOverlay>\r\n                                \r\n                            </div>\r\n                    </MDBCol>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n            </LoadingOverlay>\r\n        </div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    userIsLoading: selectors.getIsLoadingUserPageContent(state),\r\n    userInfo: selectors.getUserPageContent(state),\r\n    userLogs: selectors.getUserPageLogs(state),\r\n    userLogsIsLoading: selectors.getIsLoadingUserPageLogs(state),\r\n    userFriendsLogs: selectors.getUserPageFriendsLogs(state),\r\n    userFriendsLogsIsLoading: selectors.getIsLoadingUserPageFriendsLogs(state),\r\n    currentUserInfo: selectors.getUser(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        getUserInfo: (user_id) => {\r\n            dispatch(actions.requestUserPageContent(user_id));\r\n        },\r\n        setUserStatus: (is_following, userID) => {\r\n            dispatch(actions.setUserStatus(is_following, userID));\r\n        },\r\n        getUserLogs: (userID, page, resultsOnPage) => {\r\n            dispatch(actions.requestUserPageLogs(userID, page, resultsOnPage));\r\n        },\r\n        getUserFriendsLogs: (userID, page, resultsOnPage) => {\r\n            dispatch(actions.requestUserPageFriendsLogs(userID, page, resultsOnPage));\r\n        },\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage);","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nimport {\r\n\tMDBNavbar,\r\n    MDBNavItem,\r\n    MDBNavbarBrand,\r\n    MDBNavbarNav,\r\n    MDBNavLink,\r\n    MDBIcon,\r\n    MDBFormInline,\r\n    MDBDropdown,\r\n    MDBDropdownItem,\r\n    MDBDropdownMenu,\r\n    MDBDropdownToggle\r\n} from \"mdbreact\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\nfunction Navbar( {loggedIn, onLoginClick, onLogoutClick, onRegistrationClick, user} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n            <MDBNavbar style={{ backgroundColor: \"#4527a0\" }} dark expand=\"md\" fixed=\"top\">\r\n            <MDBNavbarBrand onClick={ (event) => {event.preventDefault(); history.push('/search/example'); return false; }}>\r\n                <strong className=\"white-text\" style={{cursor: 'pointer'}}>Interests</strong>\r\n            </MDBNavbarBrand>\r\n            <MDBNavbarNav left>\r\n                \r\n            </MDBNavbarNav>\r\n\r\n            <MDBNavbarNav right>\r\n                <MDBNavItem>\r\n                    <MDBFormInline onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput').value); return false; }}>\r\n                        <div className=\"md-form my-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Найти\" aria-label=\"Найти\"\r\n                            id=\"searchInput\"/>\r\n                        </div>\r\n                    </MDBFormInline>\r\n                </MDBNavItem>\r\n\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onLoginClick} >\r\n                        <MDBIcon icon=\"sign-in-alt\" /> Войти\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onRegistrationClick} >\r\n                        <MDBIcon icon=\"user-plus\" /> Зарегистрироваться\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem hidden={!loggedIn} className=\"font-weight-bold\">\r\n                    <MDBDropdown>\r\n                        <MDBDropdownToggle nav caret>\r\n                        <span className=\"mr-2\">{user.username}</span>\r\n                        </MDBDropdownToggle>\r\n                        <MDBDropdownMenu>\r\n                            <MDBDropdownItem href={\"/user/\"+user.id}>Профиль</MDBDropdownItem>\r\n                            <MDBDropdownItem onClick={ onLogoutClick }>\r\n                                <MDBIcon icon=\"sign-out-alt\"/> Выйти\r\n                            </MDBDropdownItem>\r\n                        </MDBDropdownMenu>\r\n                    </MDBDropdown>\r\n                </MDBNavItem>\r\n            </MDBNavbarNav>\r\n        </MDBNavbar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    user: selectors.getUser(state)\r\n});\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonLoginClick: () => {\r\n\t\t\tdispatch(actions.openLoginForm());\r\n        },\r\n        onLogoutClick: () =>{\r\n            dispatch(actions.resetAuthorization());\r\n        },\r\n        onRegistrationClick: () =>{\r\n            dispatch(actions.openRegistrateForm());\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport HomePage from \"./components/HomePage\";\r\nimport GamePage from \"./components/GamePage/GamePage\";\r\nimport MoviePage from \"./components/MoviePage/MoviePage\";\r\nimport SearchPage from \"./components/SearchPage/SearchPage\";\r\nimport LoginForm from \"./components/Modals/LoginForm\";\r\nimport RegistrationForm from \"./components/Modals/RegistrationForm\";\r\nimport ResetPasswordForm from \"./components/Modals/ResetPasswordForm\";\r\nimport ConfirmPage from \"./components/ConfirmPage\";\r\nimport ConfirmPasswordPage from \"./components/ConfirmPasswordPage\";\r\nimport UserPage from \"./components/UserPage/UserPage\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar/>\r\n        <div className=\"navbar\"></div>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route exact path=\"/game/:id\" component={GamePage} />\r\n            <Route exact path=\"/movie/:id\" component={MoviePage} />\r\n            <Route exact path=\"/search/:query\" component={SearchPage} />\r\n            <Route exact path=\"/confirm/\" component={ConfirmPage} />\r\n            <Route exact path=\"/confirm_password/\" component={ConfirmPasswordPage} />\r\n            <Route exact path=\"/user/:userID\" component={UserPage} />\r\n            <Route render={function () { return <h1>Not Found</h1>; }} />\r\n            \r\n        </Switch>\r\n      <ToastContainer position=\"top-center\" hideProgressBar newestOnTop closeOnClick/>\r\n      <LoginForm/>\r\n      <RegistrationForm/>\r\n      <ResetPasswordForm/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//confirm_password_reset\r\nexport default Routes;","import React, {useEffect} from \"react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { connect } from 'react-redux'; \r\nimport Routes from \"./Routes\";\r\nimport * as actions from \"./store/actions\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App({onLoad}) {\r\n\r\n  useEffect(\r\n    () => {\r\n        onLoad();\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"flyout\">\r\n        <main>\r\n          <Routes />\r\n        </main>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n    onLoad: () => {\r\n      dispatch(actions.checkAuthorization());\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore, \r\n  applyMiddleware, \r\n  //combineReducers,\r\n   compose } from 'redux';\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './store/reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk) ) );\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\nexport default store;\r\n\r\n"],"sourceRoot":""}