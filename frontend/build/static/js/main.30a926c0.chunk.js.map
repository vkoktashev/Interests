{"version":3,"sources":["store/actionTypes.js","store/reducers.js","components/HomePage.js","settings.js","services/jwtAuth.js","services/requests.js","store/actions.js","components/Common/StatusButtonGroup.js","components/Common/FriendsActivityRow.js","components/Common/FriendsActivity.js","components/Game/GamePage.js","components/Movie/MoviePage.js","components/Show/EpisodeRow.js","components/Show/SeasonsBlock.js","components/Show/ShowPage.js","components/Show/DetailedEpisodeRow.js","components/Show/SeasonPage.js","components/Show/EpisodePage.js","components/Search/CardGame.js","components/Search/CardMovie.js","components/Search/CardShow.js","components/Common/CardUser.js","components/Common/CategoriesTab.js","components/Search/SearchPage.js","components/Modals/LoginForm.js","components/Modals/RegistrationForm.js","components/Modals/ResetPasswordForm.js","components/ConfirmPage.js","components/ConfirmPasswordPage.js","components/UserPage/Colors.js","components/UserPage/GameBlock.js","components/UserPage/FriendBlock.js","components/UserPage/MovieBlock.js","components/UserPage/LogRow.js","components/UserPage/UserLogBlock.js","components/UserPage/ShowBlock.js","components/UserPage/UserPage.js","components/Navbar.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["SET_USER","SET_AUTH","SET_LOGINFORM","SET_REGISTRATEFORM","SET_RESET_PASSWORD_FORM","SET_CONTENT_GAME","SET_CONTENT_GAME_USER_INFO","SET_CONTENT_MOVIE","SET_CONTENT_MOVIE_USER_INFO","SET_CONTENT_SHOW","SET_CONTENT_SHOW_USER_INFO","SET_SEARCH_CONTENT_GAMES","SET_SEARCH_CONTENT_MOVIES","SET_SEARCH_CONTENT_SHOWS","SET_SEARCH_CONTENT_USERS","SET_USER_PAGE_CONTENT","SET_USER_PAGE_FOLLOWING","SET_USER_PAGE_LOGs","SET_USER_PAGE_FRIENDS_LOGS","SET_IS_LOADING_CONTENT_GAME","SET_IS_LOADING_CONTENT_GAME_USER_INFO","SET_IS_LOADING_CONTENT_MOVIE","SET_IS_LOADING_CONTENT_MOVIE_USER_INFO","SET_IS_LOADING_CONTENT_SHOW","SET_IS_LOADING_CONTENT_SHOW_USER_INFO","SET_IS_LOADING_SEARCH_GAMES","SET_IS_LOADING_SEARCH_MOVIES","SET_IS_LOADING_SEARCH_SHOWS","SET_IS_LOADING_SEARCH_USERS","SET_IS_LOADING_USER_PAGE_CONTENT","SET_IS_LOADING_USER_PAGE_LOGS","SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS","AUTH_ERROR","REGISTRATE_ERROR","GAME_REQUEST_ERROR","MOVIE_REQUEST_ERROR","SHOW_REQUEST_ERROR","USER_PAGE_ERROR","RESET_PASSWORD_ERROR","CONFIRM_PASSWORD_ERROR","initialState","Map","auth","loggedIn","user","username","email","id","content","game","main_info","rawg","name","background_image","background_image_additional","developers","hltb","game_image_url","user_info","status","review","score","spent_time","friends_info","movie","tmdb","title","poster_path","show","episode_run_time","searchContent","games","movies","shows","users","userPageContent","stats","userLogs","log","userFriendsLogs","openedPages","LoginForm","RegistrateForm","ResetPasswordForm","errors","registrate","gameRequest","movieRequest","userPage","resetPassword","confirmPassword","isLoading","contentGame","contentGameUserInfo","contentMovie","contentMovieUserInfo","contentShow","contentShowUserInfo","userPageLogs","userPageFriendsLogs","searchGames","searchMovies","searchShows","searchUsers","getLoggedIn","state","get","getUser","getContentGame","getContentGameUserInfo","getContentMovie","getContentMovieUserInfo","getContentShow","getContentShowUserInfo","getSearchContentGames","getSearchContentMovies","getSearchContentShows","getSearchContentUsers","getAuthError","getRegistrateError","getGameRequestError","getMovieRequestError","getShowRequestError","showRequest","getResetPasswordError","getConfirmPasswordError","getLoginForm","getRegistrateForm","getResetPasswordForm","getIsLoadingContentGame","getIsLoadingContentGameUserInfo","getIsLoadingContentMovie","getIsLoadingContentMovieUserInfo","getIsLoadingContentShow","getIsLoadingContentShowUserInfo","getIsLoadingSearchGames","getIsLoadingSearchMovies","getIsLoadingSearchShows","getIsLoadingSearchUsers","getIsLoadingUserPageContent","getIsLoadingUserPageLogs","getIsLoadingUserPageFriendsLogs","getUserPageContent","getUserPageLogs","getUserPageFriendsLogs","connect","selectors","className","style","marginTop","marginLeft","href","fontWeight","src","alt","BACKEND_URL","GET_TOKEN_URL","REFRESH_TOKEN_URL","REGISTRATE_URL","CONFIRM_URL","RESET_PASSWORD_URL","CONFIRM_PASSWORD_URL","GET_GAME_URL","SEARCH_GAMES_URL","GET_MOVIE_URL","SEARCH_MOVIES_URL","GET_SHOW_URL","SEARCH_SHOWS_URL","USER_INFO_URL","SEARCH_USERS_URL","axiosConfig","headers","getToken","password","a","axios","post","urls","res","userData","jwt_decode","data","access","user_id","token","refreshToken","refresh","console","updateToken","registration","response","confirmation","uid64","patch","put","getGame","AuthStr","getMovie","getShow","getShowSeason","showID","seasonNumber","getShowEpisode","episodeNumber","setGameStatus","gameSlug","setMovieStatus","setShowStatus","setShowSeasonStatus","setShowEpisodesStatus","episodesList","query","page","gamesCount","params","page_size","getUserInfo","userID","setUserStatus","is_following","getUserLog","resultsOnPage","getUserFriendsLog","getGameUserInfo","slug","getMovieUserInfo","getShowUserInfo","getShowSeasonUserInfo","seasonID","getShowEpisodeUserInfo","episodeID","checkAuthorization","dispatch","localStorage","getItem","Date","now","type","actionTypes","setItem","resetAuthorization","removeItem","Requests","then","result","toast","error","openLoginForm","isOpen","setLoading","setError","isError","defaults","common","StatusButtonGroup","statuses","activeColor","onChangeStatus","userStatus","map","backgroundColor","onClick","intToHours","number","FriendsActivityRow","info","history","useHistory","window","location","origin","e","push","preventDefault","stop","emptySymbol","far","icon","size","fullSymbol","n","initialRating","readonly","hidden","FriendsActivity","friendInfo","requestError","gameIsLoading","gameUserInfo","gameUserInfoIsLoading","requestGame","actions","requestGameUserInfo","newResult","getState","useParams","useState","genres","setGenres","metascoreBlock","setMetascoreBlock","setReview","spentTime","setSpentTime","userRate","setUserRate","setDevelopers","date","setDate","gameplay_main_extra","gameplay_main","gameplay_comletionist","hltbInfo","setHtlbInfo","setClear","gameplay_completionist","useEffect","newGenres","i","length","metacritic","playtime","newDevelopers","released","mas","split","newDate","document","backgroundImage","active","spinner","text","md","display","gameplay_main_unit","gameplay_main_extra_unit","gameplay_completionist_unit","fontSize","onChange","marginBottom","paddingTop","dangerouslySetInnerHTML","__html","description","paddingLeft","label","value","event","target","outline","disabled","getElementById","movieIsLoading","movieUserInfo","movieUserInfoIsLoading","requestMovie","requestMovieUserInfo","companies","setCompanies","cast","setCast","director","setDirector","vote_average","production_companies","newCompanies","newCast","crew","newDirector","job","backdrop_path","original_title","release_date","runtime","tagline","overview","EpisodeRow","episode","season","userInfo","setShowEpisodeUserStatus","onCheckBox","checked","isChecked","setIsChecked","start","concat","episodes","season_number","episode_number","SeasonsBlock","seasons","hereSeasons","setHereSeasons","isCheckedAll","setIsCheckedAll","checkboxes","setCheckboxes","needHeader","setNeedHeader","getSeasonByNumber","newSeasons","newCheckBoxes","newIsChecked","newSeason","episodes_user_info","find","episode_count","toWatched","current","toJS","changeShowEpisodes","open","toString","newCheckboxes","set","changeSeasonEpisodes","counter","newValue","setIn","changeEpisode","changes","parseInt","updateEpisodes","showIsLoading","showUserInfo","showUserInfoIsLoading","requestShow","setShowUserStatus","requestShowUserInfo","showStatus","firstDate","setFirstDate","lastDate","setLastDate","first_air_date","last_air_date","original_name","number_of_seasons","number_of_episodes","DetailedEpisodeRow","air_date","toLocaleDateString","showSeason","showSeasonIsLoading","requestShowSeason","requestShowSeasonUserInfo","user_watched_show","show_id","chartData","setChartData","getEpisodeByNumber","show_name","newData","show_original_name","width","height","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","interval","tick","fill","tickLine","domain","tickCount","contentStyle","color","stroke","fillOpacity","showEpisode","showEpisodeIsLoading","requestShowEpisode","setEpisodeUserStatus","requestShowEpisodeUserInfo","still_path","CardGame","setName","newName","substr","CardMovie","CardShow","CardUser","CategoriesTab","categories","onChangeCategory","activeCategory","setActiveCategory","category","gamesIsLoading","moviesIsLoading","showsIsLoading","usersIsLoading","searchGame","searchMovie","results","searchShow","queryText","setQueryText","gamesCards","setGamesCards","moviesCards","setMoviesCards","showsCards","setShowsCards","usersCards","setUsersCards","gamesPage","setGamesPage","moviesPage","setMoviesPage","showsPage","setShowsPage","onSubmit","placeholder","aria-label","authError","closeForm","logIn","login","openResetPasswordForm","setPassword","setLogin","toggle","centered","htmlFor","registrateArror","passwordConfirm","setPasswordConfirm","setEmail","outlineColor","resetPasswordError","confirmEmailRequest","success","search","URLSearchParams","confirmPasswordError","COLORS","GameBlock","gameChartData","setGameChartData","gameColumns","field","sort","columns","rows","gameTableData","setGameTableData","rawg_slug","rawg_name","name2","parseFloat","genre","spent_time_percent","b","count","total_spent_time","striped","bordered","small","barReverse","noBottomColumns","noRecordsFoundLabel","paginationLabel","entriesLabel","searchLabel","angle","tickMargin","itemStyle","borderRadius","cursor","entry","index","FriendBlock","MovieBlock","movieChartData","setMovieChartData","movieColumns","movieTableData","setMovieTableData","tmdb_id","tmdb_name","LogRow","showUsername","created","toLocaleTimeString","action","actionResult","translateActionType","action_type","action_result","actionType","translateType","parent_name","nameToLink","target_id","actionResultToStr","UserLogBlock","logs","onChangePage","logsByDay","setLogsByDay","currentPage","setCurrentPage","newLogs","getDay","groupLogsByDay","dayLog","has_next_page","ShowBlock","showChartData","setShowChartData","showColumns","showTableData","setShowTableData","userIsLoading","userLogsIsLoading","userFriendsLogsIsLoading","currentUserInfo","getUserLogs","getUserFriendsLogs","is_followed","cx","cy","outerRadius","labelLine","minAngle","verticalAlign","horizontalAlign","pageNumber","followed_users","onLoginClick","onLogoutClick","onRegistrationClick","dark","expand","fixed","to","nav","caret","Routes","exact","path","component","HomePage","GamePage","MoviePage","ShowPage","SeasonPage","EpisodePage","SearchPage","ConfirmPage","ConfirmPasswordPage","UserPage","render","position","hideProgressBar","newestOnTop","closeOnClick","React","Component","onLoad","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","types","applyMiddleware","thunk","ReactDOM","URL","process","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.30a926c0.chunk.js","sourcesContent":["export const SET_USER = 'SET_USER';\r\nexport const SET_AUTH = \"SET_AUTH\";\r\n\r\nexport const SET_LOGINFORM = \"SET_LOGINFORM\";\r\nexport const SET_REGISTRATEFORM = \"SET_REGISTRATEFORM\";\r\nexport const SET_RESET_PASSWORD_FORM = \"SET_RESET_PASSWORD_FORM\";\r\n\r\nexport const SET_CONTENT_GAME = \"SET_CONTENT_GAME\";\r\nexport const SET_CONTENT_GAME_USER_INFO = \"SET_CONTENT_GAME_USER_INFO\";\r\n\r\nexport const SET_CONTENT_MOVIE = \"SET_CONTENT_MOVIE\";\r\nexport const SET_CONTENT_MOVIE_USER_INFO = \"SET_CONTENT_MOVIE_USER_INFO\";\r\n\r\nexport const SET_CONTENT_SHOW = \"SET_CONTENT_SHOW\";\r\nexport const SET_CONTENT_SHOW_USER_INFO = \"SET_CONTENT_SHOW_USER_INFO\";\r\n\r\nexport const SET_SEARCH_CONTENT_GAMES = \"SET_SEARCH_CONTENT_GAMES\";\r\nexport const SET_SEARCH_CONTENT_MOVIES = \"SET_SEARCH_CONTENT_MOVIES\";\r\nexport const SET_SEARCH_CONTENT_SHOWS = \"SET_SEARCH_CONTENT_SHOWS\";\r\nexport const SET_SEARCH_CONTENT_USERS = \"SET_SEARCH_CONTENT_USERS\";\r\n\r\nexport const SET_USER_PAGE_CONTENT = \"SET_USER_PAGE_CONTENT\";\r\nexport const SET_USER_PAGE_FOLLOWING = \"SET_USER_PAGE_FOLLOWING\";\r\nexport const SET_USER_PAGE_LOGs = \"SET_USER_PAGE_LOGs\";\r\nexport const SET_USER_PAGE_FRIENDS_LOGS = \"SET_USER_PAGE_FRIENDS_LOGS\";\r\n\r\nexport const SET_IS_LOADING_CONTENT_GAME = \"SET_IS_LOADING_CONTENT_GAME\";\r\nexport const SET_IS_LOADING_CONTENT_GAME_USER_INFO = \"SET_IS_LOADING_CONTENT_GAME_USER_INFO\";\r\nexport const SET_IS_LOADING_CONTENT_MOVIE = \"SET_IS_LOADING_CONTENT_MOVIE\";\r\nexport const SET_IS_LOADING_CONTENT_MOVIE_USER_INFO = \"SET_IS_LOADING_CONTENT_MOVIE_USER_INFO\";\r\nexport const SET_IS_LOADING_CONTENT_SHOW = \"SET_IS_LOADING_CONTENT_SHOW\";\r\nexport const SET_IS_LOADING_CONTENT_SHOW_USER_INFO = \"SET_IS_LOADING_CONTENT_SHOW_USER_INFO\";\r\nexport const SET_IS_LOADING_SEARCH_GAMES = \"SET_IS_LOADING_SEARCH_GAMES\";\r\nexport const SET_IS_LOADING_SEARCH_MOVIES = \"SET_IS_LOADING_SEARCH_MOVIES\";\r\nexport const SET_IS_LOADING_SEARCH_SHOWS = \"SET_IS_LOADING_SEARCH_SHOWS\";\r\nexport const SET_IS_LOADING_SEARCH_USERS = \"SET_IS_LOADING_SEARCH_USERS\";\r\nexport const SET_IS_LOADING_USER_PAGE_CONTENT = \"SET_IS_LOADING_USER_PAGE_CONTENT\";\r\nexport const SET_IS_LOADING_USER_PAGE_LOGS = \"SET_IS_LOADING_USER_PAGE_LOGS\";\r\nexport const SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS = \"SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS\";\r\n\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const REGISTRATE_ERROR = \"REGISTRATE_ERROR\";\r\nexport const GAME_REQUEST_ERROR = \"GAME_REQUEST_ERROR\";\r\nexport const MOVIE_REQUEST_ERROR = \"MOVIE_REQUEST_ERROR\";\r\nexport const SHOW_REQUEST_ERROR = \"SHOW_REQUEST_ERROR\";\r\nexport const USER_PAGE_ERROR = \"USER_PAGE_ERROR\";\r\nexport const RESET_PASSWORD_ERROR = \"RESET_PASSWORD_ERROR\";\r\nexport const CONFIRM_PASSWORD_ERROR = \"CONFIRM_PASSWORD_ERROR\";","import * as types from './actionTypes';\r\nimport { Map } from 'immutable';\r\n\r\n// Создаем reducer с начальным состоянием.\r\nconst initialState = Map(\r\n    {\r\n        auth: { loggedIn: false },\r\n        user: { username:\"\", email:\"\", id: null },\r\n        content: { \r\n            game: { main_info:{ rawg: { name: \"\", background_image: \"\", background_image_additional: \"\", developers: [{}], },\r\n                                hltb:{ game_image_url: \"\"  },   },\r\n                    user_info:{ status: null, review: \"\", score: 0, spent_time: 0, friends_info: [] }\r\n            },\r\n            movie: { main_info:{ tmdb: {  title: \"\", poster_path: \"\", developers: [{}],  }, },\r\n                     user_info:{ status: null,  review: \"\", score: 0, friends_info: []  }\r\n            },\r\n            show: { main_info:{ tmdb: {  title: \"\", poster_path: \"\",developers: [{}], episode_run_time: []} },\r\n                    user_info:{ status: null, review: \"\", score: 0, friends_info: [] }\r\n            }  \r\n        },\r\n        searchContent: { games: [], movies: [], shows: [], users: [] },\r\n        userPageContent: {\r\n            user: {\r\n                stats: {}\r\n            },\r\n            userLogs: {log: []},\r\n            userFriendsLogs: {log: []},\r\n        },\r\n        openedPages: { LoginForm: false, RegistrateForm: false, ResetPasswordForm: false },\r\n        errors: {auth: false, registrate: false, gameRequest: false, movieRequest: false, userPage: false, resetPassword: false, confirmPassword: false },\r\n        isLoading: {    contentGame: false, contentGameUserInfo: false,\r\n                        contentMovie: false, contentMovieUserInfo: false,\r\n                        contentShow: false, contentShowUserInfo: false,\r\n                        userPageContent: false, userPageLogs: false, userPageFriendsLogs: false,\r\n                        searchGames: false, searchMovies: false, searchShows: false,  searchUsers: false,\r\n                    }\r\n    }\r\n);\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    //Редьюсеры пользовательской информации\r\n    case types.SET_USER: return state.setIn(['user'], action.user);\r\n    case types.SET_AUTH: return state.setIn(['auth'], action.auth);\r\n\r\n    //Редьюсеры информации об игре\r\n    case types.SET_CONTENT_GAME: return state.setIn(['content', 'game', 'main_info'], action.game);\r\n    case types.SET_CONTENT_GAME_USER_INFO: return state.setIn(['content', 'game', 'user_info'], action.user_info);\r\n\r\n    //Редьюсеры информации о фильме\r\n    case types.SET_CONTENT_MOVIE: return state.setIn(['content', 'movie', 'main_info'], action.movie);\r\n    case types.SET_CONTENT_MOVIE_USER_INFO: return state.setIn(['content', 'movie', 'user_info'], action.user_info);\r\n\r\n    //Редьюсеры информации о сериале\r\n    case types.SET_CONTENT_SHOW: return state.setIn(['content', 'show', 'main_info'], action.show);\r\n    case types.SET_CONTENT_SHOW_USER_INFO: return state.setIn(['content', 'show', 'user_info'], action.user_info);\r\n\r\n    //Редьюсеры результатов поиска\r\n    case types.SET_SEARCH_CONTENT_GAMES: return state.setIn(['searchContent', 'games'], action.games);\r\n    case types.SET_SEARCH_CONTENT_MOVIES: return state.setIn(['searchContent', 'movies'], action.movies);\r\n    case types.SET_SEARCH_CONTENT_SHOWS: return state.setIn(['searchContent', 'shows'], action.shows);\r\n    case types.SET_SEARCH_CONTENT_USERS: return state.setIn(['searchContent', 'users'], action.users);\r\n\r\n    //Редьюсеры страницы профиля\r\n    case types.SET_USER_PAGE_CONTENT: return state.setIn(['userPageContent', 'user'], action.content);\r\n    case types.SET_USER_PAGE_FOLLOWING: return state.setIn(['userPageContent', 'user', 'is_followed'], action.is_following);\r\n    case types.SET_USER_PAGE_LOGs:  return state.setIn(['userPageContent', 'userLogs'], action.logs);\r\n    case types.SET_USER_PAGE_FRIENDS_LOGS: return state.setIn(['userPageContent', 'userFriendsLogs'], action.logs);\r\n\r\n    //Редьюсеры состояния всплывающих окон\r\n    case types.SET_LOGINFORM:  return state.setIn(['openedPages', 'LoginForm'], action.isOpen);\r\n    case types.SET_REGISTRATEFORM:  return state.setIn(['openedPages', 'RegistrateForm'], action.isOpen);\r\n    case types.SET_RESET_PASSWORD_FORM:  return state.setIn(['openedPages', 'ResetPasswordForm'], action.isOpen);\r\n\r\n    //Редьюсеры ошибок\r\n    case types.AUTH_ERROR:  return state.setIn(['errors', 'auth'], action.error);\r\n    case types.REGISTRATE_ERROR:  return state.setIn(['errors', 'registrate'], action.error);\r\n    case types.GAME_REQUEST_ERROR: return state.setIn(['errors', 'gameRequest'], action.error);\r\n    case types.MOVIE_REQUEST_ERROR:  return state.setIn(['errors', 'movieRequest'], action.error);\r\n    case types.SHOW_REQUEST_ERROR:  return state.setIn(['errors', 'showRequest'], action.error);\r\n    case types.USER_PAGE_ERROR: return state.setIn(['errors', 'userPage'], action.error);\r\n    case types.RESET_PASSWORD_ERROR: return state.setIn(['errors', 'resetPassword'], action.error);\r\n    case types.CONFIRM_PASSWORD_ERROR: return state.setIn(['errors', 'confirmPassword'], action.error);\r\n\r\n    //Редьюсеры состояния загрузки\r\n    case types.SET_IS_LOADING_CONTENT_GAME:  return state.setIn(['isLoading', 'contentGame'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_GAME_USER_INFO:  return state.setIn(['isLoading', 'contentGameUserInfo'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_MOVIE:  return state.setIn(['isLoading', 'contentMovie'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_MOVIE_USER_INFO:  return state.setIn(['isLoading', 'contentMovieUserInfo'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_SHOW:  return state.setIn(['isLoading', 'contentShow'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_SHOW_USER_INFO:  return state.setIn(['isLoading', 'contentShowUserInfo'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_GAMES:  return state.setIn(['isLoading', 'searchGames'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_MOVIES:  return state.setIn(['isLoading', 'searchMovies'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_SHOWS:  return state.setIn(['isLoading', 'searchShows'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_CONTENT:  return state.setIn(['isLoading', 'userPageContent'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_LOGS: return state.setIn(['isLoading', 'userPageLogs'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS:  return state.setIn(['isLoading', 'userPageFriendsLogs'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_USERS: return state.setIn(['isLoading', 'searchUsers'], action.isLoading);\r\n\r\n    default: return state;\r\n  }\r\n}\r\n\r\n//Селекторы пользовательской информации\r\nexport function getLoggedIn(state) { return state.get('auth').loggedIn; }\r\nexport function getAuth(state) { return state.get('auth');}\r\nexport function getUser(state) {  return state.get('user'); }\r\n\r\n//Селекторы информации о контенте\r\nexport function getContentGame(state) {  return state.get('content').game.main_info; }\r\nexport function getContentGameUserInfo(state) {  return state.get('content').game.user_info; }\r\nexport function getContentMovie(state) { return state.get('content').movie.main_info; }\r\nexport function getContentMovieUserInfo(state) {  return state.get('content').movie.user_info; }\r\nexport function getContentShow(state) { return state.get('content').show.main_info; }\r\nexport function getContentShowUserInfo(state) {  return state.get('content').show.user_info; }\r\n\r\n//Селекторы поисковых результатов\r\nexport function getSearchContentGames(state) { return state.get('searchContent').games;}\r\nexport function getSearchContentMovies(state) { return state.get('searchContent').movies; }\r\nexport function getSearchContentShows(state) { return state.get('searchContent').shows; }\r\nexport function getSearchContentUsers(state) { return state.get('searchContent').users; }\r\n\r\n//Селекторы ошибок\r\nexport function getAuthError(state) { return state.get('errors').auth; }\r\nexport function getRegistrateError(state) { return state.get('errors').registrate; }\r\nexport function getGameRequestError(state) {  return state.get('errors').gameRequest; }\r\nexport function getMovieRequestError(state) { return state.get('errors').movieRequest; }\r\nexport function getShowRequestError(state) { return state.get('errors').showRequest; }\r\nexport function getUserPageError(state) {  return state.get('errors').userPage;}\r\nexport function getResetPasswordError(state) {  return state.get('errors').resetPassword;}\r\nexport function getConfirmPasswordError(state) {  return state.get('errors').confirmPassword;}\r\n\r\n//Селекторы состояния высплывающих окон\r\nexport function getLoginForm(state) { return state.get('openedPages').LoginForm; }\r\nexport function getRegistrateForm (state) { return state.get('openedPages').RegistrateForm; }\r\nexport function getResetPasswordForm (state) { return state.get('openedPages').ResetPasswordForm; }\r\n\r\n//Селекторы состояния загрузки\r\nexport function getIsLoadingContentGame(state) { return state.get('isLoading').contentGame; }\r\nexport function getIsLoadingContentGameUserInfo(state) { return state.get('isLoading').contentGameUserInfo; }\r\nexport function getIsLoadingContentMovie(state) {  return state.get('isLoading').contentMovie; }\r\nexport function getIsLoadingContentMovieUserInfo(state) { return state.get('isLoading').contentMovieUserInfo; }\r\nexport function getIsLoadingContentShow(state) {  return state.get('isLoading').contentShow; }\r\nexport function getIsLoadingContentShowUserInfo(state) { return state.get('isLoading').contentShowUserInfo; }\r\nexport function getIsLoadingSearchGames(state) { return state.get('isLoading').searchGames; }\r\nexport function getIsLoadingSearchMovies(state) { return state.get('isLoading').searchMovies; }\r\nexport function getIsLoadingSearchShows(state) { return state.get('isLoading').searchShows; }\r\nexport function getIsLoadingSearchUsers(state) { return state.get('isLoading').searchUsers;}\r\nexport function getIsLoadingSearchAll(state) { return (state.get('isLoading').searchUsers || state.get('isLoading').searchMovies || state.get('isLoading').searchGames); }\r\nexport function getIsLoadingUserPageContent(state) { return state.get('isLoading').userPageContent; }\r\nexport function getIsLoadingUserPageLogs(state) { return state.get('isLoading').userPageLogs; }\r\nexport function getIsLoadingUserPageFriendsLogs(state) { return state.get('isLoading').userPageFriendsLogs; }\r\n\r\n//Селекторы страницы профиля\r\nexport function getUserPageContent(state){  return state.get('userPageContent').user; }\r\nexport function getUserPageLogs(state){ return state.get('userPageContent').userLogs; }\r\nexport function getUserPageFriendsLogs(state){  return state.get('userPageContent').userFriendsLogs; }","import React from \"react\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\n//import * as actions from '../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction HomePage ({user}) \r\n{\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n\t\t\t\t<h2 style={{marginTop: '70px', marginLeft: '30px'}}>Добро пожаловать на Interests!</h2>\r\n\t\t\t\t<h4 style={{marginLeft: '30px'}}>\r\n\t\t\t\t\tГлавная страница ещё не готова, однако можно воспользоваться <a href='/search/example' style={{fontWeight: '600'}}>поиском</a> или проверить свой <a href={\"/user/\"+user.id} style={{fontWeight: '600'}}>профиль</a>, если вы уже зарегистрированы\r\n\t\t\t\t</h4>\r\n\t\t\t\t<img src=\"images/cool.jpg\" style={{marginLeft: '20px'}} alt=\"Картинка\"/>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: selectors.getUser(state)\r\n});\r\n\r\n  const mapDispatchToProps = () => {\r\n\treturn {\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","/** Время жизни токена в миллисекундах, после истечения которого будет запрошен новый токен*/\r\nexport const TOKEN_LIFETIME = 86000000; \r\n/**Адрес сервера*/\r\nexport const BACKEND_URL = \"http://35.193.124.214:8001/\";\r\n/**Адрес получения токена */\r\nexport const GET_TOKEN_URL = BACKEND_URL + \"users/auth/login/\"; \r\n/**Адрес обновления токена */\r\nexport const REFRESH_TOKEN_URL = BACKEND_URL + \"users/auth/refresh-token/\";\r\n/**Адрес регистрации */\r\nexport const REGISTRATE_URL = BACKEND_URL + \"users/auth/signup/\";\r\n/**Адрес подтверждения почты */\r\nexport const CONFIRM_URL = BACKEND_URL + \"users/auth/confirm_email/\";\r\n/**Адрес сброса пароля */\r\nexport const RESET_PASSWORD_URL = BACKEND_URL + \"users/user/password_reset/\"; \r\n/**Адрес подтверждения сброса пароля */\r\nexport const CONFIRM_PASSWORD_URL = BACKEND_URL + \"users/user/confirm_password_reset/\";\r\n/**Адрес запроса игры */\r\nexport const GET_GAME_URL = BACKEND_URL + \"games/game/\";\r\n/**Адрес поиска игр */\r\nexport const SEARCH_GAMES_URL = BACKEND_URL + \"games/search/\";\r\n/**Адрес запроса фильма */\r\nexport const GET_MOVIE_URL = BACKEND_URL + \"movies/movie/\";\r\n/**Адрес поиска фильмов */\r\nexport const SEARCH_MOVIES_URL = BACKEND_URL + \"movies/search/\";\r\n/**Адрес запроса сериала */\r\nexport const GET_SHOW_URL = BACKEND_URL + \"shows/show/\";\r\n/**Адрес поиска сериалов */\r\nexport const SEARCH_SHOWS_URL = BACKEND_URL + \"shows/search/\";\r\n/**Адрес получения информации о пользователе */\r\nexport const USER_INFO_URL = BACKEND_URL + \"users/user/\";\r\n/**Адрес поиска пользователей */\r\nexport const SEARCH_USERS_URL = BACKEND_URL + \"users/search/\"; \r\n","import axios from \"axios\";\r\nimport jwt_decode from 'jwt-decode';\r\nimport * as urls from '../settings';\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\n/**\r\n * ПОлучение токена авторизации. Токен сохраняется в localStorage\r\n * @param {string} username Имя пользователя\r\n * @param {string} password Пароль \r\n */\r\nexport async function getToken(username, password){\r\n    try{\r\n        const res = await axios.post(urls.GET_TOKEN_URL, {\r\n                    username: username,\r\n                    password: password \r\n                }, axiosConfig);\r\n\r\n        let userData = jwt_decode(res.data.access);\r\n        let user = {username: userData.username, id: userData.user_id, email: userData.email}\r\n\r\n        return {token: res.data.access, refreshToken: res.data.refresh, user: user};\r\n    }catch(e){\r\n        console.log(\"axios error: \" + e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Функция обновления токена\r\n */\r\nexport async function updateToken(refreshToken){\r\n    if (typeof refreshToken !== 'undefined' & refreshToken != null)\r\n        try{\r\n            const res = await axios.post(urls.REFRESH_TOKEN_URL, {\r\n                        refresh: refreshToken\r\n                    }, axiosConfig);\r\n                    \r\n            let userData = jwt_decode(res.data.access);\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n\r\n            return {token: res.data.access, user: user};\r\n        }catch(e){\r\n            console.log(\"exios error: \" + e);\r\n            return null;\r\n        }\r\n    return null;\r\n}\r\n\r\nexport async function registration(username, email, password) {\r\n   try{\r\n        const res = await axios.post(urls.REGISTRATE_URL, \r\n            {  \r\n                username: username,\r\n                email: email, \r\n                password: password, \r\n            }, axiosConfig);\r\n        let data = res.data;\r\n        data.status = res.status;\t\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e.response);\r\n        return e.response;\r\n    }\r\n}\r\n\r\nexport async function confirmation(uid64, token) {\r\n    try{\r\n        const res = await axios.patch(urls.CONFIRM_URL + '?uid64=' + uid64 + '&token=' + token);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }\r\n\r\n export async function resetPassword(email) {\r\n    try{\r\n        const res = await axios.put(urls.RESET_PASSWORD_URL,  {  email: email }, axiosConfig);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }\r\n\r\n export async function confirmPassword(token, password) {\r\n    try{\r\n        const res = await axios.patch(urls.CONFIRM_PASSWORD_URL + '?reset_token=' + token,  { password: password }, axiosConfig);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }","import axios from \"axios\";\r\nimport {GET_GAME_URL, SEARCH_GAMES_URL, USER_INFO_URL, SEARCH_MOVIES_URL, GET_MOVIE_URL, SEARCH_USERS_URL, SEARCH_SHOWS_URL, GET_SHOW_URL} from \"../settings\";\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\naxios.defaults.headers.common = {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getGame(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о фильме\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID фильма  \r\n * @returns {object} Информация о фильме\r\n */\r\nexport async function getMovie(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о сериале\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID сериала  \r\n * @returns {object} Информация о сериале\r\n */\r\nexport async function getShow(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_SHOW_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_SHOW_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о сезоне сериала\r\n * @param {string} token Токен доступа\r\n * @param {string} showID ID сериала \r\n *  * @param {string} seasonNumber номер сезона\r\n * @returns {object} Информация о сериале\r\n */\r\nexport async function getShowSeason(token, showID, seasonNumber) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonNumber, { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonNumber, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о серии сериала\r\n * @param {string} token Токен доступа\r\n * @param {string} showID ID сериала \r\n * @param {string} seasonNumber номер сезона\r\n * @param {string} episodeNumber номер эпизода\r\n * @returns {object} Информация о сериале\r\n */\r\nexport async function getShowEpisode(token, showID, seasonNumber, episodeNumber) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonNumber + \"/episode/\" + episodeNumber, { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonNumber + \"/episode/\" + episodeNumber, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса игры\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус игры\r\n * @param {string} gameSlug Слаг игры\r\n */\r\nexport async function setGameStatus(token, gameSlug, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n\r\n        const res = await axios.put(GET_GAME_URL + gameSlug + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса фильма\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус фильма\r\n * @param {string} movieID ID фильма\r\n */\r\nexport async function setMovieStatus(token, id, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(GET_MOVIE_URL + id + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса сериала\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус сериала\r\n * @param {string} id ID сериала\r\n */\r\nexport async function setShowStatus(token, id, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(GET_SHOW_URL + id + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса сезона сериала\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус сезона сериала\r\n * @param {string} showID ID сериала\r\n *  * @param {string} seasonNumber номер сезона\r\n */\r\nexport async function setShowSeasonStatus(token, showID, seasonNumber, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(GET_SHOW_URL + showID + \"/season/\" + seasonNumber + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса сезона сериала\r\n * @param {string} token Токен доступа\r\n * @param {object} episodesList Список объектов эпизодов\r\n * @param {string} showID ID сериала\r\n */\r\nexport async function setShowEpisodesStatus(token, showID, episodesList){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(GET_SHOW_URL + showID + \"/episodes/\", \r\n            episodesList, { headers: { 'Authorization': AuthStr } });\r\n        return res;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск игр\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchGames(query, page, gamesCount){\r\n    try{\r\n        const res = await axios.get(SEARCH_GAMES_URL, { params : {query: query, page: page, page_size: gamesCount} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск фильмов\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchMovies(query, page){\r\n    try{\r\n        const res = await axios.get(SEARCH_MOVIES_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск сериалов\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchShows(query, page){\r\n    try{\r\n        const res = await axios.get(SEARCH_SHOWS_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск пользователей\r\n * @param {string} query Поисковый запрос\r\n */\r\nexport async function searchUsers(query){\r\n    try{\r\n        const res = await axios.get(SEARCH_USERS_URL, { params : {query: query} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getUserInfo(token, userID) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса пользовтеля (добавить в друзья и тд)\r\n * @param {string} token Токен доступа\r\n * @param {boolean} is_following Статус фильма\r\n * @param {string} userID ID пользовтеля\r\n */\r\nexport async function setUserStatus(token, is_following, userID){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(USER_INFO_URL + userID + \"/follow/\", \r\n            is_following, { headers: { 'Authorization': AuthStr } });\r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий лог пользователя\r\n * @param {string} userID ID пользователя\r\n * @param {string} page страница \r\n * @param {int} resultsOnPage количество результатов на странице \r\n */\r\nexport async function getUserLog(token, userID, page, resultsOnPage) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/log/\", { params : { page: page, page_size: resultsOnPage } }, { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/log/\", { params : { page: page, page_size: resultsOnPage } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий лог друзей пользователя\r\n * @param {string} userID ID пользователя\r\n * @param {int} page страница\r\n * @param {int} resultsOnPage количество результатов на странице \r\n */\r\nexport async function getUserFriendsLog(token, userID, page, resultsOnPage) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(USER_INFO_URL + userID + \"/friends_log/\", { params : { page: page, page_size: resultsOnPage }, 'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для игры\r\n * @param {string} slug slug игры\r\n * @param {int} page страница\r\n */\r\nexport async function getGameUserInfo(token, slug) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_GAME_URL + slug + \"/user_info/\", {'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для фильма\r\n * @param {string} id id фильма\r\n */\r\nexport async function getMovieUserInfo(token, id) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_MOVIE_URL + id + \"/user_info/\", {'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для сериала\r\n * @param {string} showID id сериала\r\n */\r\nexport async function getShowUserInfo(token, showID) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_SHOW_URL + showID + \"/user_info/\", { 'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для сезона сериала\r\n * @param {string} showID id сериала\r\n */\r\nexport async function getShowSeasonUserInfo(token, showID, seasonID) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonID + \"/user_info/\", { 'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для эпизода сериала\r\n * @param {string} showID id сериала\r\n * @param {int} page страница\r\n */\r\nexport async function getShowEpisodeUserInfo(token, showID, seasonID, episodeID) {\r\n    let data;\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.get(GET_SHOW_URL + showID + \"/season/\" + seasonID + \"/episode/\" + episodeID + \"/user_info/\", { 'headers': { 'Authorization': AuthStr } });\r\n        data = res.data;\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}","import * as actionTypes from './actionTypes';\r\nimport * as selectors from './reducers';\r\nimport * as auth from \"../services/jwtAuth\";\r\nimport {TOKEN_LIFETIME} from \"../settings\";\r\nimport * as Requests from \"../services/requests\";\r\nimport { toast } from \"react-toastify\";\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nexport function tryAuth(login, password) {\r\n    return async(dispatch) => {\r\n        \r\n        setError(dispatch, actionTypes.AUTH_ERROR, false);\r\n\r\n      try {\r\n        const res = await auth.getToken(login, password);\r\n        if (res !== null){\r\n            localStorage.setItem('refreshToken', res.refreshToken);\r\n            localStorage.setItem('token', res.token);\r\n            localStorage.setItem('tokenTime', Date.now());\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: res.user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_LOGINFORM,\r\n                isOpen: false \r\n            });\r\n        }else{\r\n            setError(dispatch, actionTypes.AUTH_ERROR, true);\r\n        }\r\n            \r\n      }catch (error) {\r\n        console.error(error);\r\n        setError(dispatch, actionTypes.AUTH_ERROR, true);\r\n      }\r\n    };\r\n}\r\n\r\nexport function checkAuthorization(){\r\n    return async(dispatch) => {\r\n        if (localStorage.getItem('token') === null | Date.now() - localStorage.getItem('tokenTime') > TOKEN_LIFETIME){\r\n            const res = await auth.updateToken(localStorage.getItem(\"refreshToken\"));\r\n            if (res !== null){\r\n                dispatch({\r\n                    type: actionTypes.SET_AUTH,\r\n                    auth: { loggedIn: true }, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: res.user, \r\n                });\r\n                localStorage.setItem('token', res.token);\r\n                localStorage.setItem('tokenTime', Date.now());\r\n                return true;\r\n            }else{\r\n                //toast.warn(\"Произошла ошибка авторизации. Зайдите ещё раз\");\r\n                dispatch(resetAuthorization());\r\n                return false;\r\n            } \r\n        }else{\r\n            let userData = jwt_decode(localStorage.getItem('token'));\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            return true;\r\n        }\r\n            \r\n    }\r\n}\r\n\r\nexport function resetAuthorization(){\r\n    return async(dispatch) => {\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('tokenTime');\r\n        dispatch({\r\n            type: actionTypes.SET_AUTH,\r\n            auth: { loggedIn: false }, \r\n        });\r\n        dispatch({\r\n            type: actionTypes.SET_USER,\r\n            user: { username:\"\", id: null, email:\"\" }, \r\n        });\r\n    }\r\n}\r\n\r\nexport function registrationRequest(username, email, password){\r\n    return async(dispatch) => {\r\n        setError(dispatch, actionTypes.REGISTRATE_ERROR, false);\r\n        auth.registration(username, email, password).then((result) => {\r\n            if (result.status === 201 | result.status === 200){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: { login: result.username, email: result.email }, \r\n                });\r\n            }\r\n            else{\r\n                for (let error in result.data)\r\n                    toast.error(result.data[error][0]);\r\n                \r\n                setError(dispatch, actionTypes.REGISTRATE_ERROR, true);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function confirmEmailRequest(uid64, token){\r\n    return async() => {\r\n        auth.confirmation(uid64, token).then((result) => {\r\n            if (result.status === 200){\r\n                toast.success(\"Почта подтверждена!\");\r\n            }\r\n            else{\r\n                if (result.data)\r\n                    toast.error(result.data.error);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestGame(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME, true);\r\n        setError(dispatch, actionTypes.GAME_REQUEST_ERROR, false);\r\n        Requests.getGame(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME,\r\n                    game: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Игра не найдена!\");\r\n                setError(dispatch, actionTypes.GAME_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME, false);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport function requestGameUserInfo(slug){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME_USER_INFO, true);\r\n        Requests.getGameUserInfo(localStorage.getItem('token'), slug).then((result) => {\r\n            if (result != null){\r\n                let newResult = {...result.user_info, friends_info: result.friends_info};\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME_USER_INFO,\r\n                    user_info: newResult, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME_USER_INFO, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestMovie(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE, true);\r\n        setError(dispatch, actionTypes.MOVIE_REQUEST_ERROR, false);\r\n        Requests.getMovie(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_MOVIE,\r\n                    movie: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Фильм не найден!\");\r\n                setError(dispatch, actionTypes.MOVIE_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestMovieUserInfo(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE_USER_INFO, true);\r\n        Requests.getMovieUserInfo(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                let newResult = {...result.user_info, friends_info: result.friends_info};\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_MOVIE_USER_INFO,\r\n                    user_info: newResult, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE_USER_INFO, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShow(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, true);\r\n        setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, false);\r\n        Requests.getShow(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW,\r\n                    show: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Сериал не найден!\");\r\n                setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowSeason(showID, seasonNumber){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, true);\r\n        setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, false);\r\n        Requests.getShowSeason(localStorage.getItem('token'), showID, seasonNumber).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW,\r\n                    show: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Сериал не найден!\");\r\n                setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowEpisode(showID, seasonNumber, episodeNumber){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, true);\r\n        setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, false);\r\n        Requests.getShowEpisode(localStorage.getItem('token'), showID, seasonNumber, episodeNumber).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW,\r\n                    show: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Серия не найдена!\");\r\n                setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowUserInfo(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_USER_INFO, true);\r\n        Requests.getShowUserInfo(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                let newResult = {...result.user_info, friends_info: result.friends_info};\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW_USER_INFO,\r\n                    user_info: newResult, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_USER_INFO, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowSeasonUserInfo(showID, seasonID){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_USER_INFO, true);\r\n        Requests.getShowSeasonUserInfo(localStorage.getItem('token'), showID, seasonID).then((result) => {\r\n            if (result != null){\r\n                let newResult = {...result.user_info, user_watched_show: result.user_watched_show, episodes: result.episodes_user_info, friends_info: result.friends_info};\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW_USER_INFO,\r\n                    user_info: newResult, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_USER_INFO, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShowEpisodeUserInfo(showID, seasonID, episodeID){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_USER_INFO, true);\r\n        Requests.getShowEpisodeUserInfo(localStorage.getItem('token'), showID, seasonID, episodeID).then((result) => {\r\n            if (result != null){\r\n                let newResult = {...result.user_info, user_watched_show: result.user_watched_show, friends_info: result.friends_info};\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW_USER_INFO,\r\n                    user_info: newResult, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_USER_INFO, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setGameStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setGameStatus(localStorage.getItem('token'), selectors.getContentGame(getState()).rawg.slug, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    /*dispatch({\r\n                        type: actionTypes.SET_CONTENT_GAME_USERINFO,\r\n                        user_info: result\r\n                    });*/\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function requestUserPageContent(username){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT, true);\r\n        setError(dispatch, actionTypes.USER_PAGE_ERROR, false);\r\n        Requests.getUserInfo(localStorage.getItem('token'), username).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_CONTENT,\r\n                    content: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Профиль не найден!\");\r\n                setError(dispatch, actionTypes.USER_PAGE_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestUserPageLogs(userID, page, resultsOnPage){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_LOGS, true);\r\n        Requests.getUserLog(localStorage.getItem('token'), userID, page, resultsOnPage).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_LOGs,\r\n                    logs: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n                \r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_LOGS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestUserPageFriendsLogs(userID, page, resultsOnPage){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS, true);\r\n        Requests.getUserFriendsLog(localStorage.getItem('token'), userID, page, resultsOnPage).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_FRIENDS_LOGS,\r\n                    logs: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchGames(query, page, gamesCount){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_GAMES, true);\r\n        Requests.searchGames(query, page, gamesCount).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_GAMES,\r\n                    games: result, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_GAMES, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchMovies(query, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_MOVIES, true);\r\n        Requests.searchMovies(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска фильмов\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_MOVIES,\r\n                    movies: result.results, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_MOVIES, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchShows(query, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_SHOWS, true);\r\n        Requests.searchShows(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска сериалов\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_SHOWS,\r\n                    shows: result.results, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_SHOWS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setMovieStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setMovieStatus(localStorage.getItem('token'), selectors.getContentMovie(getState()).tmdb.id, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    /*dispatch({\r\n                        type: actionTypes.SET_CONTENT_MOVIE_USERINFO,\r\n                        user_info: result\r\n                    });*/\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function setShowStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setShowStatus(localStorage.getItem('token'), selectors.getContentShow(getState()).tmdb.id, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    /*dispatch({\r\n                        type: actionTypes.SET_CONTENT_SHOW_USERINFO,\r\n                        user_info: result\r\n                    });*/\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function setShowSeasonStatus(user_info, showID, seasonNumber){\r\n    return async(dispatch) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setShowSeasonStatus(localStorage.getItem('token'), showID, seasonNumber, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    /*dispatch({\r\n                        type: actionTypes.SET_CONTENT_SHOW_USERINFO,\r\n                        user_info: result\r\n                    });*/\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function setShowEpisodesStatus(episodesList, showID){\r\n    return async(dispatch) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setShowEpisodesStatus(localStorage.getItem('token'), showID, episodesList).then((result) => {\r\n                if (result.status !== 204 & result.status !== 200 & result.status !== 201){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function searchUsers(query){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_USERS, true);\r\n        Requests.searchUsers(query).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_USERS,\r\n                    users: result, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_USERS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setUserStatus(is_following, userID){\r\n    return async(dispatch) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setUserStatus(localStorage.getItem('token'), is_following, userID).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_USER_PAGE_FOLLOWING,\r\n                        is_following: result.is_following\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function resetPassword(email){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.RESET_PASSWORD_ERROR,\r\n            error: false\r\n        });\r\n        auth.resetPassword(email).then((result) => {\r\n            if (result.status !== 200){\r\n                dispatch({\r\n                    type: actionTypes.RESET_PASSWORD_ERROR,\r\n                    error: result.data.error\r\n                });\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.RESET_PASSWORD_ERROR,\r\n                    error: 'ok'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function confirmPassword(token, password){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n            error: false\r\n        });\r\n        auth.confirmPassword(token, password).then((result) => {\r\n            if (result.status !== 200){\r\n                dispatch({\r\n                    type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n                    error: result.data.error?result.data.error:'Неизвестная ошибка'\r\n                });\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n                    error: 'ok'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function setUser(user) {\r\n    return({ type: actionTypes.SET_USER, user: user });\r\n}\r\n\r\nexport function openLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: false  });\r\n}\r\n\r\nexport function openRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: false  });\r\n}\r\n\r\nexport function openResetPasswordForm() {\r\n    return({ type: actionTypes.SET_RESET_PASSWORD_FORM, isOpen: true  });\r\n}\r\n\r\nexport function closeResetPasswordForm() {\r\n    return({ type: actionTypes.SET_RESET_PASSWORD_FORM, isOpen: false  });\r\n}\r\n\r\nfunction setLoading(dispatch, type, isLoading){\r\n    dispatch({\r\n        type: type,\r\n        isLoading: isLoading\r\n    });\r\n}\r\n\r\nfunction setError(dispatch, type, isError){\r\n    dispatch({\r\n        type: type,\r\n        error: isError\r\n    });\r\n}","import React from \"react\";\r\nimport './style.css';\r\n\r\nfunction StatusButtonGroup( {statuses, activeColor, onChangeStatus, userStatus} ) {\r\n\r\n    return(\r\n        <div>\r\n            {statuses.map((status) => <button className={'contentStatuses'} \r\n                                            key={status}\r\n                                            style={{backgroundColor: (userStatus === status?activeColor:'#000000')}}\r\n                                            onClick={()=>{  onChangeStatus(status); }}>\r\n                                            {status}\r\n                                        </button>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default StatusButtonGroup;\r\n","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction FriendsActivityRow ( {info} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n        <div className=\"fActivityBlock\">\r\n            <h5 className='fActivityUser'>\r\n                <a href={window.location.origin + '/user/' + info.user.id} \r\n                        onClick={(e) => { history.push('/user/' + info.user.id); e.preventDefault();}}\r\n                    >\r\n                    {info.user.username}\r\n                </a>\r\n            </h5>\r\n            <div className='fActivityInfo'>\r\n                <Rating stop={10}\r\n                                    emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\"/>}\r\n                                    fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" title={n}/>)}\r\n                                    initialRating={info.score}\r\n                                    className=\"fActivityInfoText\"\r\n                                    readonly={true}\r\n                        />\r\n                <p className=\"fActivityInfoText\">Статус: {info.status} </p>\r\n                <p className=\"fActivityInfoText\" hidden={!(info.spent_time)}>Время проходения: {info.spent_time} {intToHours(info.spent_time)}</p>\r\n                <p className=\"fActivityInfoText\" hidden={info.review===\"\"}>Отзыв: {info.review}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction intToHours(number){\r\n    if (11 <= number && number <= 14)\r\n        return 'часов'\r\n    else if (number % 10 === 1)\r\n        return 'час'\r\n    else if (2 <= number % 10 && number % 10 <= 4)\r\n        return 'часа'\r\n    else\r\n        return 'часов'\r\n}\r\n\r\nexport default FriendsActivityRow;","import React from \"react\";\r\nimport FriendsActivityRow from './FriendsActivityRow';\r\n\r\nfunction FriendsActivity ( {info} ) {\r\n    \r\n    return(\r\n        <div className=\"friendsBlock\">\r\n            { (typeof info !== 'undefined')?info?.map((friendInfo) => <FriendsActivityRow info={friendInfo} key={friendInfo.user.id}/>):'' }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FriendsActivity;","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport './style.css';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction GamePage ( {requestGame, openLoginForm, setGameStatus, requestGameUserInfo,\r\n        loggedIn, game, gameIsLoading,  gameUserInfo, gameUserInfoIsLoading\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [spentTime, setSpentTime] = useState(0);\r\n    const [userStatus, setUserStatus] = useState('Не играл');\r\n    const [userRate, setUserRate] = useState(0);\r\n    const [developers, setDevelopers] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [hltbInfo, setHtlbInfo] = useState({gameplay_main_extra: -1, gameplay_main: -1, gameplay_comletionist: -1});\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            setReview('');\r\n            setSpentTime(0);\r\n            setUserStatus('Не играл');\r\n            setUserRate(0);\r\n            requestGame(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestGame]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestGameUserInfo(id);\r\n            else{\r\n                setReview('');\r\n                setSpentTime('0');\r\n                setUserStatus('Не играл');\r\n                setUserRate(0);\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, loggedIn]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            if (game.rawg.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < game.rawg.genres.length; i++){\r\n                    newGenres += game.rawg.genres[i].name;\r\n                    if (i !== game.rawg.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                 setGenres(newGenres);   \r\n            }\r\n\r\n            if (game.rawg.metacritic){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{game.rawg.metacritic}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">Metascore</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (game.hltb){\r\n                setHtlbInfo(game.hltb);\r\n            }else if (game.rawg.playtime){\r\n                setHtlbInfo({gameplay_main_extra: game.rawg.playtime, gameplay_main: -1, gameplay_completionist: -1});\r\n            }\r\n\r\n            if (game.rawg.developers){\r\n                let newDevelopers = \"\"\r\n                for (let i = 0; i < game.rawg.developers.length; i++){\r\n                    newDevelopers += game.rawg.developers[i].name;\r\n                    if (i !== game.rawg.developers.length - 1)\r\n                    newDevelopers += \", \";\r\n                }\r\n                setDevelopers(newDevelopers);   \r\n            }\r\n\r\n            if (game.rawg.released){\r\n                let mas = game.rawg.released.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }\r\n\r\n            document.title = game.rawg.name;\r\n\t\t},\r\n\t\t[game]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (gameUserInfo?.status){\r\n                setReview(gameUserInfo.review);\r\n                setSpentTime(gameUserInfo.spent_time);\r\n                setUserStatus(gameUserInfo.status);\r\n                setUserRate(gameUserInfo.score);\r\n            }else{\r\n                setReview('');\r\n                setSpentTime(0);\r\n                setUserStatus('Не играл');\r\n                setUserRate(0);\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[gameUserInfo]\r\n    );\r\n    \r\n    function setClear(){\r\n        setGenres(\"\");\r\n        setMetascoreBlock(\"\");\r\n        setHtlbInfo({gameplay_main_extra: -1, gameplay_main: -1, gameplay_completionist: -1});\r\n        setDevelopers(\"\");\r\n        setDate(\"\");\r\n    }\r\n\r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${game.rawg.background_image_additional?game.rawg.background_image_additional:game.rawg.background_image})`}}/>\r\n                <LoadingOverlay\r\n                    active={gameIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"gameContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"gameContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\" className=\"posterBlock\">\r\n                                        <img src={game.rawg.background_image} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{game.rawg.name}</h1>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p>Разработчики: {developers}</p>\r\n                                            <p>Дата релиза: {date}</p>\r\n                                            <p>Жанр: {genres}</p>\r\n                                            <p style={{display: \"inline\"}} >Время прохождения: </p>\r\n                                            <div hidden={hltbInfo.gameplay_main < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"light-green-text\" title={\"Главный сюжет\"}/><span className=\"hs\"/>{hltbInfo.gameplay_main} {hltbInfo.gameplay_main_unit}<span className=\"hs\"/>\r\n                                            </div> <p style={{display: \"inline\"}} > </p>\r\n                                            <div hidden={hltbInfo.gameplay_main_extra < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"yellow-text\" title={\"Главный сюжет + побочные задания\"}/><span className=\"hs\"/>{hltbInfo.gameplay_main_extra} {hltbInfo.gameplay_main_extra_unit}<span className=\"hs\"/> \r\n                                            </div> <p style={{display: \"inline\"}} > </p>\r\n                                            <div hidden={hltbInfo.gameplay_completionist < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"red-text\" title={\"Полное прохождение\"}/><span className=\"hs\"/>{hltbInfo.gameplay_completionist} {hltbInfo.gameplay_completionist_unit}\r\n                                            </div>\r\n                                        </div>\r\n                                        <LoadingOverlay active={gameUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                            <Rating stop={10}\r\n                                                emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                                fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                                initialRating={userRate}\r\n                                                readonly={!loggedIn | userStatus==='Не играл'}\r\n                                                onChange={(score) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setUserRate(score);\r\n                                                        setGameStatus({score: score});\r\n                                                    }}\r\n                                                }\r\n                                                style={{marginBottom: \"10px\"}}\r\n                                            /> <br/>\r\n                                            <StatusButtonGroup\r\n                                                statuses={['Не играл', 'Буду играть', 'Играю', 'Дропнул', 'Прошел']}\r\n                                                activeColor='#4527a0' \r\n                                                userStatus={userStatus}\r\n                                                onChangeStatus={(status) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setUserStatus(status);\r\n                                                        setGameStatus( { status: status } ); \r\n                                                        if (status === 'Не играл'){\r\n                                                            setReview('');\r\n                                                            setUserRate(0);\r\n                                                       }\r\n                                                    }\r\n                                                }}\r\n                                                />\r\n                                        </LoadingOverlay>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"gameContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: game.rawg.description}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"20px\"}} hidden={!loggedIn}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        <LoadingOverlay active={gameUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                            <MDBInput \r\n                                                type=\"textarea\" \r\n                                                id=\"reviewInput\"\r\n                                                label=\"Ваш отзыв\" \r\n                                                value={review}\r\n                                                onChange={(event) =>setReview(event.target.value)}\r\n                                                outline\r\n                                            />\r\n                                            <MDBInput\r\n                                                type=\"number\"\r\n                                                id=\"spentTimeInput\"\r\n                                                label=\"Время прохождения (часы)\" \r\n                                                value={spentTime}\r\n                                                onChange={(event) =>setSpentTime(event.target.value)}\r\n                                            />\r\n                                            <button \r\n                                                className={'savePreviewButton'} \r\n                                                disabled={!loggedIn | userStatus==='Не играл'}\r\n                                                onClick={() => {\r\n                                                        if (!loggedIn){\r\n                                                            openLoginForm();\r\n                                                        }else{\r\n                                                            setGameStatus({   review: document.getElementById('reviewInput').value, spent_time: document.getElementById('spentTimeInput').value });\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                >\r\n                                                Сохранить\r\n                                            </button>\r\n                                        </LoadingOverlay>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBContainer>\r\n                            <div className=\"gameFriendsBlock\" hidden={!loggedIn | gameUserInfo?.friends_info?.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={gameUserInfo?.friends_info}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getGameRequestError(state),\r\n    game: selectors.getContentGame(state),\r\n    gameIsLoading: selectors.getIsLoadingContentGame(state),\r\n    gameUserInfo: selectors.getContentGameUserInfo(state),\r\n    gameUserInfoIsLoading: selectors.getIsLoadingContentGameUserInfo(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestGame: (id) => {\r\n            dispatch(actions.requestGame(id));\r\n        },\r\n        requestGameUserInfo: (slug) => {\r\n            dispatch(actions.requestGameUserInfo(slug));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        setGameStatus: (status) => {\r\n            dispatch(actions.setGameStatus(status));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction MoviePage ( {\r\n        requestMovie, movie, movieIsLoading, setMovieStatus,\r\n        requestMovieUserInfo, movieUserInfo, movieUserInfoIsLoading,\r\n        loggedIn, openLoginForm, \r\n    } ) {\r\n    let { id } = useParams();\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [companies, setCompanies] = useState(\"\");\r\n    const [cast, setCast] = useState(\"\");\r\n    const [director, setDirector] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [userStatus, setUserStatus] = useState('Не смотрел');\r\n    const [userRate, setUserRate] = useState(0);\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            setReview('');\r\n            setUserStatus('Не смотрел');\r\n            setUserRate(0);\r\n            requestMovie(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestMovie]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestMovieUserInfo(id);\r\n            else{\r\n                setReview('');\r\n                setUserRate(0);\r\n                setUserStatus('Не смотрел');\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn, id]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            if (movie.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{movie.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (movie.tmdb.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < movie.tmdb.genres.length; i++){\r\n                    newGenres += movie.tmdb.genres[i].name;\r\n                    if (i !== movie.tmdb.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                setGenres(newGenres);   \r\n            }\r\n\r\n            if (movie.tmdb.production_companies){\r\n                let newCompanies = \"\"\r\n                for (let i = 0; i < movie.tmdb.production_companies.length; i++){\r\n                    newCompanies += movie.tmdb.production_companies[i].name;\r\n                    if (i !== movie.tmdb.production_companies.length - 1)\r\n                        newCompanies += \", \";\r\n                }\r\n                setCompanies(newCompanies);   \r\n            }\r\n\r\n            if (movie.tmdb.cast){\r\n                let newCast = \"\";\r\n                let length = movie.tmdb.cast.length>5?5:movie.tmdb.cast.length;\r\n                for (let i = 0; i < length; i++){\r\n                    newCast += movie.tmdb.cast[i].name;\r\n                    if (i !== length - 1)\r\n                        newCast += \", \";\r\n                }\r\n                setCast(newCast);   \r\n            }\r\n\r\n            if (movie.tmdb.crew){\r\n                let newDirector = \"\"\r\n                for (let i = 0; i < movie.tmdb.crew.length; i++){\r\n                    if (movie.tmdb.crew[i].job === \"Director\"){\r\n                        newDirector = movie.tmdb.crew[i].name;\r\n                        break;\r\n                    }\r\n                }\r\n                setDirector(newDirector);   \r\n            }\r\n\r\n            document.title = movie.tmdb.title;\r\n\t\t},\r\n\t\t[movie]\r\n    );\r\n    \r\n    useEffect(\r\n\t\t() => {\r\n            if (movieUserInfo?.status){\r\n                setReview(movieUserInfo.review);\r\n                setUserStatus(movieUserInfo.status);\r\n                setUserRate(movieUserInfo.score);\r\n            }else{\r\n                setReview('');\r\n                setUserRate(0);\r\n                setUserStatus('Не смотрел');\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[movieUserInfo]\r\n    );\r\n    \r\n    function setClear(){\r\n        setDirector('');\r\n        setCast('');\r\n        setCompanies('');\r\n        setGenres('');\r\n        setMetascoreBlock('');\r\n    }\r\n\r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + movie.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={movieIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"movieContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"movieContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"4\" className=\"posterBlock\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"7\">\r\n                                        <h1>{movie.tmdb.title}</h1>\r\n                                        <h5 style={{marginBottom: \"10px\", marginTop: \"-10px\"}}>{movie.tmdb.original_title}</h5>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p>Дата релиза: {movie.tmdb.release_date}</p>\r\n                                            <p>Продолжительность (мин): {movie.tmdb.runtime}</p>\r\n                                            <p>Жанр: {genres}</p>\r\n                                            <p>Компания: {companies}</p>\r\n                                            <p>Слоган: {movie.tmdb.tagline}</p>\r\n                                            <p>В ролях: {cast}</p>\r\n                                            <p>Режиссер: {director}</p>\r\n                                        </div>\r\n                                        <LoadingOverlay active={movieUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                            <Rating stop={10}\r\n                                                emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                                fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                                initialRating={userRate}\r\n                                                readonly={!loggedIn | userStatus==='Не смотрел'}\r\n                                                onChange={(score) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setUserRate(score);\r\n                                                        setMovieStatus({score: score });\r\n                                                    }}\r\n                                                }\r\n                                            /> <br/>\r\n                                            <StatusButtonGroup\r\n                                                statuses={['Не смотрел', 'Буду смотреть', 'Дропнул', 'Посмотрел']}\r\n                                                activeColor='#4527a0' \r\n                                                userStatus={userStatus}\r\n                                                onChangeStatus={(status) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setUserStatus(status);\r\n                                                    setMovieStatus({ status: status }); \r\n                                                    if (status === 'Не смотрел'){\r\n                                                            setReview('');\r\n                                                            setUserRate(0);\r\n                                                    }\r\n                                                    }\r\n                                                }}/>\r\n                                        </LoadingOverlay>\r\n                                        \r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"movieContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: movie.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"10px\"}} hidden={!loggedIn}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        <LoadingOverlay active={movieUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                            <MDBInput \r\n                                                type=\"textarea\" \r\n                                                id=\"reviewInput\"\r\n                                                label=\"Ваш отзыв\" \r\n                                                value={review}\r\n                                                onChange={(event) =>setReview(event.target.value)}\r\n                                                outline\r\n                                            />\r\n                                            <button \r\n                                                className={'savePreviewButton'} \r\n                                                disabled={!loggedIn | userStatus==='Не смотрел'}\r\n                                                onClick={() => {\r\n                                                        if (!loggedIn){\r\n                                                            openLoginForm();\r\n                                                        }else{\r\n                                                            setMovieStatus({   review: document.getElementById('reviewInput').value });\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                >\r\n                                                Сохранить\r\n                                            </button>\r\n                                        </LoadingOverlay>\r\n                                    </MDBCol>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={!loggedIn | movieUserInfo?.friends_info?.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={movieUserInfo?.friends_info}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getMovieRequestError(state),\r\n    movie: selectors.getContentMovie(state),\r\n    movieIsLoading: selectors.getIsLoadingContentMovie(state),\r\n    movieUserInfo: selectors.getContentMovieUserInfo(state),\r\n    movieUserInfoIsLoading: selectors.getIsLoadingContentMovieUserInfo(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestMovie: (id) => {\r\n            dispatch(actions.requestMovie(id));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        setMovieStatus: (status) => {\r\n            dispatch(actions.setMovieStatus(status));\r\n        },\r\n        requestMovieUserInfo: (id) => {\r\n            dispatch(actions.requestMovieUserInfo(id));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviePage);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport './style.css';\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction EpisodeRow ( {episode, season, showID, userInfo, setShowEpisodeUserStatus, loggedIn, onCheckBox, checked} ) {\r\n    let history = useHistory();\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    useEffect(() =>{\r\n        console.log(userInfo)\r\n    },\r\n    [userInfo]\r\n);\r\n    useEffect(() =>{\r\n            if (typeof checked !== 'undefined')\r\n                setIsChecked(checked);\r\n            else\r\n                setIsChecked(false);\r\n        },\r\n        [checked]\r\n    );\r\n\r\n    return(\r\n        <div className=\"episodeRow\">\r\n            <input type=\"checkbox\" checked={isChecked} onChange={(res) => {onCheckBox(res.target.checked)}} hidden={!loggedIn}></input>&nbsp;\r\n            <a className=\"episodeRowName episodeLink\" \r\n                href={window.location.origin + '/show/' + showID + '/season/' + season + '/episode/'+ episode} \r\n                onClick={(e) => { history.push('/show/' + showID + '/season/' + season + '/episode/'+ episode); e.preventDefault();}}\r\n                >\r\n                Серия {episode}\r\n            </a>\r\n            <Rating start={-1} stop={10}\r\n                emptySymbol={[<MDBIcon icon=\"eye-slash\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon far icon=\"star\" size=\"1x\" />))}\r\n                fullSymbol={[<MDBIcon icon=\"eye\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\"title={n}/>))}\r\n                readonly={!loggedIn}\r\n                initialRating={userInfo?userInfo.score:-1}\r\n                onChange={(score) => {\r\n                        setShowEpisodeUserStatus({episodes: [ {\r\n                                season_number: season,\r\n                                episode_number: episode,\r\n                                score: score\r\n                            }]},\r\n                            showID);\r\n                    }\r\n                }\r\n            />  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EpisodeRow;","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport './style.css';\r\nimport { Map } from 'immutable';\r\nimport EpisodeRow from './EpisodeRow';\r\n\r\nfunction SeasonsBlock ( {seasons, showID, setShowEpisodeUserStatus, loggedIn} ) {\r\n    let history = useHistory();\r\n\r\n    const [hereSeasons, setHereSeasons] = useState([]);\r\n    const [isChecked, setIsChecked] = useState(Map({}));\r\n    const [isCheckedAll, setIsCheckedAll] = useState(false);\r\n    const [checkboxes, setCheckboxes] = useState(Map({}));\r\n    const [needHeader, setNeedHeader] = useState(false);\r\n    \r\n\r\n    useEffect(() =>{\r\n        setHereSeasons([]);\r\n        if (seasons){\r\n            let newSeasons = [];\r\n            let newCheckBoxes = {};\r\n            let newIsChecked = {};\r\n            for (let season in seasons){\r\n                newCheckBoxes[seasons[season].season_number] = {};\r\n                newIsChecked[seasons[season].season_number] = false;\r\n                if (seasons[season].name !== 'Спецматериалы'){\r\n                    let newSeason = seasons[season];\r\n                    newSeason.episodes = [];\r\n                    for (let i = 1; i <= seasons[season].episode_count; i++){\r\n                        newSeason.episodes.push(i);\r\n                        newCheckBoxes[seasons[season].season_number][i] = {}\r\n                        newCheckBoxes[seasons[season].season_number][i].checked = seasons[season].episodes_user_info.find(info => info.episode_number === i)?\r\n                            seasons[season].episodes_user_info.find(info => info.episode_number === i).score>-1:false;\r\n                    }\r\n                        \r\n                    newSeasons.push(newSeason);\r\n                }\r\n            }\r\n            setCheckboxes(Map(newCheckBoxes) );\r\n            setHereSeasons(newSeasons);\r\n            setIsChecked(Map(newIsChecked));\r\n        }\r\n            \r\n    },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [seasons]\r\n    );\r\n\r\n    function changeEpisode(newValue, season, episode){\r\n        let newCheckboxes = checkboxes.setIn([season.toString(), episode, 'checked'], newValue);\r\n        setCheckboxes(newCheckboxes);\r\n        setNeedHeader(true);\r\n    }\r\n\r\n    function changeSeasonEpisodes(toWatched, season){\r\n        let current = checkboxes.get(season.toString());\r\n        for (let episode in current)\r\n            current[episode].checked = toWatched;\r\n        let newCheckboxes = checkboxes.set(season.toString(), current);\r\n        setCheckboxes(newCheckboxes);\r\n        setNeedHeader(true);\r\n    }\r\n\r\n    function changeShowEpisodes(toWatched){ \r\n        let current = checkboxes.toJS();\r\n        for (let season in current){\r\n            for (let episode in current[season])\r\n                current[season][episode].checked = toWatched;\r\n        }   \r\n        setCheckboxes(Map(current));\r\n        setNeedHeader(true);\r\n    }\r\n\r\n    function getSeasonByNumber(number){\r\n        for (let season in seasons)\r\n            if (seasons[season].season_number === number)\r\n                return seasons[season];\r\n    }\r\n\r\n    function updateEpisodes(){\r\n        let current = checkboxes.toJS();\r\n        let changes = [];\r\n        for (let season in current){\r\n            for (let episode in current[season.toString()]){\r\n                console.log(getSeasonByNumber(1));\r\n                if (current[season][episode].checked !== (getSeasonByNumber(parseInt(season)).episodes_user_info.find(info => info.episode_number === parseInt(episode))?.score > -1))\r\n                    changes.push({\r\n                        season_number: season,\r\n                        episode_number: episode,\r\n                        score: current[season][episode].checked?0:-1\r\n                    });\r\n            }\r\n        }\r\n        console.log(changes);\r\n        setShowEpisodeUserStatus({episodes: changes}, showID);\r\n        setNeedHeader(false);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div style={{marginLeft: '5px'}} hidden={!loggedIn}>\r\n                Выбрать все&nbsp;\r\n                <input type=\"checkbox\" checked={isCheckedAll} onChange={(res) => {setIsCheckedAll(!isCheckedAll); changeShowEpisodes(res.target.checked)}}></input>\r\n            </div>\r\n            { \r\n                hereSeasons.map((season) => \r\n                    <div key={season.id} className=\"seasonBlock\">\r\n                        <div className='seasonName'>\r\n                            <a \r\n                                href={window.location.origin + '/show/' + showID + '/season/' + season.season_number} \r\n                                onClick={(e) => { history.push('/show/' + showID + '/season/' + season.season_number); e.preventDefault();}}\r\n                                >\r\n                                <h5 > {season.name} </h5>\r\n                            </a>\r\n                        </div>\r\n                        <details open={false} className='episodeRows'>\r\n                            <summary>Развернуть</summary>\r\n                                <div style={{marginLeft: '5px'}} hidden={!loggedIn}>\r\n                                    Выбрать все&nbsp;\r\n                                    <input type=\"checkbox\" checked={isChecked.get(season.season_number)} onChange={\r\n                                            (res) => {\r\n                                                let newIsChecked = isChecked.toJS();\r\n                                                newIsChecked[season.season_number] = res.target.checked;\r\n                                                setIsChecked(Map(newIsChecked)); \r\n                                                changeSeasonEpisodes(res.target.checked, season.season_number)\r\n                                        }}/>\r\n                                </div>\r\n                                <ul>\r\n                                {  season.episodes.map((episode, counter) => <li className=\"episode\" key={counter}>\r\n                                            <EpisodeRow loggedIn={loggedIn} episode={episode} season={season.season_number} showID={showID} \r\n                                                userInfo={season.episodes_user_info[episode]} \r\n                                                setShowEpisodeUserStatus={setShowEpisodeUserStatus}\r\n                                                checked={checkboxes.get(season.season_number.toString())?.[episode]?.checked}\r\n                                                onCheckBox={(value) => { changeEpisode(value, season.season_number, episode) } \r\n                                                }\r\n                                                />\r\n                                        </li>) }\r\n                                </ul>\r\n                        </details>\r\n                        \r\n                    </div>\r\n                )  \r\n            } \r\n            <div className=\"saveEpisodesHeader\" hidden={!needHeader}>\r\n                <button className=\"saveEpisodesButton\"\r\n                    onClick={() => updateEpisodes()}>\r\n                    Сохранить\r\n                </button>\r\n            </div>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default SeasonsBlock;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\nimport SeasonsBlock from \"./SeasonsBlock\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ShowPage ( {requestShow, show, showIsLoading, setShowUserStatus, setShowEpisodeUserStatus,\r\n                    requestShowUserInfo, showUserInfo, showUserInfoIsLoading,\r\n                    loggedIn, openLoginForm\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [companies, setCompanies] = useState(\"\");\r\n    const [showStatus, setShowStatus] = useState(\"\");\r\n    const [firstDate, setFirstDate] = useState(\"\");\r\n    const [lastDate, setLastDate] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [userStatus, setUserStatus] = useState('Не смотрел');\r\n    const [userRate, setUserRate] = useState(0);\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            setReview('');\r\n            setUserStatus('Не смотрел');\r\n            setUserRate(0);\r\n            requestShow(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestShow]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestShowUserInfo(id);\r\n            else{\r\n                setReview('');\r\n                setUserRate(0);\r\n                setUserStatus('Не смотрел');\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn, id]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            if (show.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{show.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            if (show.tmdb.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < show.tmdb.genres.length; i++){\r\n                    newGenres += show.tmdb.genres[i].name;\r\n                    if (i !== show.tmdb.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                setGenres(newGenres);   \r\n            }\r\n\r\n            if (show.tmdb.production_companies){\r\n                let newCompanies = \"\"\r\n                for (let i = 0; i < show.tmdb.production_companies.length; i++){\r\n                    newCompanies += show.tmdb.production_companies[i].name;\r\n                    if (i !== show.tmdb.production_companies.length - 1)\r\n                        newCompanies += \", \";\r\n                }\r\n                setCompanies(newCompanies);   \r\n            }\r\n\r\n            switch (show.tmdb.status){\r\n                case 'Ended':\r\n                    setShowStatus('Окончен');break;\r\n                case 'Returning Series':\r\n                    setShowStatus('Продолжается');break;\r\n                case 'Pilot':\r\n                    setShowStatus('Пилот');break;\r\n                case 'Canceled':\r\n                    setShowStatus('Отменен');break;\r\n                case 'In Production':\r\n                    setShowStatus('В производстве');break;\r\n                case 'Planned':\r\n                    setShowStatus('Запланирован');break;\r\n                default:\r\n                    setShowStatus(show.tmdb.status);\r\n            } \r\n\r\n            if (show.tmdb.first_air_date){\r\n                let mas = show.tmdb.first_air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setFirstDate(newDate);\r\n            }\r\n\r\n            if (show.tmdb.last_air_date){\r\n                let mas = show.tmdb.last_air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setLastDate(newDate);\r\n            }\r\n\r\n            document.title = show.tmdb.name;\r\n\t\t},\r\n\t\t[show]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (showUserInfo?.status){\r\n                setReview(showUserInfo.review);\r\n                setUserStatus(showUserInfo.status);\r\n                setUserRate(showUserInfo.score);\r\n            }else{\r\n                setReview('');\r\n                setUserRate(0);\r\n                setUserStatus('Не смотрел');\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[showUserInfo]\r\n    );\r\n    \r\n    function setClear(){\r\n        setLastDate('');\r\n        setFirstDate('');\r\n        setShowStatus('');\r\n        setCompanies('');\r\n        setGenres(''); \r\n        setMetascoreBlock('');\r\n    }\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + show.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={showIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"showContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"showContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\" className=\"posterBlock\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + show.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{show.tmdb.name}</h1>\r\n                                        <h5 style={{marginBottom: \"10px\", marginTop: \"-10px\"}}>{show.tmdb.original_name}</h5>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p>Жанр: {genres}</p>\r\n                                            <p>Компания: {companies}</p>\r\n                                            <p hidden={firstDate===''}>Дата выхода первой серии: {firstDate}</p>\r\n                                            <p hidden={lastDate===''}>Дата выхода последней серии: {lastDate}</p>\r\n                                            <p hidden={show.tmdb.episode_run_time?false:true}>Продолжительность (мин): {show.tmdb.episode_run_time?show.tmdb.episode_run_time[0]:0}</p>\r\n                                            <p>Количество сезонов: {show.tmdb.number_of_seasons}</p>\r\n                                            <p>Количество серий: {show.tmdb.number_of_episodes}</p>\r\n                                            <p>Статус: {showStatus}</p>\r\n                                        </div>\r\n                                        <LoadingOverlay active={showUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                            <Rating stop={10}\r\n                                                emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                                fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                                initialRating={userRate}\r\n                                                readonly={!loggedIn | userStatus==='Не смотрел'}\r\n                                                onChange={(score) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm(); \r\n                                                    }else{\r\n                                                        setUserRate(score);\r\n                                                        setShowUserStatus({score: score });\r\n                                                    }}\r\n                                                }\r\n                                            /> <br/>\r\n                                            <StatusButtonGroup loggedIn={loggedIn} \r\n                                                statuses={['Не смотрел', 'Буду смотреть', 'Смотрю', 'Дропнул', 'Посмотрел']}\r\n                                                activeColor='#4527a0' \r\n                                                userStatus={userStatus}\r\n                                                onChangeStatus={(status) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setUserStatus(status);\r\n                                                        setShowUserStatus({ status: status });\r\n                                                        if (status === 'Не смотрел'){\r\n                                                            setReview('');\r\n                                                            setUserRate(0);\r\n                                                    }\r\n                                                    }\r\n                                                }}/>\r\n                                        </LoadingOverlay>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"showContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: show.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <div className=\"showContentBody\"> \r\n                                    <h3 style={{paddingTop: \"15px\"}}>Список серий</h3>\r\n                                    <SeasonsBlock seasons={show.tmdb.seasons} showID={show.tmdb.id} loggedIn={loggedIn} setShowEpisodeUserStatus={setShowEpisodeUserStatus}/>\r\n                                </div>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"10px\"}} hidden={!loggedIn}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                    <LoadingOverlay active={showUserInfoIsLoading} spinner text='Загрузка...'>   \r\n                                        <MDBInput \r\n                                            type=\"textarea\" \r\n                                            id=\"reviewInput\"\r\n                                            label=\"Ваш отзыв\" \r\n                                            value={review}\r\n                                            onChange={(event) =>setReview(event.target.value)}\r\n                                            outline\r\n                                        />\r\n                                        <button \r\n                                            className={'savePreviewButton'} \r\n                                            disabled={!loggedIn | userStatus==='Не смотрел'}\r\n                                            onClick={() => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setShowUserStatus({ review: document.getElementById('reviewInput').value });\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            >\r\n                                            Сохранить\r\n                                        </button>\r\n                                    </LoadingOverlay>\r\n                                </MDBCol>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={showUserInfo.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={showUserInfo.friends_info}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getShowRequestError(state),\r\n    show: selectors.getContentShow(state),\r\n    showIsLoading: selectors.getIsLoadingContentShow(state),\r\n    showUserInfo: selectors.getContentShowUserInfo(state),\r\n    showUserInfoIsLoading: selectors.getIsLoadingContentShowUserInfo(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestShow: (id) => {\r\n            dispatch(actions.requestShow(id));\r\n        },\r\n        setShowUserStatus: (status) => {\r\n            dispatch(actions.setShowStatus(status));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        requestShowUserInfo: (id) => {\r\n            dispatch(actions.requestShowUserInfo(id));\r\n        },\r\n        setShowEpisodeUserStatus: (status, showID) => {\r\n            dispatch(actions.setShowEpisodesStatus(status, showID));\r\n        },\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowPage);\r\n","import React, { useEffect, useState} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './style.css';\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction DetailedEpisodeRow ( {episode, showID, setShowEpisodeUserStatus, loggedIn, userInfo} ) {\r\n    let history = useHistory();\r\n    const [userRate, setUserRate] = useState(0);\r\n\r\n    useEffect(() =>{\r\n            setUserRate(userInfo?.score);\r\n        },\r\n        [userInfo]\r\n    );\r\n\r\n    function parseDate(date){\r\n        let newDate = new Date(date);\r\n        return newDate.toLocaleDateString(\"ru-RU\");\r\n    }\r\n\r\n    return(\r\n        <div className=\"episodeRow detailRow\">\r\n            <p className=\"episodeDate\">{parseDate(episode.air_date)}</p>\r\n            <a className=\"episodeRowName episodeLink detailRow\" \r\n                href={window.location.origin + '/show/' + showID + '/season/' + episode.season_number + '/episode/'+ episode.episode_number} \r\n                onClick={(e) => { history.push('/show/' + showID + '/season/' + episode.season_number + '/episode/'+ episode.episode_number); e.preventDefault();}}\r\n                >\r\n                Серия {episode.episode_number} - {episode.name}\r\n            </a>\r\n            <div hidden={!loggedIn} className=\"episodeRowRate\"> \r\n                <Rating start={-1} stop={10}\r\n                    emptySymbol={[<MDBIcon icon=\"eye-slash\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon far icon=\"star\" size=\"1x\" />))}\r\n                    fullSymbol={[<MDBIcon icon=\"eye\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\"title={n}/>))}\r\n                    readonly={!loggedIn}\r\n                    initialRating={userRate}\r\n                    onChange={(score) => {\r\n                            setUserRate(score);\r\n                            setShowEpisodeUserStatus({episodes: [ {\r\n                                    season_number: episode.season_number,\r\n                                    episode_number: episode.episode_number,\r\n                                    score: score\r\n                                }]},\r\n                                showID);\r\n                        }\r\n                    }\r\n                />\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailedEpisodeRow;","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport {\r\n    AreaChart , linearGradient, XAxis, Tooltip, YAxis, Area  \r\n  } from 'recharts';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\nimport DetailedEpisodeRow from \"./DetailedEpisodeRow\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ShowPage ( {requestShowSeason, showSeason, showSeasonIsLoading, setShowUserStatus, \r\n                    setShowEpisodeUserStatus,\r\n                    requestShowSeasonUserInfo, showUserInfo, showUserInfoIsLoading,\r\n                    loggedIn, openLoginForm\r\n    } ) {\r\n    let history = useHistory();\r\n    let { show_id, number } = useParams();\r\n    const [date, setDate] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [userRate, setUserRate] = useState(0);\r\n    const [chartData, setChartData] = useState([]);\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            setReview('');\r\n            setUserRate(0);\r\n            requestShowSeason(show_id, number);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[show_id, number, requestShowSeason]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestShowSeasonUserInfo(show_id, number);\r\n            else{\r\n                setReview('');\r\n                setUserRate(0);\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn, show_id, number]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            if (showSeason.tmdb.air_date){\r\n                let mas = showSeason.tmdb.air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }\r\n                \r\n            document.title = showSeason.tmdb.show_name + ' - ' + showSeason.tmdb.name;\r\n\t\t},\r\n\t\t[showSeason]\r\n    );\r\n    \r\n    useEffect(\r\n\t\t() => {\r\n            setChartData([]);\r\n            if (showSeason.tmdb.episodes)\r\n            if (showSeason.tmdb.episodes.length > 0){\r\n                let newData = [];\r\n                for (let episode in showSeason.tmdb.episodes){\r\n                    if (showSeason.tmdb.episodes[episode].vote_average > 0)\r\n                        newData.push({ \"name\": 'Ep ' + showSeason.tmdb.episodes[episode].episode_number,  \"Оценка\": showSeason.tmdb.episodes[episode].vote_average });\r\n                }\r\n                setChartData(newData);\r\n            }\r\n\t\t},\r\n\t\t[showSeason]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (showUserInfo?.review)\r\n                setReview(showUserInfo.review);\r\n            else\r\n                setReview('');\r\n\r\n            if (showUserInfo?.score)\r\n                setUserRate(showUserInfo.score);\r\n            else\r\n                setUserRate(0);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[showUserInfo]\r\n    );\r\n    \r\n    function setClear(){\r\n        setDate(\"\");\r\n    }\r\n\r\n    function getEpisodeByNumber(episodes, number){\r\n        for (let episode in episodes)\r\n            if (episodes[episode].episode_number === number)\r\n                return episodes[episode];\r\n    }\r\n\r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + showSeason.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={showSeasonIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"showContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"showContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"3\" className=\"posterBlock\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + showSeason.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"9\">\r\n                                        <h1>\r\n                                            <a href={window.location.origin + '/show/' + show_id} \r\n                                                onClick={(e) => { history.push('/show/' + show_id ); e.preventDefault();}}\r\n                                                >\r\n                                                {showSeason.tmdb.show_name}\r\n                                            </a>  \r\n                                            { ' - ' + showSeason.tmdb.name}\r\n                                        </h1>\r\n                                        <h5 style={{marginBottom: \"10px\", marginTop: \"-10px\"}}>{showSeason.tmdb.show_original_name + ' - Season ' + showSeason.tmdb.season_number}</h5>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p hidden={date===''}>Дата выхода: {date}</p>\r\n                                            <p>Количество серий: {showSeason.tmdb.episodes?showSeason.tmdb.episodes.length:0}</p>\r\n                                        </div>\r\n                                        <div hidden={!loggedIn | (!showUserInfo?.user_watched_show)}>\r\n                                        <LoadingOverlay active={showUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                            <Rating stop={10}\r\n                                                emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                                fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                                initialRating={userRate}\r\n                                                onChange={(score) => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setUserRate(score);\r\n                                                        setShowUserStatus({score: score }, show_id, showSeason.tmdb.season_number);\r\n                                                    }}\r\n                                                }\r\n                                            />\r\n                                            <MDBInput \r\n                                                type=\"textarea\" \r\n                                                id=\"reviewSeasonInput\"\r\n                                                label=\"Ваш отзыв\" \r\n                                                value={review}\r\n                                                onChange={(event) =>setReview(event.target.value)}\r\n                                                outline\r\n                                            />\r\n                                            <button \r\n                                                className={'savePreviewButton'} \r\n                                                hidden={!loggedIn | (!showUserInfo?.user_watched_show)}\r\n                                                onClick={() => {\r\n                                                        if (!loggedIn){\r\n                                                            openLoginForm();\r\n                                                        }else{\r\n                                                            setShowUserStatus({ review: document.getElementById('reviewSeasonInput').value }, show_id, showSeason.tmdb.season_number);\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                >\r\n                                                Сохранить\r\n                                            </button>\r\n                                        </LoadingOverlay>\r\n                                        </div>\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"showContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: showSeason.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <div className=\"showContentBody\"> \r\n                                    <h3 style={{paddingTop: \"15px\"}}>Список серий</h3>\r\n                                    <details open={false} className='episodeRows'>\r\n                                        <summary>Развернуть</summary>\r\n                                            <ul>\r\n                                                {  showSeason.tmdb.episodes?showSeason.tmdb.episodes.map((episode) => <li className=\"episode\" key={showSeason.tmdb.id+episode.episode_number}><DetailedEpisodeRow episode={episode} showID={show_id} loggedIn={loggedIn} userInfo={getEpisodeByNumber(showUserInfo.episodes, episode.episode_number)} setShowEpisodeUserStatus={setShowEpisodeUserStatus}/></li>):'' }\r\n                                            </ul>\r\n                                    </details>\r\n                                    <div hidden={!(chartData.length > 0)}>\r\n                                        <AreaChart width={700} height={250} data={chartData}\r\n                                            margin={{ top: 20, right: 20, left: 15, bottom: 0 }}\r\n                                            >\r\n                                            <defs>\r\n                                                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                                    <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\r\n                                                    <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/>\r\n                                                </linearGradient>\r\n                                            </defs>\r\n                                            <XAxis dataKey=\"name\" interval={0} tick={{ fill: \"rgb(238, 238, 238)\"}}/>\r\n                                            <YAxis tickLine={false} domain={[0, 10]} tick={{ fill: \"rgb(238, 238, 238)\"}} tickCount={2}/>\r\n                                            <Tooltip contentStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)'}}/>\r\n                                            <Area type=\"monotone\" dataKey=\"Оценка\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorUv)\" />\r\n                                        </AreaChart>\r\n                                    </div>\r\n                                </div>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={showUserInfo.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={showUserInfo.friends_info}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getShowRequestError(state),\r\n    showSeason: selectors.getContentShow(state),\r\n    showSeasonIsLoading: selectors.getIsLoadingContentShow(state),\r\n    showUserInfo: selectors.getContentShowUserInfo(state),\r\n    showUserInfoIsLoading: selectors.getIsLoadingContentShowUserInfo(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestShowSeason: (showID, seasonNumber) => {\r\n            dispatch(actions.requestShowSeason(showID, seasonNumber));\r\n        },\r\n        setShowUserStatus: (status, showID, seasonNumber) => {\r\n            dispatch(actions.setShowSeasonStatus(status, showID, seasonNumber));\r\n        },\r\n        setShowEpisodeUserStatus: (status, showID) => {\r\n            dispatch(actions.setShowEpisodesStatus(status, showID));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        requestShowSeasonUserInfo: (showID, seasonID) => {\r\n            dispatch(actions.requestShowSeasonUserInfo(showID, seasonID));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowPage);\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction EpisodePage ( {requestShowEpisode, showEpisode, showEpisodeIsLoading, setEpisodeUserStatus,\r\n                    requestShowEpisodeUserInfo, showUserInfo, showUserInfoIsLoading,\r\n                    loggedIn, openLoginForm\r\n    } ) {\r\n    let history = useHistory();\r\n    let { show_id, season_number, episode_number } = useParams();\r\n    const [date, setDate] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [userRate, setUserRate] = useState(0);\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            setReview('');\r\n            setUserRate(0);\r\n            requestShowEpisode(show_id, season_number, episode_number);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[show_id, season_number, episode_number, requestShowEpisode]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                requestShowEpisodeUserInfo(show_id, season_number, episode_number);\r\n            else{\r\n                setReview('');\r\n                setUserRate(0);\r\n            }\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn, show_id, season_number, episode_number]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setClear();\r\n            if (showEpisode.tmdb.air_date){\r\n                let mas = showEpisode.tmdb.air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }\r\n\r\n            if (showEpisode.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{showEpisode.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            document.title = showEpisode.tmdb.show_name + ' - ' + showEpisode.tmdb.name;\r\n\t\t},\r\n\t\t[showEpisode]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (showUserInfo?.review)\r\n                setReview(showUserInfo.review);\r\n            else\r\n                setReview('');\r\n\r\n            if (showUserInfo?.score)\r\n                setUserRate(showUserInfo.score);\r\n            else\r\n                setUserRate(0);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[showUserInfo]\r\n    );\r\n    \r\n    function setClear(){\r\n        setMetascoreBlock(\"\");\r\n        setDate(\"\");\r\n    }\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + showEpisode.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={showEpisodeIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"showContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"showContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"3\" className=\"posterBlock\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + showEpisode.tmdb.still_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"8\">\r\n                                        <h1>\r\n                                            <a href={window.location.origin + '/show/' + show_id} \r\n                                                onClick={(e) => { history.push('/show/' + show_id ); e.preventDefault();}}\r\n                                                >\r\n                                                {showEpisode.tmdb.show_name}\r\n                                            </a>  \r\n                                            { ' - ' + showEpisode.tmdb.name}\r\n                                        </h1>\r\n                                        <h5 style={{marginBottom: \"10px\", marginTop: \"-10px\"}}>{showEpisode.tmdb.show_original_name + ' - Season ' + showEpisode.tmdb.season_number + ' - Episode ' + showEpisode.tmdb.episode_number} </h5>\r\n                                        <div className=\"mainInfo\">\r\n                                            <p hidden={date===''}>Дата выхода: {date}</p>\r\n                                            <a href={window.location.origin + '/show/' + show_id + '/season/' + season_number} \r\n                                                onClick={(e) => { history.push('/show/' + show_id + '/season/' + season_number); e.preventDefault();}}\r\n                                                >\r\n                                                Сезон: {showEpisode.tmdb.season_number}\r\n                                            </a> \r\n                                        </div>\r\n                                        <div hidden={!loggedIn | (!showUserInfo?.user_watched_show)}>\r\n                                            <LoadingOverlay active={showUserInfoIsLoading} spinner text='Загрузка...'>\r\n                                                <Rating start={-1} stop={10}\r\n                                                    emptySymbol={[<MDBIcon icon=\"eye-slash\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>))}\r\n                                                    fullSymbol={[<MDBIcon icon=\"eye\" />].concat([1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>))}\r\n                                                    initialRating={userRate}\r\n                                                    onChange={(score) => {\r\n                                                        if (!loggedIn){\r\n                                                            openLoginForm();\r\n                                                        }else{\r\n                                                            setUserRate(score);\r\n                                                            setEpisodeUserStatus( {episodes: [ {season_number: season_number,\r\n                                                                                                episode_number: episode_number,\r\n                                                                                                score: score  }]},  show_id);\r\n                                                        }}\r\n                                                    }\r\n                                                />\r\n                                                <MDBInput \r\n                                                    type=\"textarea\" \r\n                                                    id=\"reviewSeasonInput\"\r\n                                                    label=\"Ваш отзыв\" \r\n                                                    value={review}\r\n                                                    onChange={(event) =>setReview(event.target.value)}\r\n                                                    outline\r\n                                                />\r\n                                                <button \r\n                                                    className={'savePreviewButton'} \r\n                                                    hidden={!loggedIn | (!showUserInfo?.user_watched_show)}\r\n                                                    onClick={() => {\r\n                                                            if (!loggedIn){\r\n                                                                openLoginForm();\r\n                                                            }else{\r\n                                                                setEpisodeUserStatus({episodes: [ {\r\n                                                                                                    season_number: season_number,\r\n                                                                                                    episode_number: episode_number,\r\n                                                                                                    review: document.getElementById('reviewSeasonInput').value\r\n                                                                                                }]},\r\n                                                                                    show_id);\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                    >\r\n                                                    Сохранить\r\n                                                </button>\r\n                                            </LoadingOverlay>\r\n                                        </div>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"showContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: showEpisode.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={showUserInfo.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={showUserInfo.friends_info}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getShowRequestError(state),\r\n    showEpisode: selectors.getContentShow(state),\r\n    showEpisodeIsLoading: selectors.getIsLoadingContentShow(state),\r\n    showUserInfo: selectors.getContentShowUserInfo(state),\r\n    showUserInfoIsLoading: selectors.getIsLoadingContentShowUserInfo(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestShowEpisode: (showID, seasonNumber, episodeNumber) => {\r\n            dispatch(actions.requestShowEpisode(showID, seasonNumber, episodeNumber));\r\n        },\r\n        setEpisodeUserStatus: (status, showID) => {\r\n            dispatch(actions.setShowEpisodesStatus(status, showID));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        requestShowEpisodeUserInfo: (showID, seasonID, episodeID) => {\r\n            dispatch(actions.requestShowEpisodeUserInfo(showID, seasonID, episodeID));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EpisodePage);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\n\r\nfunction CardGame( {game} ) {\r\n    let history = useHistory();\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (game.released){\r\n                let mas = game.released.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (game.name.length > 55){\r\n                let newName = game.name.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(game.name);\r\n        },\r\n        [game]\r\n    );\r\n\r\n    /*const mouseDownHandler = ( event ) => {\r\n        if( event.button === 1 ) {\r\n            console.log(window.location.origin + '/game/' + game.slug );\r\n\r\n        }\r\n      }*/\r\n\r\n    return(\r\n        <div className=\"searchCardGame\" >\r\n            <div className=\"searchCardGameImage\" style={{backgroundImage: `url(${game.background_image})`}}> </div>\r\n            <div className=\"searchCardGameText\">\r\n                <a href={window.location.origin + '/game/' + game.slug} \r\n                    onClick={(e) => { history.push('/game/' + game.slug); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n//onMouseDown={mouseDownHandler} \r\n\r\nexport default CardGame;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardMovie ( {movie} ) {\r\n    let history = useHistory();\r\n\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (movie.release_date){\r\n                let mas = movie.release_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (movie.title.length > 55){\r\n                let newName = movie.title.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(movie.title);\r\n        },\r\n        [movie]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardMovie\" >\r\n            <div className=\"searchCardMovieImage\" style={{backgroundImage: `url(${\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.poster_path})`}}> </div>\r\n            <div className=\"searchCardMovieText\">\r\n                <a href={window.location.origin + '/movie/' + movie.id} \r\n                    onClick={(e) => { history.push('/movie/' + movie.id); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardMovie;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardShow ( {show} ) {\r\n    let history = useHistory();\r\n\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (show.first_air_date){\r\n                let mas = show.first_air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (show.name.length > 55){\r\n                let newName = show.name.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(show.name);\r\n        },\r\n        [show]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardMovie\" >\r\n            <div className=\"searchCardMovieImage\" style={{backgroundImage: `url(${\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + show.poster_path})`}}> </div>\r\n            <div className=\"searchCardMovieText\">\r\n                <a href={window.location.origin + '/show/' + show.id} \r\n                    onClick={(e) => { history.push('/show/' + show.id); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardShow;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardUser ( {user} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [user]\r\n    );\r\n\r\n    return(\r\n        <a href={window.location.origin + '/user/' + user.id} \r\n                    onClick={(e) => { history.push('/user/' + user.id); e.preventDefault();}}>\r\n            <div className=\"cardUser\" >\r\n                <div className=\"cardUserImage\" style={{backgroundImage: `url(${'http://upload.wikimedia.org/wikipedia/commons/f/f4/User_Avatar_2.png'})`}}> </div>\r\n                <div className=\"cardUserText\">\r\n                    <h4 >{user.username}</h4>\r\n                </div>\r\n            </div> \r\n        </a>\r\n        \r\n    )\r\n}\r\n\r\nexport default CardUser;\r\n","import React, {useState} from \"react\";\r\nimport './style.css';\r\n\r\nfunction CategoriesTab( {categories, activeColor, onChangeCategory} ) {\r\n    const [activeCategory, setActiveCategory] = useState(categories[0]);\r\n\r\n    return(\r\n        <div>\r\n            {categories.map((category) => <button className={'categoriesTab'} \r\n                                            key={category}\r\n                                            style={{color: (activeCategory === category?activeColor:'rgb(207, 207, 207)')}}\r\n                                            onClick={()=>{ \r\n                                                setActiveCategory(category);\r\n                                                onChangeCategory(category);\r\n                                            }}>\r\n                                            {category}\r\n                                        </button>) }\r\n           <hr style={{  backgroundColor: activeColor, height: 2.5, marginTop: \"0px\", marginBottom: \"10px\" }}/>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default CategoriesTab;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBFormInline\r\n} from \"mdbreact\";\r\nimport './style.css';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport CardGame from './CardGame';\r\nimport CardMovie from './CardMovie';\r\nimport CardShow from './CardShow';\r\nimport CardUser from '../Common/CardUser';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction SearchPage ( { loggedIn, gamesIsLoading, moviesIsLoading, showsIsLoading, usersIsLoading, searchGame, games, searchMovie, movies, searchShow, shows, searchUsers, users } ) {\r\n    let history = useHistory();\r\n    let { query } = useParams();\r\n    const [queryText, setQueryText] = useState(\"\");\r\n    const [gamesCards, setGamesCards] = useState(\"\");\r\n    const [moviesCards, setMoviesCards] = useState(\"\");\r\n    const [showsCards, setShowsCards] = useState(\"\");\r\n    const [usersCards, setUsersCards] = useState(\"\");\r\n    const [gamesPage, setGamesPage] = useState(1);\r\n    const [moviesPage, setMoviesPage] = useState(1);\r\n    const [showsPage, setShowsPage] = useState(1);\r\n\r\n    const [activeCategory, setActiveCategory] = useState(\"Всё\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            searchGame(query, 1, 6);\r\n            searchMovie(query, 1);\r\n            searchShow(query, 1);\r\n            searchUsers(query);\r\n            setQueryText(query);\r\n            document.title = 'Поиск';\r\n            setGamesPage(1);\r\n            setMoviesPage(1);\r\n            setShowsPage(1);\r\n\t\t},\r\n\t\t[query, searchGame, searchMovie, searchUsers, searchShow]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setGamesCards(<div className=\"searchCardsGroup\">{games.map(game => <CardGame game={game} key={game.id}/>)}</div>);\r\n\t\t},\r\n\t\t[games]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setMoviesCards(<div className=\"searchCardsGroup\">{movies.map(movie => <CardMovie movie={movie} key={movie.id}/>)}</div>);\r\n\t\t},\r\n\t\t[movies]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setShowsCards(<div className=\"searchCardsGroup\">{shows.map(show => <CardShow show={show} key={show.id}/>)}</div>);\r\n\t\t},\r\n\t\t[shows]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setUsersCards(<div className=\"searchCardsGroup\">{users.map(user => <CardUser user={user} key={user.username}/>)}</div>);\r\n\t\t},\r\n\t\t[users]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg searchBG\"/> \r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"searchPage\"> \r\n                            <h1>Поиск</h1>\r\n                            <MDBFormInline className=\"md-form\"\r\n                                onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput2').value); return false; }}>\r\n                                <MDBIcon icon=\"search\" />\r\n                                <input \r\n                                    className=\"form-control form-control-sm ml-3 w-50\" \r\n                                    type=\"text\" \r\n                                    placeholder=\"Найти\" \r\n                                    aria-label=\"Search\" \r\n                                    id=\"searchInput2\" \r\n                                    value={queryText} \r\n                                    onChange={(event) =>setQueryText(event.target.value)}/>\r\n                            </MDBFormInline>\r\n\r\n                            <h1>Результаты поиска</h1>\r\n                                <CategoriesTab\r\n                                    categories={['Всё', 'Игры', 'Фильмы', 'Сериалы', 'Пользователи']}\r\n                                    activeColor='#7654de' \r\n                                    onChangeCategory={(category) => {\r\n                                        setActiveCategory(category);\r\n                                    }}/>\r\n\r\n                                <LoadingOverlay\r\n                                    active={gamesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем игры...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Игры'}>\r\n                                        <h3>Игры</h3>\r\n                                        <div className=\"reslutsBlock\">\r\n                                            <button className=\"paginationButton\" \r\n                                                disabled={gamesPage===1}\r\n                                                onClick={() => {searchGame(query, gamesPage-1, 6); setGamesPage(gamesPage-1)}}\r\n                                                >\r\n                                                &lt;\r\n                                            </button>\r\n                                            {gamesCards}\r\n                                            <button className=\"paginationButton\"\r\n                                                disabled={games.length < 6}\r\n                                                onClick={() => {searchGame(query, gamesPage+1, 6); setGamesPage(gamesPage+1)}}\r\n                                                >\r\n                                                &gt;\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </LoadingOverlay>\r\n\r\n                                <LoadingOverlay\r\n                                    active={moviesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем фильмы...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Фильмы'}>\r\n                                        <h3>Фильмы</h3>\r\n                                        <div className=\"reslutsBlock\">\r\n                                            <button className=\"paginationButton\" \r\n                                                disabled={moviesPage===1}\r\n                                                onClick={() => {searchMovie(query, moviesPage-1); setMoviesPage(moviesPage-1)}}\r\n                                                >\r\n                                                &lt;\r\n                                            </button>\r\n                                            {moviesCards}\r\n                                            <button className=\"paginationButton\"\r\n                                                disabled={movies.length < 20}\r\n                                                onClick={() => {searchMovie(query, moviesPage+1); setMoviesPage(moviesPage+1)}}\r\n                                                >\r\n                                                &gt;\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>       \r\n                                </LoadingOverlay>\r\n\r\n                                <LoadingOverlay\r\n                                    active={showsIsLoading}\r\n                                    spinner\r\n                                    text='Ищем сериалы...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Сериалы'}>\r\n                                        <h3>Сериалы</h3>\r\n                                        <div className=\"reslutsBlock\">\r\n                                            <button className=\"paginationButton\" \r\n                                                disabled={showsPage===1}\r\n                                                onClick={() => {searchShow(query, showsPage-1); setShowsPage(showsPage-1)}}\r\n                                                >\r\n                                                &lt;\r\n                                            </button>\r\n                                            {showsCards}\r\n                                            <button className=\"paginationButton\"\r\n                                                disabled={shows.length < 20}\r\n                                                onClick={() => {searchShow(query, showsPage+1); setShowsPage(showsPage+1)}}\r\n                                                >\r\n                                                &gt;\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>       \r\n                                </LoadingOverlay>\r\n                                \r\n                                <LoadingOverlay\r\n                                    active={usersIsLoading}\r\n                                    spinner\r\n                                    text='Ищем пользователей...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Пользователи'}>\r\n                                        <h3>Пользователи</h3>\r\n                                        {usersCards}\r\n                                    </div>    \r\n                                </LoadingOverlay>\r\n                                \r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    gamesIsLoading: selectors.getIsLoadingSearchGames(state),\r\n    moviesIsLoading: selectors.getIsLoadingSearchMovies(state),\r\n    showsIsLoading: selectors.getIsLoadingSearchShows(state),\r\n    usersIsLoading: selectors.getIsLoadingSearchUsers(state),\r\n    games: selectors.getSearchContentGames(state),\r\n    movies: selectors.getSearchContentMovies(state),\r\n    shows: selectors.getSearchContentShows(state),\r\n    users: selectors.getSearchContentUsers(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        searchGame: (query, page, gamesCount) => {\r\n            dispatch(actions.searchGames(query, page, gamesCount));\r\n        },\r\n        searchMovie: (query, page) => {\r\n            dispatch(actions.searchMovies(query, page));\r\n        },\r\n        searchShow: (query, page) => {\r\n            dispatch(actions.searchShows(query, page));\r\n        },\r\n        searchUsers: (query) => {\r\n            dispatch(actions.searchUsers(query));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);\r\n","import React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction LoginForm( {isOpen, closeForm, logIn, authError, openResetPasswordForm} ) {\r\n\tconst [password, setPassword] = useState(\"\");\r\n\tconst [login, setLogin] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody className=\"loginBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form onSubmit={(event) => {event.preventDefault(); logIn(login, password)}}>\r\n\t              <p className=\"h4 text-center mb-4\">Войти</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!authError} >Неверный логин или пароль!</p>\r\n\r\n\t              <label htmlFor=\"loginInput\" className=\"grey-text\">\r\n\t                Логин\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={login}\r\n\t\t\t\t\tonChange={(event) =>setLogin(event.target.value)}/>\r\n\t\t\t\t\t\r\n\t              <label htmlFor=\"passwordInput\" className=\"grey-text\">\r\n\t                Пароль\r\n\t              </label>\r\n\t              <input type=\"password\" id=\"passwordInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={password}\r\n\t\t\t\t\tonChange={(event) =>setPassword(event.target.value)}/>\r\n\t\t\t\t\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"submit\" className=\"confirmButton\">\r\n\t\t\t\t\t\tВойти\r\n\t\t\t\t\t</MDBBtn>\r\n\t\t\t\t\t<label className=\"passwordResetLabel\" onClick={() => {closeForm(); openResetPasswordForm()}}>\r\n\t\t\t\t\t\tВосстановить пароль\r\n\t              \t</label>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getLoginForm(state),\r\n\tauthError: selectors.getAuthError(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeLoginForm());\r\n\t\t},\r\n\t\tlogIn: (login, password) => {\r\n\t\t\tdispatch(actions.tryAuth(login, password));\r\n\t\t},\r\n\t\topenResetPasswordForm: () => {\r\n\t\t\tdispatch(actions.openResetPasswordForm());\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n","\r\nimport React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction RegistrationForm( {isOpen, closeForm, registrate, registrateArror, user} ) {\r\n\tconst [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n\tconst [password, setPassword] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\tconst [login, setLogin] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered >\r\n\t    <MDBModalBody className=\"registrationBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form>\r\n\t\t\t      <p className=\"note note-danger\" hidden={!registrateArror} >Ошибка регистрации!</p>\r\n                  <p className=\"note note-success\" hidden={user.email===\"\"} >{user.login}, добро пожаловать! Осталось только подтвердить вашу почту</p>\r\n\t              <h4>Регистрация</h4>\r\n\r\n\t              <label htmlFor=\"loginInput\">\r\n\t                Никнейм\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" \r\n\t\t\t\t\t\tvalue={login}\r\n\t\t\t\t\t\tonChange={(event) =>setLogin(event.target.value)}/>\r\n\r\n                  <label htmlFor=\"emailInput\">\r\n\t                Электронная почта\r\n\t              </label>\r\n\t\t\t\t  <input type=\"email\"  id=\"emailInput\"  className=\"form-control\" \r\n\t\t\t\t\t  value={email} \r\n\t\t\t\t\t  onChange={(event) =>setEmail(event.target.value)} />\r\n\r\n\t              <label htmlFor=\"passwordInput\">\r\n\t                Пароль\r\n\t              </label>\r\n\t\t\t\t  <input type=\"password\"id=\"passwordInput\" className=\"form-control\"\r\n\t\t\t\t  \t\tvalue={password}\r\n\t\t\t\t\t\tonChange={(event) =>setPassword(event.target.value)}/>\r\n\r\n\t\t\t\t  <label htmlFor=\"passwordConfirmInput\">\r\n\t                Подтверждение пароля\r\n\t              </label>\r\n\t\t\t\t  <input type=\"password\" id=\"passwordConfirmInput\" className=\"form-control\"\r\n\t\t\t\t  \t\tstyle={passwordConfirm===password?{outlineColor: 'green'}:{outlineColor: 'red'}}\r\n\t\t\t\t\t\tvalue={passwordConfirm}\r\n\t\t\t\t\t\tonChange={(event) =>setPasswordConfirm(event.target.value)}/>\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"button\" className=\"confirmButton\" \r\n\t\t\t\t\t\tdisabled={password!==passwordConfirm || login.length < 1  || email.length < 1 || password.length < 1}\r\n\t\t\t\t\t\tonClick={() => registrate(login, email, password)}>\r\n\t\t\t\t\t\tЗарегистрироваться\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getRegistrateForm(state),\r\n    registrateArror: selectors.getRegistrateError(state),\r\n    user: selectors.getUser(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeRegistrateForm());\r\n\t\t},\r\n\t\tregistrate: (login, email, password) => {\r\n\t\t\tdispatch(actions.registrationRequest(login, email, password));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);\r\n","import React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы сброса пароля\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction ResetPasswordForm( {isOpen, closeForm, resetPassword, resetPasswordError} ) {\r\n\tconst [email, setEmail] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody className=\"loginBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form onSubmit={(event) => {event.preventDefault(); resetPassword(email)}}>\r\n\t              <p className=\"h4 text-center mb-4\">Сбросить пароль</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!resetPasswordError | resetPasswordError === 'ok'} >{resetPasswordError}</p>\r\n                  <p className=\"note note-success\" hidden={resetPasswordError !== 'ok'} >На вашу почту отправлено письмо</p>\r\n\r\n\t              <label htmlFor=\"emailInput\" className=\"grey-text\">\r\n\t                Почта\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"emailInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={email}\r\n\t\t\t\t\tonChange={(event) =>setEmail(event.target.value)}/>\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"submit\" className=\"confirmButton\">\r\n\t\t\t\t\t\tСбросить\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getResetPasswordForm(state),\r\n\tresetPasswordError: selectors.getResetPasswordError(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeResetPasswordForm());\r\n\t\t},\r\n\t\tresetPassword: (email) => {\r\n\t\t\tdispatch(actions.resetPassword(email));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPasswordForm);\r\n","import React, {\r\n    useEffect\r\n} from \"react\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ConfirmPage ( {confirmEmailRequest} ) \r\n{\r\n\tlet search = window.location.search;\r\n\tlet params = new URLSearchParams(search);\r\n\tlet uid64 = params.get('uid64');\r\n\tlet token = params.get('token');\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconfirmEmailRequest(uid64, token);\r\n\t\t},\r\n\t\t// eslint-disable-next-line\r\n\t\t[]\r\n\t);\r\n\t\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        confirmEmailRequest: (uid64, token) => {\r\n            dispatch(actions.confirmEmailRequest(uid64, token));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmPage);","import React, {\r\n    useState\r\n} from \"react\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../store/actions';\r\nimport * as selectors from '../store/reducers';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ConfirmPasswordPage ( {confirmPassword, confirmPasswordError} ) \r\n{\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n    \r\n\tlet search = window.location.search;\r\n\tlet params = new URLSearchParams(search);\r\n\tlet token = params.get('token');\r\n\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n                <form onSubmit={(event) => {event.preventDefault(); confirmPassword(token, password)}} className=\"confirmPasswordForm\">\r\n                    <p className=\"h4\">Обновить пароль</p>\r\n                    <p className=\"note note-danger\" hidden={!confirmPasswordError | confirmPasswordError==='ok'} >{confirmPasswordError}</p>\r\n                    <p className=\"note note-success\" hidden={confirmPasswordError !== 'ok'} >Пароль обновлен!</p>\r\n\r\n                    <label htmlFor=\"passwordInput\" className=\"confirmPasswordLabel\">\r\n                        Новый пароль\r\n                    </label><br/>\r\n                    <input type=\"password\" id=\"passwordInput\" className=\"confirmPasswordInput\" \r\n                        value={password}\r\n                        onChange={(event) =>setPassword(event.target.value)}/>\r\n                    <br/>\r\n\r\n                    <label htmlFor=\"passwordConfurmInput\" className='confirmPasswordLabel'>\r\n                        Подтверждение пароля\r\n                    </label><br/>\r\n                    <input type=\"password\" id=\"passwordConfurmInput\" className=\"confirmPasswordInput\"\r\n                        value={passwordConfirm}\r\n                        onChange={(event) =>setPasswordConfirm(event.target.value)}/>\r\n                    <br/>\r\n\r\n                    <button type=\"submit\" \r\n                        className=\"confirmPasswordButton\"\r\n                        disabled={password!==passwordConfirm | password.length < 1}>\r\n                        Обновить\r\n                    </button>\r\n                </form>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    confirmPasswordError: selectors.getConfirmPasswordError(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        confirmPassword: (token, password) => {\r\n            dispatch(actions.confirmPassword(token, password));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmPasswordPage);","export const COLORS = [\r\n    \"rgb(43,206,72)\",\r\n    \"rgb(240,163,255)\",\r\n    \"rgb(0,117,220)\",\r\n    \"rgb(153,63,0)\",\r\n    \"rgb(76,0,92)\",\r\n    \"rgb(225,225,225)\",\r\n    \"rgb(0,92,49)\",\r\n    \"rgb(255,204,153)\",\r\n    \"rgb(128,128,128)\",\r\n    \"rgb(148,255,181)\",\r\n    \"rgb(143,124,0)\",\r\n    \"rgb(157,204,0)\",\r\n    \"rgb(194,0,136)\",\r\n    \"rgb(0,51,128)\",\r\n    \"rgb(255,164,5)\",\r\n    \"rgb(255,168,187)\",\r\n    \"rgb(66,102,0)\",\r\n    \"rgb(255,0,16)\",\r\n    \"rgb(94,241,242)\",\r\n    \"rgb(0,153,143)\",\r\n    \"rgb(224,255,102)\",\r\n    \"rgb(116,10,255)\",\r\n    \"rgb(153,0,0)\",\r\n    \"rgb(255,255,128)\",\r\n    \"rgb(255,255,0)\",\r\n    \"rgb(255,80,)\",\r\n  ]","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n  Cell, BarChart, Bar, XAxis, YAxis, Tooltip,\r\n} from 'recharts';\r\nimport {COLORS} from \"./Colors\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction GameBlock ( {games, stats} ) {\r\n    const [gameChartData, setGameChartData] = useState([]);\r\n    const gameColumns = [\r\n        {\r\n          label: 'Название',\r\n          field: 'name',\r\n          sort: 'disabled'\r\n        },\r\n        {\r\n          label: 'Статус',\r\n          field: 'status',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Оценка',\r\n          field: 'score',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Отзыв',\r\n          field: 'review',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Время прохождения',\r\n          field: 'spent_time',\r\n          sort: 'asc'\r\n        }\r\n      ];\r\n\r\n    const [gameTableData, setGameTableData] = useState({\r\n        columns: gameColumns,\r\n        rows: [\r\n        ]\r\n    });\r\n\r\n    useEffect(() =>{\r\n            if (games)\r\n            {\r\n                setGameTableData({\r\n                    columns: gameColumns,\r\n                    rows: games.map((game) => {\r\n                        return {\r\n                                name: <a className=\"dataTable\" href={window.location.origin + '/game/' + game.game.rawg_slug}>{game.game.rawg_name}</a>,\r\n                                name2: game.game.rawg_name,\r\n                                status: game.status,\r\n                                score: game.score,\r\n                                review: game.review,\r\n                                spent_time: parseFloat(game.spent_time),\r\n                                /*clickEvent: (e) => {\r\n                                    //window.open('/game/' + game.game.rawg_slug);\r\n                                    history.push('/game/' + game.game.rawg_slug);\r\n                                }*/\r\n                            }      \r\n                    })\r\n                });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [games]\r\n    );\r\n\r\n    useEffect(() =>{\r\n      setGameChartData([]);\r\n      if (stats)\r\n      {\r\n        if (stats?.genres){\r\n            let newData = [];\r\n            for (let genre in stats.genres)\r\n              if (stats.genres[genre].spent_time_percent > 2)\r\n                newData.push({name: stats.genres[genre].name, 'Процент': stats.genres[genre].spent_time_percent});\r\n            newData = newData.sort((a, b) => a['Процент'] > b['Процент'] ? -1 : 1);\r\n            setGameChartData(newData);\r\n        }\r\n      }},\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [stats]\r\n      );\r\n\r\n    return(\r\n        <div>\r\n            <p>Игр сыграно: {stats?.count}, часов наиграно: {stats?.total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={gameTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать игр на странице\"\r\n                searchLabel='Поиск'\r\n                className='dataTable'\r\n                />\r\n                <div hidden={gameChartData.length < 1}>\r\n                  <BarChart width={1000} height={300}\r\n                      data={gameChartData}\r\n                      margin={{ top: 5, right: 10, left: 10, bottom: 20, }}\r\n                  >\r\n                    <XAxis dataKey=\"name\" tickLine={false} tick={{ fill: \"rgb(238, 238, 238)\"}} interval={0} angle={-10} tickMargin={15}/>\r\n                    <YAxis domain={[0, 'dataMax']} tick={{ fill: \"rgb(238, 238, 238)\"}}/>\r\n                    <Tooltip itemStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)'}}\r\n                      contentStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)', borderRadius: \"10px\"}}\r\n                      cursor={false}/>\r\n                    <Bar dataKey=\"Процент\">\r\n                        {\r\n                            gameChartData.map((entry, index) => <Cell fill={COLORS[index]} key={index}/>)\r\n                        }\r\n                    </Bar>\r\n                  </BarChart>\r\n              </div>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default GameBlock;\r\n","import React from \"react\";\r\n\r\nimport CardUser from '../Common/CardUser';\r\n\r\nfunction FriendBlock ( {users} ) {\r\n\r\n    return(\r\n        <div className=\"friendsBlock\">\r\n            { users.map((user) => <CardUser user={user} key={user.id}/>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FriendBlock;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n  Cell, BarChart, Bar, XAxis, YAxis, Tooltip,\r\n} from 'recharts';\r\nimport {COLORS} from \"./Colors\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction MovieBlock ( {movies, stats} ) {\r\n    const [movieChartData, setMovieChartData] = useState([]);\r\n    const movieColumns = [\r\n      {\r\n        label: 'Название',\r\n        field: 'name',\r\n        sort: 'disabled'\r\n      },\r\n      {\r\n        label: 'Статус',\r\n        field: 'status',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Оценка',\r\n        field: 'score',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Отзыв',\r\n        field: 'review',\r\n        sort: 'asc'\r\n      }\r\n    ];\r\n\r\n  const [movieTableData, setMovieTableData] = useState({\r\n      columns: movieColumns,\r\n      rows: [\r\n      ]\r\n  });\r\n\r\n    useEffect(() =>{\r\n            if (movies)\r\n            {\r\n              setMovieTableData({\r\n                columns: movieColumns,\r\n                rows: movies.map((movie) => {\r\n                    return {\r\n                            name: <a className=\"dataTable\" href={window.location.origin + '/movie/' + movie.movie.tmdb_id}>{movie.movie.tmdb_name}</a>,\r\n                            name2: movie.movie.tmdb_name,\r\n                            status: movie.status,\r\n                            score: movie.score,\r\n                            review: movie.review,\r\n                            /*clickEvent: (e) => {\r\n                                //window.open('/game/' + game.game.rawg_slug);\r\n                                history.push('/movie/' + movie.movie.tmdb_id)\r\n                            }*/\r\n                        }      \r\n                  })\r\n              });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [movies]\r\n    );\r\n\r\n    useEffect(() =>{\r\n      setMovieChartData([]);\r\n      if (stats)\r\n      {\r\n        if (stats?.genres){\r\n            let newData = [];\r\n            for (let genre in stats.genres)\r\n                if (stats.genres[genre].spent_time_percent > 2)\r\n                  newData.push({name: stats.genres[genre].name, 'Процент': stats.genres[genre].spent_time_percent});\r\n            newData = newData.sort((a, b) => a['Процент'] > b['Процент'] ? -1 : 1);\r\n            setMovieChartData(newData);\r\n        }\r\n      }},\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [stats]\r\n      );\r\n\r\n    return(\r\n        <div>\r\n            <p>Фильмов посмотрено: {stats?.count}, часов просмотра: {stats?.total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={movieTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать фильмов на странице\"\r\n                searchLabel='Поиск'\r\n                />\r\n\r\n            <div hidden={movieChartData.length < 1}>\r\n                <BarChart width={1000} height={300}\r\n                    data={movieChartData}\r\n                    margin={{ top: 5, right: 10, left: 10, bottom: 15, }}\r\n                >\r\n                  <XAxis dataKey=\"name\" tickLine={false} tick={{ fill: \"rgb(238, 238, 238)\"}} interval={0} angle={-10} tickMargin={15}/>\r\n                  <YAxis domain={[0, 'dataMax']} tick={{ fill: \"rgb(238, 238, 238)\"}}/>\r\n                  <Tooltip itemStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)'}}\r\n                    contentStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)', borderRadius: \"10px\"}}\r\n                    cursor={false}/>\r\n                  <Bar dataKey=\"Процент\">\r\n                      {\r\n                          movieChartData.map((entry, index) => <Cell fill={COLORS[index]} key={index}/>)\r\n                      }\r\n                  </Bar>\r\n                </BarChart>\r\n              </div>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default MovieBlock;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport './style.css';\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction LogRow ( {log, showUsername} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [log]\r\n    );\r\n\r\n    function translateActionType(action, actionResult){\r\n        switch (action) {\r\n            case 'score':\r\n                switch (actionResult) {\r\n                    case '0':\r\n                        return 'посмотрел(а)';\r\n                    case '-1':\r\n                        return 'не смотрела(а)';\r\n                    default:\r\n                        return 'оценил(а)';\r\n                }\r\n            case 'status':\r\n                return 'изменил(а) статус';\r\n            case 'review':\r\n                return 'оставил(а) отзыв на';\r\n            case 'spent_time':\r\n                return 'изменил(а) время прохождения';\r\n            case 'is_following':\r\n                if (actionResult === 'True')\r\n                    return 'подписан(а) на';\r\n                else\r\n                    return 'отписан(а) от';\r\n            default:\r\n                return action;\r\n        }\r\n    }\r\n\r\n    function translateType(type, actionType){\r\n        switch (type) {\r\n            case 'game':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'игру';\r\n                else\r\n                    return 'игры';\r\n            case 'movie':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'фильм';\r\n                else\r\n                    return 'фильма';\r\n            case 'show':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'сериал';\r\n                else\r\n                    return 'сериала';\r\n            case 'season':\r\n                return '';\r\n            case 'episode':\r\n                return '';\r\n            case 'user':\r\n                return 'пользователя';\r\n            default:\r\n                return type;\r\n        }\r\n    }\r\n\r\n    function nameToLink(name, type, id){\r\n        switch (type){\r\n            case 'game':\r\n                return  <a href={window.location.origin + '/game/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/game/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'movie':\r\n                return  <a href={window.location.origin + '/movie/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/movie/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'show':\r\n                return  <a href={window.location.origin + '/show/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/show/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'season':\r\n                return  <div style={{display: 'inline-block'}}>\r\n                            <a href={window.location.origin + '/show/' + id.show_id + '/season/' + id.season_number} \r\n                                className=\"logLink\"\r\n                                onClick={(e) => { history.push('/show/' + id.show_id  + '/season/' + id.season_number); e.preventDefault();}}>\r\n                                    {name.name}\r\n                            </a>\r\n                            &nbsp;сериала&nbsp;\r\n                            <a href={window.location.origin + '/show/' + id.show_id} \r\n                                className=\"logLink\"\r\n                                onClick={(e) => { history.push('/show/' + id.show_id); e.preventDefault();}}>\r\n                                    {name.parent_name}\r\n                            </a>\r\n                            \r\n                        </div>\r\n                        ;\r\n            case 'episode':\r\n                return  <div style={{display: 'inline-block'}}>\r\n                            \r\n                            <a href={window.location.origin + '/show/' + id.show_id + '/season/' + id.season_number + '/episode/' + id.episode_number} \r\n                                className=\"logLink\"\r\n                                onClick={(e) => { history.push('/show/' + id.show_id  + '/season/' + id.season_number + '/episode/' + id.episode_number); e.preventDefault();}}>\r\n                                    [s{id.season_number}e{id.episode_number}] серию\r\n                            </a>\r\n                            &nbsp;сериала&nbsp;\r\n                            <a href={window.location.origin + '/show/' + id.show_id} \r\n                                className=\"logLink\"\r\n                                onClick={(e) => { history.push('/show/' + id.show_id); e.preventDefault();}}>\r\n                                    {name.parent_name}\r\n                            </a>\r\n                            \r\n                        </div>\r\n                        ;\r\n            case 'user':\r\n                return  <a href={window.location.origin + '/user/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/user/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            default:\r\n                return name;\r\n        }\r\n    }\r\n\r\n    function userToLink(username, userID){\r\n            return  <a href={window.location.origin + '/user/' + userID} \r\n                        className=\"logLink\"\r\n                        onClick={(e) => { history.push('/user/' + userID); e.preventDefault();}}>\r\n                            {username}\r\n                    </a>;\r\n    }\r\n\r\n    function actionResultToStr(actionType, actionResult, target){\r\n        switch (actionType){\r\n            case 'score':\r\n                if (target !== 'episode' | actionResult > 0)\r\n                    return  <Rating stop={10}\r\n                                emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\"/>}\r\n                                fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" title={n}/>)}\r\n                                initialRating={actionResult}\r\n                                readonly={true}\r\n                            />\r\n                else\r\n                    return '';\r\n            case 'status':\r\n                return '\"' + actionResult + '\"';\r\n            case 'review':\r\n                return '\"' + actionResult + '\"';\r\n            case 'spent_time':\r\n                return actionResult + ' ' + intToHours(actionResult);\r\n            case 'is_following':\r\n                return '';\r\n            default:\r\n                return actionResult;\r\n        }\r\n    }\r\n\r\n    function parseDate(date){\r\n        let newDate = new Date(date);\r\n        return newDate.toLocaleTimeString(\"ru-RU\");\r\n    }\r\n\r\n    return(\r\n            <div className=\"logRow\">{parseDate(log.created)} {showUsername?userToLink(log.user, log.user_id):''} {translateActionType(log.action_type, log.action_result)} {translateType(log.type, log.action_type)} {nameToLink(log.target, log.type, log.target_id)}{(log.type==='user'|log.action_result===\"0\")?'':':'} {actionResultToStr(log.action_type, log.action_result, log.type)}</div>\r\n    )\r\n}\r\n\r\nfunction intToHours(number){\r\n    if (11 <= number && number <= 14)\r\n        return 'часов'\r\n    else if (number % 10 === 1)\r\n        return 'час'\r\n    else if (2 <= number % 10 && number % 10 <= 4)\r\n        return 'часа'\r\n    else\r\n        return 'часов'\r\n}\r\n\r\nexport default LogRow;","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\nimport './style.css';\r\nimport LogRow from './LogRow';\r\n\r\nfunction UserLogBlock ( {logs, showUsername, onChangePage} ) {\r\n    const [logsByDay, setLogsByDay] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    useEffect(() =>{\r\n            setLogsByDay(groupLogsByDay(logs.log));\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [logs]\r\n    );\r\n\r\n    function groupLogsByDay(logs){\r\n        let newLogs = [];\r\n\r\n        for (let i in logs){\r\n            let date = new Date(logs[i].created);\r\n\r\n            if (newLogs.length === 0)\r\n                newLogs.push({\r\n                    date: date,\r\n                    logs: [logs[i]]\r\n                });\r\n            else if (date.getDay() === newLogs[newLogs.length - 1].date.getDay())\r\n                newLogs[newLogs.length - 1].logs.push(logs[i]);\r\n            else\r\n                newLogs.push({\r\n                    date: date,\r\n                    logs: [logs[i]]\r\n                });\r\n        }\r\n        return newLogs;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            { \r\n                logsByDay.map((dayLog) => \r\n                    <div key={dayLog.logs[0].id} className=\"logDay\">\r\n                        <h5 className='logDate'>\r\n                            {dayLog.date.toLocaleDateString(\"ru-RU\")}\r\n                        </h5>\r\n                        <div className='logRows'>\r\n                            { dayLog.logs.map((log) => <LogRow log={log} showUsername={showUsername} key={log.id + log.created}/>) }\r\n                        </div>\r\n                    </div>\r\n                )  \r\n            } \r\n            <button \r\n                className=\"logPaginationButton\" \r\n                disabled={!logs.has_next_page}\r\n                onClick={() => {\r\n                        if (logs.has_next_page){\r\n                            onChangePage(currentPage+1);\r\n                            setCurrentPage(currentPage+1);\r\n                        } \r\n                    }}\r\n                >\r\n                <MDBIcon icon=\"arrow-down\" />\r\n            </button> \r\n\r\n            <button \r\n                className=\"logPaginationButton\" \r\n                disabled={currentPage===1}\r\n                onClick={() => {\r\n                        if (currentPage>1){\r\n                            onChangePage(currentPage-1);\r\n                            setCurrentPage(currentPage-1);\r\n                        } \r\n                    }}\r\n                >\r\n                <MDBIcon icon=\"arrow-up\" />\r\n            </button>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default UserLogBlock;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n  Cell, BarChart, Bar, XAxis, YAxis, Tooltip,\r\n} from 'recharts';\r\nimport {COLORS} from \"./Colors\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction ShowBlock ( {shows, stats} ) {\r\n  const [showChartData, setShowChartData] = useState([]);\r\n\r\n    const showColumns = [\r\n      {\r\n        label: 'Название',\r\n        field: 'name',\r\n        sort: 'disabled'\r\n      },\r\n      {\r\n        label: 'Статус',\r\n        field: 'status',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Оценка',\r\n        field: 'score',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Отзыв',\r\n        field: 'review',\r\n        sort: 'asc'\r\n      }\r\n    ];\r\n\r\n  const [showTableData, setShowTableData] = useState({\r\n      columns: showColumns,\r\n      rows: [\r\n      ]\r\n  });\r\n\r\n    useEffect(() =>{\r\n            if (shows)\r\n            {\r\n              setShowTableData({\r\n                columns: showColumns,\r\n                rows: shows.map((show) => {\r\n                    return {\r\n                            name: <a className=\"dataTable\" href={window.location.origin + '/show/' + show.show.tmdb_id}>{show.show.tmdb_name}</a>,\r\n                            name2: show.show.tmdb_name,\r\n                            status: show.status,\r\n                            score: show.score,\r\n                            review: show.review,\r\n                            /*clickEvent: (e) => {\r\n                                //window.open('/game/' + game.game.rawg_slug);\r\n                                history.push('/movie/' + movie.movie.tmdb_id)\r\n                            }*/\r\n                        }      \r\n                  })\r\n              });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [shows]\r\n    );\r\n\r\n    useEffect(() =>{\r\n      setShowChartData([]);\r\n      if (stats)\r\n      {\r\n        if (stats?.genres){\r\n            let newData = [];\r\n            for (let genre in stats.genres)\r\n              if (stats.genres[genre].spent_time_percent > 2)\r\n                newData.push({name: stats.genres[genre].name, 'Процент': stats.genres[genre].spent_time_percent});\r\n            newData = newData.sort((a, b) => a['Процент'] > b['Процент'] ? -1 : 1);\r\n            setShowChartData(newData);\r\n        }\r\n      }},\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [stats]\r\n      );\r\n\r\n    \r\n\r\n    return(\r\n        <div>\r\n            <p>Серий сериалов посмотрено: {stats?.count}, часов просмотра: {stats?.total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={showTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать сериалов на странице\"\r\n                searchLabel='Поиск'\r\n                />\r\n              <div hidden={showChartData.length < 1}>\r\n                <BarChart width={1000} height={300}\r\n                    data={showChartData}\r\n                    margin={{ top: 5, right: 10, left: 10, bottom: 20, }}\r\n                >\r\n                  <XAxis dataKey=\"name\" tickLine={false} tick={{ fill: \"rgb(238, 238, 238)\"}} interval={0} angle={-10} tickMargin={15}/>\r\n                  <YAxis domain={[0, 'dataMax']} tick={{ fill: \"rgb(238, 238, 238)\"}}/>\r\n                  <Tooltip itemStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)'}}\r\n                    contentStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)', borderRadius: \"10px\"}}\r\n                    cursor={false}/>\r\n                  <Bar dataKey=\"Процент\">\r\n                      {\r\n                          showChartData.map((entry, index) => <Cell fill={COLORS[index]} key={index}/>)\r\n                      }\r\n                  </Bar>\r\n                </BarChart>\r\n            </div>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default ShowBlock;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer\r\n} from \"mdbreact\";\r\nimport {\r\n    PieChart, Pie, Legend, Cell, Tooltip,\r\n  } from 'recharts';\r\nimport {COLORS} from \"./Colors\";\r\nimport './style.css';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport GameBlock from './GameBlock';\r\nimport FriendBlock from './FriendBlock';\r\nimport MovieBlock from './MovieBlock';\r\nimport UserLogBlock from './UserLogBlock';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\nimport ShowBlock from \"./ShowBlock\";\r\n\r\nconst LOG_ROWS_COUNT = 15; \r\n\r\n//const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#FA8542'];\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction UserPage ( { loggedIn, userInfo, \r\n                    userIsLoading, getUserInfo, currentUserInfo, setUserStatus, \r\n                    getUserLogs, userLogs, userLogsIsLoading,\r\n                    getUserFriendsLogs, userFriendsLogs, userFriendsLogsIsLoading}) \r\n{ \r\n    let { userID } = useParams();\r\n    const [activeCategory, setActiveCategory] = useState(\"Профиль\");\r\n    const [chartData, setChartData] = useState([]);\r\n    \r\n    useEffect(\r\n\t\t() => {\r\n            getUserInfo(userID);\r\n            getUserLogs(userID, 1, LOG_ROWS_COUNT);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[userID, getUserInfo, getUserLogs, getUserFriendsLogs]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                getUserFriendsLogs(userID, 1, LOG_ROWS_COUNT);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn, userID]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setChartData([]);\r\n            document.title = 'Профиль ' + userInfo.username;\r\n            if (userInfo.stats.games){\r\n                let newData = [];\r\n                if (userInfo.stats.games.total_spent_time > 0)\r\n                    newData.push({name: 'Часов в играх', value: userInfo.stats.games.total_spent_time});\r\n                if (userInfo.stats.movies.total_spent_time > 0)\r\n                    newData.push({name: 'Часов в фильмах', value: userInfo.stats.movies.total_spent_time});\r\n                if (userInfo.stats.episodes.total_spent_time > 0)\r\n                    newData.push({name: 'Часов в сериалах', value: userInfo.stats.episodes.total_spent_time});\r\n                setChartData(newData);\r\n            }\r\n\t\t},\r\n\t\t[userInfo]\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"bg searchBG\"/> \r\n            <LoadingOverlay\r\n                active={userIsLoading}\r\n                spinner\r\n                text='Загрузка...'\r\n                >\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                    <MDBCol className=\"userPage\"> \r\n                        <h1>Информация о пользователе {userInfo.username}</h1>\r\n                        <button \r\n                            hidden={currentUserInfo.username === userInfo.username}\r\n                            className='addFriendButton'\r\n                            onClick={ () => {\r\n                                setUserStatus({is_following: userInfo.is_followed?false:true}, userInfo.id);\r\n                            }}>\r\n                            {userInfo.is_followed?'Отписаться':'Подписаться'}\r\n                        </button>\r\n                        <CategoriesTab\r\n                            categories={['Профиль', 'Игры', 'Фильмы', 'Сериалы', 'Друзья']}\r\n                            activeColor='#7654de' \r\n                            onChangeCategory={(category) => { setActiveCategory(category) }}/>\r\n\r\n                            <div hidden={activeCategory!=='Профиль'}>\r\n                                <h4>Моя активность: </h4>\r\n                                <LoadingOverlay\r\n                                    active={userLogsIsLoading}\r\n                                    spinner\r\n                                    text='Загрузка активности...'\r\n                                    >\r\n\r\n                                    <div hidden={chartData.length < 1}>\r\n                                        <PieChart width={350} height={250} hidden={chartData.length < 1}>\r\n                                            <Pie dataKey=\"value\" \r\n                                                data={chartData} \r\n                                                cx=\"50%\" cy=\"50%\"\r\n                                                outerRadius={80} \r\n                                                fill=\"#8884d8\" \r\n                                                labelLine={true}\r\n                                                label\r\n                                                minAngle={5}\r\n                                                >\r\n                                            {\r\n                                                chartData.map((entry, index) => <Cell fill={COLORS[index]} key={index}/>)\r\n                                            }\r\n                                            </Pie>\r\n                                            <Tooltip itemStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)'}}\r\n                                                contentStyle={{color: 'rgb(238, 238, 238)', backgroundColor: 'rgb(30, 30, 30)', borderRadius: \"10px\"}}\r\n                                                cursor={false}/>\r\n                                            <Legend verticalAlign=\"bottom\" horizontalAlign=\"center\"/>\r\n                                        </PieChart>\r\n                                    </div>\r\n                                    <UserLogBlock logs={userLogs} onChangePage={(pageNumber) => getUserLogs(userID, pageNumber, LOG_ROWS_COUNT)}/>\r\n                                </LoadingOverlay>\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Игры'}>\r\n                                <GameBlock games={userInfo.games} stats={userInfo.stats.games} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Фильмы'}>\r\n                                <MovieBlock movies={userInfo.movies} stats={userInfo.stats.movies} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Сериалы'}>\r\n                                <ShowBlock shows={userInfo.shows} stats={userInfo.stats.episodes} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Друзья'}>\r\n                                <FriendBlock users={userInfo.followed_users?userInfo.followed_users:[]} />\r\n                                <h4>Активность друзей: </h4>\r\n                                <LoadingOverlay\r\n                                    active={userFriendsLogsIsLoading}\r\n                                    spinner\r\n                                    text='Загрузка активности...'\r\n                                    >\r\n                                    <UserLogBlock logs={userFriendsLogs} onChangePage={(pageNumber) => getUserFriendsLogs(userID, pageNumber, LOG_ROWS_COUNT)} showUsername={true}/>\r\n                                </LoadingOverlay>\r\n                            </div>\r\n                    </MDBCol>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n            </LoadingOverlay>\r\n        </div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    userIsLoading: selectors.getIsLoadingUserPageContent(state),\r\n    userInfo: selectors.getUserPageContent(state),\r\n    userLogs: selectors.getUserPageLogs(state),\r\n    userLogsIsLoading: selectors.getIsLoadingUserPageLogs(state),\r\n    userFriendsLogs: selectors.getUserPageFriendsLogs(state),\r\n    userFriendsLogsIsLoading: selectors.getIsLoadingUserPageFriendsLogs(state),\r\n    currentUserInfo: selectors.getUser(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        getUserInfo: (user_id) => {\r\n            dispatch(actions.requestUserPageContent(user_id));\r\n        },\r\n        setUserStatus: (is_following, userID) => {\r\n            dispatch(actions.setUserStatus(is_following, userID));\r\n        },\r\n        getUserLogs: (userID, page, resultsOnPage) => {\r\n            dispatch(actions.requestUserPageLogs(userID, page, resultsOnPage));\r\n        },\r\n        getUserFriendsLogs: (userID, page, resultsOnPage) => {\r\n            dispatch(actions.requestUserPageFriendsLogs(userID, page, resultsOnPage));\r\n        },\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage);\r\n","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nimport {\r\n\tMDBNavbar,\r\n    MDBNavItem,\r\n    MDBNavbarBrand,\r\n    MDBNavbarNav,\r\n    MDBNavLink,\r\n    MDBIcon,\r\n    MDBFormInline,\r\n    MDBDropdown,\r\n    MDBDropdownItem,\r\n    MDBDropdownMenu,\r\n    MDBDropdownToggle\r\n} from \"mdbreact\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\nfunction Navbar( {loggedIn, onLoginClick, onLogoutClick, onRegistrationClick, user} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n            <MDBNavbar style={{ backgroundColor: \"#4527a0\" }} dark expand=\"md\" fixed=\"top\">\r\n            <MDBNavbarBrand onClick={ (event) => {event.preventDefault(); history.push('/'); return false; }}>\r\n                <strong className=\"white-text\" style={{cursor: 'pointer'}}>Interests</strong>\r\n            </MDBNavbarBrand>\r\n            <MDBNavbarNav left>\r\n                \r\n            </MDBNavbarNav>\r\n\r\n            <MDBNavbarNav right>\r\n                <MDBNavItem>\r\n                    <MDBFormInline onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput').value); return false; }}>\r\n                        <div className=\"md-form my-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Найти\" aria-label=\"Найти\"\r\n                            id=\"searchInput\"/>\r\n                        </div>\r\n                    </MDBFormInline>\r\n                </MDBNavItem>\r\n\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onLoginClick} >\r\n                        <MDBIcon icon=\"sign-in-alt\" /> Войти\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onRegistrationClick} >\r\n                        <MDBIcon icon=\"user-plus\" /> Зарегистрироваться\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem hidden={!loggedIn} className=\"font-weight-bold\">\r\n                    <MDBDropdown>\r\n                        <MDBDropdownToggle nav caret>\r\n                        <span className=\"mr-2\">{user.username}</span>\r\n                        </MDBDropdownToggle>\r\n                        <MDBDropdownMenu>\r\n                            <MDBDropdownItem href={\"/user/\"+user.id}>Профиль</MDBDropdownItem>\r\n                            <MDBDropdownItem onClick={ onLogoutClick }>\r\n                                <MDBIcon icon=\"sign-out-alt\"/> Выйти\r\n                            </MDBDropdownItem>\r\n                        </MDBDropdownMenu>\r\n                    </MDBDropdown>\r\n                </MDBNavItem>\r\n            </MDBNavbarNav>\r\n        </MDBNavbar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    user: selectors.getUser(state)\r\n});\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonLoginClick: () => {\r\n\t\t\tdispatch(actions.openLoginForm());\r\n        },\r\n        onLogoutClick: () =>{\r\n            dispatch(actions.resetAuthorization());\r\n        },\r\n        onRegistrationClick: () =>{\r\n            dispatch(actions.openRegistrateForm());\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport HomePage from \"./components/HomePage\";\r\nimport GamePage from \"./components/Game/GamePage\";\r\nimport MoviePage from \"./components/Movie/MoviePage\";\r\nimport ShowPage from \"./components/Show/ShowPage\";\r\nimport SeasonPage from \"./components/Show/SeasonPage\";\r\nimport EpisodePage from \"./components/Show/EpisodePage\";\r\nimport SearchPage from \"./components/Search/SearchPage\";\r\nimport LoginForm from \"./components/Modals/LoginForm\";\r\nimport RegistrationForm from \"./components/Modals/RegistrationForm\";\r\nimport ResetPasswordForm from \"./components/Modals/ResetPasswordForm\";\r\nimport ConfirmPage from \"./components/ConfirmPage\";\r\nimport ConfirmPasswordPage from \"./components/ConfirmPasswordPage\";\r\nimport UserPage from \"./components/UserPage/UserPage\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar/>\r\n        <div className=\"navbar\"></div>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route exact path=\"/game/:id\" component={GamePage} />\r\n            <Route exact path=\"/movie/:id\" component={MoviePage} />\r\n            <Route exact path=\"/show/:id\" component={ShowPage} />\r\n            <Route exact path=\"/show/:show_id/season/:number\" component={SeasonPage} />\r\n            <Route exact path=\"/show/:show_id/season/:season_number/episode/:episode_number\" component={EpisodePage} />\r\n            <Route exact path=\"/search/:query\" component={SearchPage} />\r\n            <Route exact path=\"/confirm/\" component={ConfirmPage} />\r\n            <Route exact path=\"/confirm_password/\" component={ConfirmPasswordPage} />\r\n            <Route exact path=\"/user/:userID\" component={UserPage} />\r\n            <Route render={function () { return <h1>Not Found</h1>; }} />\r\n            \r\n        </Switch>\r\n      <ToastContainer position=\"top-center\" hideProgressBar newestOnTop closeOnClick/>\r\n      <LoginForm/>\r\n      <RegistrationForm/>\r\n      <ResetPasswordForm/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// \r\nexport default Routes;","import React, {useEffect} from \"react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { connect } from 'react-redux'; \r\nimport Routes from \"./Routes\";\r\nimport * as actions from \"./store/actions\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App({onLoad}) {\r\n\r\n  useEffect(\r\n    () => {\r\n        onLoad();\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"flyout\">\r\n        <main>\r\n          <Routes />\r\n        </main>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n    onLoad: () => {\r\n      dispatch(actions.checkAuthorization());\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore, \r\n  applyMiddleware, \r\n  //combineReducers,\r\n   compose } from 'redux';\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './store/reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk) ) );\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\nexport default store;\r\n\r\n"],"sourceRoot":""}