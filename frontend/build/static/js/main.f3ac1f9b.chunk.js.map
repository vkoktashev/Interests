{"version":3,"sources":["store/reducers.js","components/HomePage.js","settings.js","services/jwtAuth.js","services/requests.js","store/actions.js","store/actionTypes.js","components/Common/StatusButtonGroup.js","components/Common/FriendsActivityRow.js","components/Common/FriendsActivity.js","components/GamePage/GamePage.js","components/MoviePage/MoviePage.js","components/ShowPage/EpisodeRow.js","components/ShowPage/SeasonsBlock.js","components/ShowPage/ShowPage.js","components/SearchPage/CardGame.js","components/SearchPage/CardMovie.js","components/SearchPage/CardShow.js","components/Common/CardUser.js","components/Common/CategoriesTab.js","components/SearchPage/SearchPage.js","components/Modals/LoginForm.js","components/Modals/RegistrationForm.js","components/Modals/ResetPasswordForm.js","components/ConfirmPage.js","components/ConfirmPasswordPage.js","components/UserPage/GameBlock.js","components/UserPage/FriendBlock.js","components/UserPage/MovieBlock.js","components/UserPage/LogRow.js","components/UserPage/UserLogBlock.js","components/UserPage/UserPage.js","components/Navbar.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["initialState","Map","auth","loggedIn","user","username","email","id","content","game","main_info","rawg","name","background_image","background_image_additional","developers","hltb","game_image_url","user_info","status","review","score","spent_time","friends_info","movie","tmdb","title","poster_path","show","episode_run_time","searchContent","games","movies","shows","users","userPageContent","stats","userLogs","log","userFriendsLogs","openedPages","LoginForm","RegistrateForm","ResetPasswordForm","errors","registrate","gameRequest","movieRequest","userPage","resetPassword","confirmPassword","isLoading","contentGame","contentGameFriends","contentMovie","contentMovieFriends","contentShow","contentShowFriends","userPageLogs","userPageFriendsLogs","searchGames","searchMovies","searchShows","searchUsers","getLoggedIn","state","get","getUser","getContentGame","getContentGameFriends","getContentMovie","getContentMovieFriends","getContentShow","getSearchContentGames","getSearchContentMovies","getSearchContentShows","getSearchContentUsers","getAuthError","getRegistrateError","getGameRequestError","getMovieRequestError","getShowRequestError","showRequest","getResetPasswordError","getConfirmPasswordError","getLoginForm","getRegistrateForm","getResetPasswordForm","getIsLoadingContentGame","getIsLoadingContentGameFriends","getIsLoadingContentMovie","getIsLoadingContentMovieFriends","getIsLoadingContentShow","getIsLoadingSearchGames","getIsLoadingSearchMovies","getIsLoadingSearchShows","getIsLoadingSearchUsers","getIsLoadingUserPageContent","getIsLoadingUserPageLogs","getIsLoadingUserPageFriendsLogs","getUserPageContent","getUserPageLogs","getUserPageFriendsLogs","connect","selectors","className","style","marginTop","marginLeft","href","fontWeight","src","alt","BACKEND_URL","GET_TOKEN_URL","REFRESH_TOKEN_URL","REGISTRATE_URL","CONFIRM_URL","CONFIRM_PASSWORD_URL","GET_GAME_URL","GET_MOVIE_URL","GET_SHOW_URL","USER_INFO_URL","axiosConfig","headers","getToken","password","a","axios","post","urls","res","userData","jwt_decode","data","access","user_id","token","refreshToken","refresh","console","updateToken","registration","response","confirmation","uid64","patch","put","getGame","AuthStr","getMovie","getShow","setGameStatus","gameSlug","setMovieStatus","query","page","gamesCount","params","page_size","warn","getUserInfo","userID","setUserStatus","is_following","getUserLog","resultsOnPage","getUserFriendsLog","getGameFriends","slug","getMovieFriends","checkAuthorization","dispatch","localStorage","getItem","Date","now","type","setItem","resetAuthorization","removeItem","setLoading","setError","isError","error","defaults","common","StatusButtonGroup","statuses","activeColor","onChangeStatus","userStatus","useState","activeStatus","setActiveStatus","useEffect","map","key","backgroundColor","onClick","FriendsActivityRow","number","info","history","useHistory","window","location","origin","e","push","preventDefault","stop","emptySymbol","far","icon","size","fullSymbol","n","initialRating","readonly","hidden","FriendsActivity","friendInfo","updated_at","requestError","gameIsLoading","gameFriends","gameFriendsIsLoading","requestGame","Requests","then","result","toast","actions","requestGameFriends","openLoginForm","isOpen","getState","useParams","genres","setGenres","metascoreBlock","setMetascoreBlock","setReview","spentTime","setSpentTime","setDevelopers","date","setDate","gameplay_main_extra","gameplay_main","gameplay_comletionist","hltbInfo","setHtlbInfo","newGenres","i","length","metacritic","playtime","gameplay_completionist","newDevelopers","released","mas","split","newDate","document","backgroundImage","active","spinner","text","md","marginBottom","display","gameplay_main_unit","gameplay_main_extra_unit","gameplay_completionist_unit","fontSize","onChange","getElementById","value","paddingTop","dangerouslySetInnerHTML","__html","description","paddingLeft","label","event","target","outline","disabled","movieIsLoading","movieFriends","movieFriendsIsLoading","requestMovie","requestMovieFriends","companies","setCompanies","cast","setCast","director","setDirector","vote_average","production_companies","newCompanies","newCast","crew","newDirector","job","backdrop_path","release_date","runtime","tagline","overview","EpisodeRow","episode","season","showID","SeasonsBlock","seasons","hereSeasons","setHereSeasons","newSeasons","newSeason","episodes","episode_count","open","showIsLoading","requestShow","showStatus","setShowStatus","firstDate","setFirstDate","lastDate","setLastDate","first_air_date","last_air_date","original_name","number_of_seasons","number_of_episodes","CardGame","setName","newName","substr","CardMovie","CardShow","CardUser","CategoriesTab","categories","onChangeCategory","activeCategory","setActiveCategory","category","color","height","gamesIsLoading","moviesIsLoading","showsIsLoading","usersIsLoading","searchGame","searchMovie","results","searchShow","queryText","setQueryText","gamesCards","setGamesCards","moviesCards","setMoviesCards","showsCards","setShowsCards","usersCards","setUsersCards","gamesPage","setGamesPage","moviesPage","setMoviesPage","showsPage","setShowsPage","onSubmit","placeholder","aria-label","authError","closeForm","logIn","login","openResetPasswordForm","setPassword","setLogin","toggle","centered","htmlFor","registrateArror","passwordConfirm","setPasswordConfirm","setEmail","outlineColor","resetPasswordError","confirmEmailRequest","success","search","URLSearchParams","confirmPasswordError","GameBlock","gameColumns","field","sort","columns","rows","gameTableData","setGameTableData","rawg_slug","rawg_name","name2","parseFloat","games_count","games_total_spent_time","striped","bordered","small","barReverse","noBottomColumns","noRecordsFoundLabel","paginationLabel","entriesLabel","searchLabel","FriendBlock","MovieBlock","movieColumns","movieTableData","setMovieTableData","tmdb_id","tmdb_name","movies_count","movies_total_spent_time","LogRow","showUsername","created","toLocaleTimeString","action","actionResult","translateActionType","action_type","action_result","actionType","translateType","nameToLink","target_id","actionResultToStr","UserLogBlock","logs","onChangePage","logsByDay","setLogsByDay","currentPage","setCurrentPage","newLogs","getDay","groupLogsByDay","dayLog","toLocaleDateString","has_next_page","userIsLoading","userInfo","userLogsIsLoading","userFriendsLogsIsLoading","currentUserInfo","getUserLogs","getUserFriendsLogs","is_followed","pageNumber","followed_users","onLoginClick","onLogoutClick","onRegistrationClick","dark","expand","fixed","cursor","left","right","to","nav","caret","Routes","exact","path","component","HomePage","GamePage","MoviePage","ShowPage","SearchPage","ConfirmPage","ConfirmPasswordPage","UserPage","render","position","hideProgressBar","newestOnTop","closeOnClick","React","Component","onLoad","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","setIn","applyMiddleware","thunk","ReactDOM","URL","process","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f3ac1f9b.chunk.js","sourcesContent":["import * as types from './actionTypes';\r\nimport { Map } from 'immutable';\r\n\r\n// Создаем reducer с начальным состоянием.\r\nconst initialState = Map(\r\n    {\r\n        auth: { loggedIn: false },\r\n        user: { username:\"\", email:\"\", id: null },\r\n        content: { \r\n            game: { main_info:{ rawg: { name: \"\", background_image: \"\", background_image_additional: \"\", developers: [{}], },\r\n                                hltb:{ game_image_url: \"\"  },\r\n                                user_info:{ status: null, review: \"\", score: 0, spent_time: 0 } },\r\n                    friends_info: {  friends_info: []  }\r\n            },\r\n            movie: { main_info:{ tmdb: {  title: \"\", poster_path: \"\", developers: [{}],  },\r\n                                user_info:{ status: null,  review: \"\", score: 0, spent_time: 0  } },\r\n                    friends_info: { friends_info: []  }\r\n            },\r\n            show: { main_info:{ tmdb: {  title: \"\", poster_path: \"\",developers: [{}], episode_run_time: []},\r\n                                user_info:{ status: null, review: \"\", score: 0, spent_time: 0 } },\r\n                    friends_info: { friends_info: [] }\r\n            }  \r\n        },\r\n        searchContent: { games: [], movies: [], shows: [], users: []\r\n        },\r\n        userPageContent: {\r\n            user: {\r\n                stats: {}\r\n            },\r\n            userLogs: {log: []},\r\n            userFriendsLogs: {log: []},\r\n        },\r\n        openedPages: { LoginForm: false, RegistrateForm: false, ResetPasswordForm: false },\r\n        errors: {auth: false, registrate: false, gameRequest: false, movieRequest: false, userPage: false, resetPassword: false, confirmPassword: false },\r\n        isLoading: {    contentGame: false, contentGameFriends: false,\r\n                        contentMovie: false, contentMovieFriends: false,\r\n                        contentShow: false, contentShowFriends: false,\r\n                        userPageContent: false, userPageLogs: false, userPageFriendsLogs: false,\r\n                        searchGames: false, searchMovies: false, searchShows: false,  searchUsers: false,\r\n                    }\r\n    }\r\n);\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    //Редьюсеры пользовательской информации\r\n    case types.SET_USER: return state.setIn(['user'], action.user);\r\n    case types.SET_AUTH: return state.setIn(['auth'], action.auth);\r\n\r\n    //Редьюсеры информации об игре\r\n    case types.SET_CONTENT_GAME: return state.setIn(['content', 'game', 'main_info'], action.game);\r\n    case types.SET_CONTENT_GAME_FRIENDS: return state.setIn(['content', 'game', 'friends_info'], action.info);\r\n    case types.SET_CONTENT_GAME_USERINFO: return state.setIn(['content', 'game', 'main_info','user_info'], action.user_info);\r\n\r\n    //Редьюсеры информации о фильме\r\n    case types.SET_CONTENT_MOVIE: return state.setIn(['content', 'movie', 'main_info'], action.movie);\r\n    case types.SET_CONTENT_MOVIE_FRIENDS: return state.setIn(['content', 'movie', 'friends_info'], action.info);\r\n    case types.SET_CONTENT_MOVIE_USERINFO: return state.setIn(['content', 'movie', 'main_info', 'user_info'], action.user_info);\r\n\r\n    //Редьюсеры информации о сериале\r\n    case types.SET_CONTENT_SHOW: return state.setIn(['content', 'show', 'main_info'], action.show);\r\n    case types.SET_CONTENT_SHOW_FRIENDS: return state.setIn(['content', 'show', 'friends_info'], action.info);\r\n    case types.SET_CONTENT_SHOW_USERINFO: return state.setIn(['content', 'show', 'main_info', 'user_info'], action.user_info);\r\n\r\n    //Редьюсеры результатов поиска\r\n    case types.SET_SEARCH_CONTENT_GAMES: return state.setIn(['searchContent', 'games'], action.games);\r\n    case types.SET_SEARCH_CONTENT_MOVIES: return state.setIn(['searchContent', 'movies'], action.movies);\r\n    case types.SET_SEARCH_CONTENT_SHOWS: return state.setIn(['searchContent', 'shows'], action.shows);\r\n    case types.SET_SEARCH_CONTENT_USERS: return state.setIn(['searchContent', 'users'], action.users);\r\n\r\n    //Редьюсеры страницы профиля\r\n    case types.SET_USER_PAGE_CONTENT: return state.setIn(['userPageContent', 'user'], action.content);\r\n    case types.SET_USER_PAGE_FOLLOWING: return state.setIn(['userPageContent', 'user', 'is_followed'], action.is_following);\r\n    case types.SET_USER_PAGE_LOGs:  return state.setIn(['userPageContent', 'userLogs'], action.logs);\r\n    case types.SET_USER_PAGE_FRIENDS_LOGS: return state.setIn(['userPageContent', 'userFriendsLogs'], action.logs);\r\n\r\n    //Редьюсеры состояния всплывающих окон\r\n    case types.SET_LOGINFORM:  return state.setIn(['openedPages', 'LoginForm'], action.isOpen);\r\n    case types.SET_REGISTRATEFORM:  return state.setIn(['openedPages', 'RegistrateForm'], action.isOpen);\r\n    case types.SET_RESET_PASSWORD_FORM:  return state.setIn(['openedPages', 'ResetPasswordForm'], action.isOpen);\r\n\r\n    //Редьюсеры ошибок\r\n    case types.AUTH_ERROR:  return state.setIn(['errors', 'auth'], action.error);\r\n    case types.REGISTRATE_ERROR:  return state.setIn(['errors', 'registrate'], action.error);\r\n    case types.GAME_REQUEST_ERROR: return state.setIn(['errors', 'gameRequest'], action.error);\r\n    case types.MOVIE_REQUEST_ERROR:  return state.setIn(['errors', 'movieRequest'], action.error);\r\n    case types.SHOW_REQUEST_ERROR:  return state.setIn(['errors', 'showRequest'], action.error);\r\n    case types.USER_PAGE_ERROR: return state.setIn(['errors', 'userPage'], action.error);\r\n    case types.RESET_PASSWORD_ERROR: return state.setIn(['errors', 'resetPassword'], action.error);\r\n    case types.CONFIRM_PASSWORD_ERROR: return state.setIn(['errors', 'confirmPassword'], action.error);\r\n\r\n    //Редьюсеры состояния загрузки\r\n    case types.SET_IS_LOADING_CONTENT_GAME:  return state.setIn(['isLoading', 'contentGame'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_GAME_FRIENDS:  return state.setIn(['isLoading', 'contentGameFriends'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_MOVIE:  return state.setIn(['isLoading', 'contentMovie'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_MOVIE_FRIENDS:  return state.setIn(['isLoading', 'contentMovieFriends'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_SHOW:  return state.setIn(['isLoading', 'contentShow'], action.isLoading);\r\n    case types.SET_IS_LOADING_CONTENT_SHOW_FRIENDS:  return state.setIn(['isLoading', 'contentShowFriends'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_GAMES:  return state.setIn(['isLoading', 'searchGames'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_MOVIES:  return state.setIn(['isLoading', 'searchMovies'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_SHOWS:  return state.setIn(['isLoading', 'searchShows'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_CONTENT:  return state.setIn(['isLoading', 'userPageContent'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_LOGS: return state.setIn(['isLoading', 'userPageLogs'], action.isLoading);\r\n    case types.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS:  return state.setIn(['isLoading', 'userPageFriendsLogs'], action.isLoading);\r\n    case types.SET_IS_LOADING_SEARCH_USERS: return state.setIn(['isLoading', 'searchUsers'], action.isLoading);\r\n\r\n    default: return state;\r\n  }\r\n}\r\n\r\n//Селекторы пользовательской информации\r\nexport function getLoggedIn(state) { return state.get('auth').loggedIn; }\r\nexport function getAuth(state) { return state.get('auth');}\r\nexport function getUser(state) {  return state.get('user'); }\r\n\r\n//Селекторы информации о контенте\r\nexport function getContentGame(state) {  return state.get('content').game.main_info; }\r\nexport function getContentGameFriends(state) {  return state.get('content').game.friends_info; }\r\nexport function getContentMovie(state) { return state.get('content').movie.main_info; }\r\nexport function getContentMovieFriends(state) {  return state.get('content').movie.friends_info; }\r\nexport function getContentShow(state) { return state.get('content').show.main_info; }\r\nexport function getContentShowFriends(state) {  return state.get('content').show.friends_info; }\r\n\r\n//Селекторы поисковых результатов\r\nexport function getSearchContentGames(state) { return state.get('searchContent').games;}\r\nexport function getSearchContentMovies(state) { return state.get('searchContent').movies; }\r\nexport function getSearchContentShows(state) { return state.get('searchContent').shows; }\r\nexport function getSearchContentUsers(state) { return state.get('searchContent').users; }\r\n\r\n//Селекторы ошибок\r\nexport function getAuthError(state) { return state.get('errors').auth; }\r\nexport function getRegistrateError(state) { return state.get('errors').registrate; }\r\nexport function getGameRequestError(state) {  return state.get('errors').gameRequest; }\r\nexport function getMovieRequestError(state) { return state.get('errors').movieRequest; }\r\nexport function getShowRequestError(state) { return state.get('errors').showRequest; }\r\nexport function getUserPageError(state) {  return state.get('errors').userPage;}\r\nexport function getResetPasswordError(state) {  return state.get('errors').resetPassword;}\r\nexport function getConfirmPasswordError(state) {  return state.get('errors').confirmPassword;}\r\n\r\n//Селекторы состояния высплывающих окон\r\nexport function getLoginForm(state) { return state.get('openedPages').LoginForm; }\r\nexport function getRegistrateForm (state) { return state.get('openedPages').RegistrateForm; }\r\nexport function getResetPasswordForm (state) { return state.get('openedPages').ResetPasswordForm; }\r\n\r\n//Селекторы состояния загрузки\r\nexport function getIsLoadingContentGame(state) { return state.get('isLoading').contentGame; }\r\nexport function getIsLoadingContentGameFriends(state) { return state.get('isLoading').contentGameFriends; }\r\nexport function getIsLoadingContentMovie(state) {  return state.get('isLoading').contentMovie; }\r\nexport function getIsLoadingContentMovieFriends(state) { return state.get('isLoading').contentMovieFriends; }\r\nexport function getIsLoadingContentShow(state) {  return state.get('isLoading').contentShow; }\r\nexport function getIsLoadingContentShowFriends(state) { return state.get('isLoading').contentShowFriends; }\r\nexport function getIsLoadingSearchGames(state) { return state.get('isLoading').searchGames; }\r\nexport function getIsLoadingSearchMovies(state) { return state.get('isLoading').searchMovies; }\r\nexport function getIsLoadingSearchShows(state) { return state.get('isLoading').searchShows; }\r\nexport function getIsLoadingSearchUsers(state) { return state.get('isLoading').searchUsers;}\r\nexport function getIsLoadingSearchAll(state) { return (state.get('isLoading').searchUsers || state.get('isLoading').searchMovies || state.get('isLoading').searchGames); }\r\nexport function getIsLoadingUserPageContent(state) { return state.get('isLoading').userPageContent; }\r\nexport function getIsLoadingUserPageLogs(state) { return state.get('isLoading').userPageLogs; }\r\nexport function getIsLoadingUserPageFriendsLogs(state) { return state.get('isLoading').userPageFriendsLogs; }\r\n\r\n//Селекторы страницы профиля\r\nexport function getUserPageContent(state){  return state.get('userPageContent').user; }\r\nexport function getUserPageLogs(state){ return state.get('userPageContent').userLogs; }\r\nexport function getUserPageFriendsLogs(state){  return state.get('userPageContent').userFriendsLogs; }","import React from \"react\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\n//import * as actions from '../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction HomePage ({user}) \r\n{\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n\t\t\t\t<h2 style={{marginTop: '70px', marginLeft: '30px'}}>Добро пожаловать на Interests!</h2>\r\n\t\t\t\t<h4 style={{marginLeft: '30px'}}>\r\n\t\t\t\t\tГлавная страница ещё не готова, однако можно воспользоваться <a href='/search/example' style={{fontWeight: '600'}}>поиском</a> или проверить свой <a href={\"/user/\"+user.id} style={{fontWeight: '600'}}>профиль</a>, если вы уже зарегистрированы\r\n\t\t\t\t</h4>\r\n\t\t\t\t<img src=\"images/cool.jpg\" style={{marginLeft: '20px'}} alt=\"Картинка\"/>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: selectors.getUser(state)\r\n});\r\n\r\n  const mapDispatchToProps = () => {\r\n\treturn {\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","/** Время жизни токена в миллисекундах, после истечения которого будет запрошен новый токен*/\r\nexport const TOKEN_LIFETIME = 86000000; \r\n/**Адрес сервера*/\r\nexport const BACKEND_URL = \"http://35.193.124.214:8001/\";\r\n/**Адрес получения токена */\r\nexport const GET_TOKEN_URL = BACKEND_URL + \"users/auth/login/\"; \r\n/**Адрес обновления токена */\r\nexport const REFRESH_TOKEN_URL = BACKEND_URL + \"users/auth/refresh-token/\";\r\n/**Адрес регистрации */\r\nexport const REGISTRATE_URL = BACKEND_URL + \"users/auth/signup/\";\r\n/**Адрес подтверждения почты */\r\nexport const CONFIRM_URL = BACKEND_URL + \"users/auth/confirm_email/\";\r\n/**Адрес сброса пароля */\r\nexport const RESET_PASSWORD_URL = BACKEND_URL + \"users/user/password_reset/\"; \r\n/**Адрес подтверждения сброса пароля */\r\nexport const CONFIRM_PASSWORD_URL = BACKEND_URL + \"users/user/confirm_password_reset/\";\r\n/**Адрес запроса игры */\r\nexport const GET_GAME_URL = BACKEND_URL + \"games/game/\";\r\n/**Адрес поиска игр */\r\nexport const SEARCH_GAMES_URL = BACKEND_URL + \"games/search/\";\r\n/**Адрес запроса фильма */\r\nexport const GET_MOVIE_URL = BACKEND_URL + \"movies/movie/\";\r\n/**Адрес поиска фильмов */\r\nexport const SEARCH_MOVIES_URL = BACKEND_URL + \"movies/search/\";\r\n/**Адрес запроса сериала */\r\nexport const GET_SHOW_URL = BACKEND_URL + \"shows/show/\";\r\n/**Адрес поиска сериалов */\r\nexport const SEARCH_SHOWS_URL = BACKEND_URL + \"shows/search/\";\r\n/**Адрес получения информации о пользователе */\r\nexport const USER_INFO_URL = BACKEND_URL + \"users/user/\";\r\n/**Адрес поиска пользователей */\r\nexport const SEARCH_USERS_URL = BACKEND_URL + \"users/search/\"; \r\n","import axios from \"axios\";\r\nimport jwt_decode from 'jwt-decode';\r\nimport * as urls from '../settings';\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\n/**\r\n * ПОлучение токена авторизации. Токен сохраняется в localStorage\r\n * @param {string} username Имя пользователя\r\n * @param {string} password Пароль \r\n */\r\nexport async function getToken(username, password){\r\n    try{\r\n        const res = await axios.post(urls.GET_TOKEN_URL, {\r\n                    username: username,\r\n                    password: password \r\n                }, axiosConfig);\r\n\r\n        let userData = jwt_decode(res.data.access);\r\n        let user = {username: userData.username, id: userData.user_id, email: userData.email}\r\n\r\n        return {token: res.data.access, refreshToken: res.data.refresh, user: user};\r\n    }catch(e){\r\n        console.log(\"axios error: \" + e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Функция обновления токена\r\n */\r\nexport async function updateToken(refreshToken){\r\n    if (typeof refreshToken !== 'undefined' & refreshToken != null)\r\n        try{\r\n            const res = await axios.post(urls.REFRESH_TOKEN_URL, {\r\n                        refresh: refreshToken\r\n                    }, axiosConfig);\r\n                    \r\n            let userData = jwt_decode(res.data.access);\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n\r\n            return {token: res.data.access, user: user};\r\n        }catch(e){\r\n            console.log(\"exios error: \" + e);\r\n            return null;\r\n        }\r\n    return null;\r\n}\r\n\r\nexport async function registration(username, email, password) {\r\n   try{\r\n        const res = await axios.post(urls.REGISTRATE_URL, \r\n            {  \r\n                username: username,\r\n                email: email, \r\n                password: password \r\n            }, axiosConfig);\r\n        let data = res.data;\t\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e.response);\r\n        return e.response;\r\n    }\r\n}\r\n\r\nexport async function confirmation(uid64, token) {\r\n    try{\r\n        const res = await axios.patch(urls.CONFIRM_URL + '?uid64=' + uid64 + '&token=' + token);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }\r\n\r\n export async function resetPassword(email) {\r\n    try{\r\n        const res = await axios.put(urls.RESET_PASSWORD_URL,  {  email: email }, axiosConfig);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }\r\n\r\n export async function confirmPassword(token, password) {\r\n    try{\r\n        const res = await axios.patch(urls.CONFIRM_PASSWORD_URL + '?reset_token=' + token,  { password: password }, axiosConfig);\r\n        return res;\r\n     }catch(e){\r\n         console.log(\"AXIOS ERROR: \", e.response);\r\n         return e.response;\r\n     }\r\n }","import axios from \"axios\";\r\nimport {GET_GAME_URL, SEARCH_GAMES_URL, USER_INFO_URL, SEARCH_MOVIES_URL, GET_MOVIE_URL, SEARCH_USERS_URL, SEARCH_SHOWS_URL, GET_SHOW_URL} from \"../settings\";\r\n\r\nlet axiosConfig = {\r\n    headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8'\r\n    }\r\n};\r\n\r\naxios.defaults.headers.common = {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getGame(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_GAME_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о фильме\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID фильма  \r\n * @returns {object} Информация о фильме\r\n */\r\nexport async function getMovie(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию о сериале\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID сериала  \r\n * @returns {object} Информация о сериале\r\n */\r\nexport async function getShow(token, id) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_SHOW_URL + id + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_SHOW_URL + id + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса игры\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус игры\r\n * @param {string} gameSlug Слаг игры\r\n */\r\nexport async function setGameStatus(token, gameSlug, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n\r\n        const res = await axios.put(GET_GAME_URL + gameSlug + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса фильма\r\n * @param {string} token Токен доступа\r\n * @param {object} user_info Статус фильма\r\n * @param {string} movieID ID фильма\r\n */\r\nexport async function setMovieStatus(token, id, user_info){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        console.log(user_info);\r\n        const res = await axios.put(GET_MOVIE_URL + id + \"/\", \r\n            user_info, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск игр\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchGames(query, page, gamesCount){\r\n    try{\r\n        const res = await axios.get(SEARCH_GAMES_URL, { params : {query: query, page: page, page_size: gamesCount} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n        console.warn(res.data);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск фильмов\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchMovies(query, page){\r\n    try{\r\n        const res = await axios.get(SEARCH_MOVIES_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n            console.log(res);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск сериалов\r\n * @param {string} query Поисковый запрос\r\n * @param {int} page Страница поиска\r\n */\r\nexport async function searchShows(query, page){\r\n    try{\r\n        const res = await axios.get(SEARCH_SHOWS_URL, { params : {query: query, page: page} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n            console.log(res);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на поиск пользователей\r\n * @param {string} query Поисковый запрос\r\n */\r\nexport async function searchUsers(query){\r\n    try{\r\n        const res = await axios.get(SEARCH_USERS_URL, { params : {query: query} }, \r\n            { 'headers': { 'Content-Type': 'application/json;charset=UTF-8' } });\r\n            console.log(res);\r\n        return res.data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об игре\r\n * @param {string} token Токен доступа\r\n * @param {string} id ID игры  \r\n * @returns {object} Информация об игре\r\n */\r\nexport async function getUserInfo(token, userID) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/\", axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос на изменение статуса пользовтеля (добавить в друзья и тд)\r\n * @param {string} token Токен доступа\r\n * @param {boolean} is_following Статус фильма\r\n * @param {string} userID ID пользовтеля\r\n */\r\nexport async function setUserStatus(token, is_following, userID){\r\n    try{\r\n        var AuthStr = 'Bearer ' + token;\r\n        const res = await axios.put(USER_INFO_URL + userID + \"/follow/\", \r\n            is_following, { headers: { 'Authorization': AuthStr } });\r\n        console.log(res); \r\n        \r\n        if (res.status === 204 || res.status === 200 || res.status === 201)\r\n            return res.data;\r\n        else return null;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий лог пользователя\r\n * @param {string} userID ID пользователя\r\n * @param {string} page страница \r\n * @param {int} resultsOnPage количество результатов на странице \r\n */\r\nexport async function getUserLog(token, userID, page, resultsOnPage) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/log/\", { params : { page: page, page_size: resultsOnPage } }, { 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/log/\", { params : { page: page, page_size: resultsOnPage } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий лог друзей пользователя\r\n * @param {string} userID ID пользователя\r\n * @param {int} page страница\r\n * @param {int} resultsOnPage количество результатов на странице \r\n */\r\nexport async function getUserFriendsLog(token, userID, page, resultsOnPage) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/friends_log/\", { params : { page: page, page_size: resultsOnPage }, 'headers': { 'Authorization': AuthStr } });\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(USER_INFO_URL + userID + \"/friends_log/\", { params : { page: page, page_size: resultsOnPage } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для игры\r\n * @param {string} slug slug игры\r\n * @param {int} page страница\r\n */\r\nexport async function getGameFriends(token, slug, page) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_GAME_URL + slug + \"/friends_info/\", { params : { page: page } , 'headers': { 'Authorization': AuthStr } });\r\n            console.log(res);\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_GAME_URL + slug + \"/friends_info/\", { params : { page: page } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Запрос к бд, получающий информацию об оценках друзей для фильма\r\n * @param {string} id id фильма\r\n * @param {int} page страница\r\n */\r\nexport async function getMovieFriends(token, id, page) {\r\n    let data;\r\n    try{\r\n        if (token){\r\n            var AuthStr = 'Bearer ' + token;\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/friends_info/\", { params : { page: page } , 'headers': { 'Authorization': AuthStr } });\r\n            console.log(res);\r\n            data = res.data;\r\n        }else{\r\n            const res = await axios.get(GET_MOVIE_URL + id + \"/friends_info/\", { params : { page: page } }, axiosConfig);\r\n            data = res.data;\r\n        }\r\n        return data;\r\n    }catch(e){\r\n        console.log(\"AXIOS ERROR: \", e);\r\n        return null;\r\n    }\r\n}","import * as actionTypes from './actionTypes';\r\nimport * as selectors from './reducers';\r\nimport * as auth from \"../services/jwtAuth\";\r\nimport {TOKEN_LIFETIME} from \"../settings\";\r\nimport * as Requests from \"../services/requests\";\r\nimport { toast } from \"react-toastify\";\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nexport function tryAuth(login, password) {\r\n    return async(dispatch) => {\r\n        \r\n        setError(dispatch, actionTypes.AUTH_ERROR, false);\r\n\r\n      try {\r\n        const res = await auth.getToken(login, password);\r\n        if (res !== null){\r\n            localStorage.setItem('refreshToken', res.refreshToken);\r\n            localStorage.setItem('token', res.token);\r\n            localStorage.setItem('tokenTime', Date.now());\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: res.user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_LOGINFORM,\r\n                isOpen: false \r\n            });\r\n        }else{\r\n            setError(dispatch, actionTypes.AUTH_ERROR, true);\r\n        }\r\n            \r\n      }catch (error) {\r\n        console.error(error);\r\n        setError(dispatch, actionTypes.AUTH_ERROR, true);\r\n      }\r\n    };\r\n}\r\n\r\nexport function checkAuthorization(){\r\n    return async(dispatch) => {\r\n        if (localStorage.getItem('token') === null | Date.now() - localStorage.getItem('tokenTime') > TOKEN_LIFETIME){\r\n            const res = await auth.updateToken(localStorage.getItem(\"refreshToken\"));\r\n            if (res !== null){\r\n                dispatch({\r\n                    type: actionTypes.SET_AUTH,\r\n                    auth: { loggedIn: true }, \r\n                });\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: res.user, \r\n                });\r\n                localStorage.setItem('token', res.token);\r\n                localStorage.setItem('tokenTime', Date.now());\r\n                return true;\r\n            }else{\r\n                //toast.warn(\"Произошла ошибка авторизации. Зайдите ещё раз\");\r\n                dispatch(resetAuthorization());\r\n                return false;\r\n            } \r\n        }else{\r\n            let userData = jwt_decode(localStorage.getItem('token'));\r\n            let user = {username: userData.username, id: userData.user_id, email: userData.email};\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: user, \r\n            });\r\n            dispatch({\r\n                type: actionTypes.SET_AUTH,\r\n                auth: { loggedIn: true }, \r\n            });\r\n            return true;\r\n        }\r\n            \r\n    }\r\n}\r\n\r\nexport function resetAuthorization(){\r\n    return async(dispatch) => {\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('tokenTime');\r\n        dispatch({\r\n            type: actionTypes.SET_AUTH,\r\n            auth: { loggedIn: false }, \r\n        });\r\n        dispatch({\r\n            type: actionTypes.SET_USER,\r\n            user: { username:\"\", id: null, email:\"\" }, \r\n        });\r\n    }\r\n}\r\n\r\nexport function registrationRequest(username, email, password){\r\n    return async(dispatch) => {\r\n        setError(dispatch, actionTypes.REGISTRATE_ERROR, false);\r\n        auth.registration(username, email, password).then((result) => {\r\n            console.log(result);\r\n            if (result.status === 201){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: { login: result.username, email: result.email }, \r\n                });\r\n            }\r\n            else{\r\n                for (let error in result.data)\r\n                    toast.error(result.data[error][0]);\r\n                \r\n                setError(dispatch, actionTypes.REGISTRATE_ERROR, true);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function confirmEmailRequest(uid64, token){\r\n    return async() => {\r\n        auth.confirmation(uid64, token).then((result) => {\r\n            console.log(result);\r\n            if (result.status === 200){\r\n                toast.success(\"Почта подтверждена!\");\r\n            }\r\n            else{\r\n                if (result.data)\r\n                    toast.error(result.data.error);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestGame(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME, true);\r\n        setError(dispatch, actionTypes.GAME_REQUEST_ERROR, false);\r\n        Requests.getGame(localStorage.getItem('token'), id).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME,\r\n                    game: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Игра не найдена!\");\r\n                setError(dispatch, actionTypes.GAME_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME, false);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport function requestGameFriends(slug, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME_FRIENDS, true);\r\n        Requests.getGameFriends(localStorage.getItem('token'), slug, page).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_GAME_FRIENDS,\r\n                    info: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_GAME_FRIENDS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestMovie(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE, true);\r\n        setError(dispatch, actionTypes.MOVIE_REQUEST_ERROR, false);\r\n        Requests.getMovie(localStorage.getItem('token'), id).then((result) => {\r\n            console.log(result);\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_MOVIE,\r\n                    movie: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Фильм не найден!\");\r\n                setError(dispatch, actionTypes.MOVIE_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestMovieFriends(id, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE_FRIENDS, true);\r\n        Requests.getMovieFriends(localStorage.getItem('token'), id, page).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_MOVIE_FRIENDS,\r\n                    info: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_MOVIE_FRIENDS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestShow(id){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, true);\r\n        setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, false);\r\n        Requests.getShow(localStorage.getItem('token'), id).then((result) => {\r\n            console.log(result);\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW,\r\n                    show: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Сериал не найден!\");\r\n                setError(dispatch, actionTypes.SHOW_REQUEST_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW, false);\r\n        });\r\n    }\r\n}\r\n\r\n/*export function requestShowFriends(id, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_FRIENDS, true);\r\n        Requests.getMovieFriends(localStorage.getItem('token'), id, page).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_CONTENT_SHOW_FRIENDS,\r\n                    info: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_CONTENT_SHOW_FRIENDS, false);\r\n        });\r\n    }\r\n}*/\r\n\r\nexport function setGameStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setGameStatus(localStorage.getItem('token'), selectors.getContentGame(getState()).rawg.slug, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_GAME_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function requestUserPageContent(username){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT, true);\r\n        setError(dispatch, actionTypes.USER_PAGE_ERROR, false);\r\n        Requests.getUserInfo(localStorage.getItem('token'), username).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_CONTENT,\r\n                    content: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Профиль не найден!\");\r\n                setError(dispatch, actionTypes.USER_PAGE_ERROR, true);\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_CONTENT, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestUserPageLogs(userID, page, resultsOnPage){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_LOGS, true);\r\n        Requests.getUserLog(localStorage.getItem('token'), userID, page, resultsOnPage).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_LOGs,\r\n                    logs: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n                \r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_LOGS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function requestUserPageFriendsLogs(userID, page, resultsOnPage){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS, true);\r\n        Requests.getUserFriendsLog(localStorage.getItem('token'), userID, page, resultsOnPage).then((result) => {\r\n            if (result != null){\r\n                dispatch({\r\n                    type: actionTypes.SET_USER_PAGE_FRIENDS_LOGS,\r\n                    logs: result, \r\n                });\r\n            }\r\n            else{\r\n                toast.error(\"Ошибка загрузки логов!\");\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchGames(query, page, gamesCount){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_GAMES, true);\r\n        Requests.searchGames(query, page, gamesCount).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_GAMES,\r\n                    games: result, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_GAMES, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchMovies(query, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_MOVIES, true);\r\n        Requests.searchMovies(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска фильмов\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_MOVIES,\r\n                    movies: result.results, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_MOVIES, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function searchShows(query, page){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_SHOWS, true);\r\n        Requests.searchShows(query, page).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска сериалов\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_SHOWS,\r\n                    shows: result.results, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_SHOWS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setMovieStatus(user_info){\r\n    return async(dispatch, getState) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setMovieStatus(localStorage.getItem('token'), selectors.getContentMovie(getState()).tmdb.id, user_info).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_CONTENT_MOVIE_USERINFO,\r\n                        user_info: result\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function searchUsers(query){\r\n    return async(dispatch) => {\r\n        setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_USERS, true);\r\n        Requests.searchUsers(query).then((result) => {\r\n            if (!result){\r\n                toast.error(\"Ошибка поиска\")\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.SET_SEARCH_CONTENT_USERS,\r\n                    users: result, \r\n                });\r\n            }\r\n            setLoading(dispatch, actionTypes.SET_IS_LOADING_SEARCH_USERS, false);\r\n        });\r\n    }\r\n}\r\n\r\nexport function setUserStatus(is_following, userID){\r\n    return async(dispatch) => {\r\n        if (await dispatch(checkAuthorization())){\r\n            Requests.setUserStatus(localStorage.getItem('token'), is_following, userID).then((result) => {\r\n                if (!result){\r\n                    toast.error(\"Ошибка обновления статуса\")\r\n                }\r\n                else{\r\n                    dispatch({\r\n                        type: actionTypes.SET_USER_PAGE_FOLLOWING,\r\n                        is_following: result.is_following\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function resetPassword(email){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.RESET_PASSWORD_ERROR,\r\n            error: false\r\n        });\r\n        auth.resetPassword(email).then((result) => {\r\n            if (result.status !== 200){\r\n                dispatch({\r\n                    type: actionTypes.RESET_PASSWORD_ERROR,\r\n                    error: result.data.error\r\n                });\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.RESET_PASSWORD_ERROR,\r\n                    error: 'ok'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function confirmPassword(token, password){\r\n    return async(dispatch) => {\r\n        dispatch({\r\n            type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n            error: false\r\n        });\r\n        auth.confirmPassword(token, password).then((result) => {\r\n            if (result.status !== 200){\r\n                dispatch({\r\n                    type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n                    error: result.data.error?result.data.error:'Неизвестная ошибка'\r\n                });\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: actionTypes.CONFIRM_PASSWORD_ERROR,\r\n                    error: 'ok'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function setUser(user) {\r\n    return({ type: actionTypes.SET_USER, user: user });\r\n}\r\n\r\nexport function openLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeLoginForm() {\r\n    return({ type: actionTypes.SET_LOGINFORM, isOpen: false  });\r\n}\r\n\r\nexport function openRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: true  });\r\n}\r\n\r\nexport function closeRegistrateForm() {\r\n    return({ type: actionTypes.SET_REGISTRATEFORM, isOpen: false  });\r\n}\r\n\r\nexport function openResetPasswordForm() {\r\n    return({ type: actionTypes.SET_RESET_PASSWORD_FORM, isOpen: true  });\r\n}\r\n\r\nexport function closeResetPasswordForm() {\r\n    return({ type: actionTypes.SET_RESET_PASSWORD_FORM, isOpen: false  });\r\n}\r\n\r\nfunction setLoading(dispatch, type, isLoading){\r\n    dispatch({\r\n        type: type,\r\n        isLoading: isLoading\r\n    });\r\n}\r\n\r\nfunction setError(dispatch, type, isError){\r\n    dispatch({\r\n        type: type,\r\n        error: isError\r\n    });\r\n}","export const SET_USER = 'SET_USER';\r\nexport const SET_AUTH = \"SET_AUTH\";\r\n\r\nexport const SET_LOGINFORM = \"SET_LOGINFORM\";\r\nexport const SET_REGISTRATEFORM = \"SET_REGISTRATEFORM\";\r\nexport const SET_RESET_PASSWORD_FORM = \"SET_RESET_PASSWORD_FORM\";\r\n\r\nexport const SET_CONTENT_GAME = \"SET_CONTENT_GAME\";\r\nexport const SET_CONTENT_GAME_USERINFO = \"SET_CONTENT_GAME_USERINFO\";\r\nexport const SET_CONTENT_GAME_FRIENDS = \"SET_CONTENT_GAME_FRIENDS\";\r\n\r\nexport const SET_CONTENT_MOVIE = \"SET_CONTENT_MOVIE\";\r\nexport const SET_CONTENT_MOVIE_USERINFO = \"SET_CONTENT_MOVIE_USERINFO\";\r\nexport const SET_CONTENT_MOVIE_FRIENDS = \"SET_CONTENT_MOVIE_FRIENDS\";\r\n\r\nexport const SET_CONTENT_SHOW = \"SET_CONTENT_SHOW\";\r\nexport const SET_CONTENT_SHOW_USERINFO = \"SET_CONTENT_SHOW_USERINFO\";\r\nexport const SET_CONTENT_SHOW_FRIENDS = \"SET_CONTENT_SHOW_FRIENDS\";\r\n\r\nexport const SET_SEARCH_CONTENT_GAMES = \"SET_SEARCH_CONTENT_GAMES\";\r\nexport const SET_SEARCH_CONTENT_MOVIES = \"SET_SEARCH_CONTENT_MOVIES\";\r\nexport const SET_SEARCH_CONTENT_SHOWS = \"SET_SEARCH_CONTENT_SHOWS\";\r\nexport const SET_SEARCH_CONTENT_USERS = \"SET_SEARCH_CONTENT_USERS\";\r\n\r\nexport const SET_USER_PAGE_CONTENT = \"SET_USER_PAGE_CONTENT\";\r\nexport const SET_USER_PAGE_FOLLOWING = \"SET_USER_PAGE_FOLLOWING\";\r\nexport const SET_USER_PAGE_LOGs = \"SET_USER_PAGE_LOGs\";\r\nexport const SET_USER_PAGE_FRIENDS_LOGS = \"SET_USER_PAGE_FRIENDS_LOGS\";\r\n\r\nexport const SET_IS_LOADING_CONTENT_GAME = \"SET_IS_LOADING_CONTENT_GAME\";\r\nexport const SET_IS_LOADING_CONTENT_GAME_FRIENDS = \"SET_IS_LOADING_CONTENT_GAME_FRIENDS\";\r\nexport const SET_IS_LOADING_CONTENT_MOVIE = \"SET_IS_LOADING_CONTENT_MOVIE\";\r\nexport const SET_IS_LOADING_CONTENT_MOVIE_FRIENDS = \"SET_IS_LOADING_CONTENT_MOVIE_FRIENDS\";\r\nexport const SET_IS_LOADING_CONTENT_SHOW = \"SET_IS_LOADING_CONTENT_SHOW\";\r\nexport const SET_IS_LOADING_CONTENT_SHOW_FRIENDS = \"SET_IS_LOADING_CONTENT_SHOW_FRIENDS\";\r\nexport const SET_IS_LOADING_SEARCH_GAMES = \"SET_IS_LOADING_SEARCH_GAMES\";\r\nexport const SET_IS_LOADING_SEARCH_MOVIES = \"SET_IS_LOADING_SEARCH_MOVIES\";\r\nexport const SET_IS_LOADING_SEARCH_SHOWS = \"SET_IS_LOADING_SEARCH_SHOWS\";\r\nexport const SET_IS_LOADING_SEARCH_USERS = \"SET_IS_LOADING_SEARCH_USERS\";\r\nexport const SET_IS_LOADING_USER_PAGE_CONTENT = \"SET_IS_LOADING_USER_PAGE_CONTENT\";\r\nexport const SET_IS_LOADING_USER_PAGE_LOGS = \"SET_IS_LOADING_USER_PAGE_LOGS\";\r\nexport const SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS = \"SET_IS_LOADING_USER_PAGE_FRIENDS_LOGS\";\r\n\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const REGISTRATE_ERROR = \"REGISTRATE_ERROR\";\r\nexport const GAME_REQUEST_ERROR = \"GAME_REQUEST_ERROR\";\r\nexport const MOVIE_REQUEST_ERROR = \"MOVIE_REQUEST_ERROR\";\r\nexport const SHOW_REQUEST_ERROR = \"SHOW_REQUEST_ERROR\";\r\nexport const USER_PAGE_ERROR = \"USER_PAGE_ERROR\";\r\nexport const RESET_PASSWORD_ERROR = \"RESET_PASSWORD_ERROR\";\r\nexport const CONFIRM_PASSWORD_ERROR = \"CONFIRM_PASSWORD_ERROR\";","import React, {useState, useEffect} from \"react\";\r\nimport './style.css';\r\n\r\nfunction StatusButtonGroup( {statuses, activeColor, onChangeStatus, userStatus} ) {\r\n    const [activeStatus, setActiveStatus] = useState('');\r\n\r\n    useEffect(() =>{\r\n            setActiveStatus(userStatus?userStatus:statuses[0]);\r\n        },\r\n        [statuses, userStatus]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            {statuses.map((status) => <button className={'contentStatuses'} \r\n                                            key={status}\r\n                                            style={{backgroundColor: (activeStatus === status?activeColor:'#000000')}}\r\n                                            onClick={()=>{ \r\n                                                if (onChangeStatus(status)){\r\n                                                    setActiveStatus(status);\r\n                                                }\r\n                                            }}>\r\n                                            {status}\r\n                                        </button>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default StatusButtonGroup;\r\n","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction FriendsActivityRow ( {info} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n        <div className=\"fActivityBlock\">\r\n            <h5 className='fActivityUser'>\r\n                <a href={window.location.origin + '/user/' + info.user.id} \r\n                        onClick={(e) => { history.push('/user/' + info.user.id); e.preventDefault();}}\r\n                    >\r\n                    {info.user.username}\r\n                </a>\r\n            </h5>\r\n            <div className='fActivityInfo'>\r\n                <Rating stop={10}\r\n                                    emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\"/>}\r\n                                    fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" title={n}/>)}\r\n                                    initialRating={info.score}\r\n                                    className=\"fActivityInfoText\"\r\n                                    readonly={true}\r\n                        />\r\n                <p className=\"fActivityInfoText\">Статус: {info.status} </p>\r\n                <p className=\"fActivityInfoText\" hidden={!(info.spent_time)}>Время проходения: {info.spent_time} {intToHours(info.spent_time)}</p>\r\n                <p className=\"fActivityInfoText\" hidden={info.review===\"\"}>Отзыв: {info.review}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction intToHours(number){\r\n    if (11 <= number && number <= 14)\r\n        return 'часов'\r\n    else if (number % 10 === 1)\r\n        return 'час'\r\n    else if (2 <= number % 10 && number % 10 <= 4)\r\n        return 'часа'\r\n    else\r\n        return 'часов'\r\n}\r\n\r\nexport default FriendsActivityRow;","import React from \"react\";\r\nimport FriendsActivityRow from './FriendsActivityRow';\r\n\r\nfunction FriendsActivity ( {info} ) {\r\n\r\n    return(\r\n        <div className=\"friendsBlock\">\r\n            { info.friends_info.map((friendInfo) => <FriendsActivityRow info={friendInfo} key={friendInfo.updated_at}/>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FriendsActivity;","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport './style.css';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction GamePage ( {requestGame, game, loggedIn, openLoginForm, setGameStatus, gameIsLoading, requestGameFriends, gameFriends, gameFriendsIsLoading\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n    const [spentTime, setSpentTime] = useState(0);\r\n    const [developers, setDevelopers] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [hltbInfo, setHtlbInfo] = useState({gameplay_main_extra: -1, gameplay_main: -1, gameplay_comletionist: -1});\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestGame(id);\r\n            requestGameFriends(id, 1);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestGame]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (game.rawg.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < game.rawg.genres.length; i++){\r\n                    newGenres += game.rawg.genres[i].name;\r\n                    if (i !== game.rawg.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                 setGenres(newGenres);   \r\n            }\r\n\r\n            if (game.rawg.metacritic){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{game.rawg.metacritic}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">Metascore</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            if (game.hltb){\r\n                setHtlbInfo(game.hltb);\r\n            }else if (game.rawg.playtime){\r\n                setHtlbInfo({gameplay_main_extra: game.rawg.playtime, gameplay_main: -1, gameplay_completionist: -1});\r\n            }else{\r\n                setHtlbInfo({gameplay_main_extra: -1, gameplay_main: -1, gameplay_completionist: -1});\r\n            }\r\n\r\n            if (game.user_info){\r\n                setReview(game.user_info.review);\r\n                setSpentTime(game.user_info.spent_time);\r\n            }\r\n\r\n            if (game.rawg.developers){\r\n                let newDevelopers = \"\"\r\n                for (let i = 0; i < game.rawg.developers.length; i++){\r\n                    newDevelopers += game.rawg.developers[i].name;\r\n                    if (i !== game.rawg.developers.length - 1)\r\n                    newDevelopers += \", \";\r\n                }\r\n                setDevelopers(newDevelopers);   \r\n            }\r\n\r\n            if (game.rawg.released){\r\n                let mas = game.rawg.released.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            document.title = game.rawg.name;\r\n\t\t},\r\n\t\t[game]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${game.rawg.background_image_additional?game.rawg.background_image_additional:game.rawg.background_image})`}}/>\r\n                <LoadingOverlay\r\n                    active={gameIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"gameContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"gameContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\">\r\n                                        <img src={game.rawg.background_image} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{game.rawg.name}</h1>\r\n                                        <p style={{marginBottom: \"2px\"}}>Разработчики: {developers}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Дата релиза: {date}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Жанр: {genres}</p>\r\n                                        <p style={{marginBottom: \"4px\", display: \"inline\"}} >Время прохождения: </p>\r\n                                            <div hidden={hltbInfo.gameplay_main < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"light-green-text\" title={\"Главный сюжет\"}/><span className=\"hs\"/>{hltbInfo.gameplay_main} {hltbInfo.gameplay_main_unit}<span className=\"hs\"/>\r\n                                            </div> <p style={{display: \"inline\"}} > </p>\r\n                                            <div hidden={hltbInfo.gameplay_main_extra < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"yellow-text\" title={\"Главный сюжет + побочные задания\"}/><span className=\"hs\"/>{hltbInfo.gameplay_main_extra} {hltbInfo.gameplay_main_extra_unit}<span className=\"hs\"/> \r\n                                            </div> <p style={{display: \"inline\"}} > </p>\r\n                                            <div hidden={hltbInfo.gameplay_completionist < 0} style={{display: \"inline\"}}>\r\n                                                <MDBIcon far icon=\"clock\" className=\"red-text\" title={\"Полное прохождение\"}/><span className=\"hs\"/>{hltbInfo.gameplay_completionist} {hltbInfo.gameplay_completionist_unit}\r\n                                            </div>\r\n                                        <br/>\r\n                                        <Rating stop={10}\r\n                                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                            initialRating={game.user_info?game.user_info.score:0}\r\n                                            readonly={!loggedIn | (!game.user_info)}\r\n                                            onChange={(score) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setGameStatus({score: score });\r\n                                                }}\r\n                                            }\r\n                                            style={{marginTop: \"20px\", marginBottom: \"10px\"}}\r\n                                        /> <br/>\r\n                                        <StatusButtonGroup\r\n                                            statuses={['Не играл', 'Буду играть', 'Играю', 'Дропнул', 'Прошел']}\r\n                                            activeColor='#4527a0' \r\n                                            userStatus={game.user_info?game.user_info.status:'Не играл'}\r\n                                            onChangeStatus={(status) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setGameStatus(\r\n                                                        { \r\n                                                           status: status,\r\n                                                           review: document.getElementById('reviewInput').value, \r\n                                                           spent_time: document.getElementById('spentTimeInput').value\r\n                                                        }\r\n                                                    );\r\n                                                }\r\n                                            }}\r\n                                            />\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"gameContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: game.rawg.description}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"20px\"}}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        \r\n                                        <MDBInput \r\n                                            type=\"textarea\" \r\n                                            id=\"reviewInput\"\r\n                                            label=\"Ваш отзыв\" \r\n                                            value={review}\r\n                                            onChange={(event) =>setReview(event.target.value)}\r\n                                            outline\r\n                                        />\r\n                                        <MDBInput\r\n                                            type=\"number\"\r\n                                            id=\"spentTimeInput\"\r\n                                            label=\"Время прохождения (часы)\" \r\n                                            value={spentTime}\r\n                                            onChange={(event) =>setSpentTime(event.target.value)}\r\n                                        />\r\n                                        <button \r\n                                            className={'savePreviewButton'} \r\n                                            disabled={!loggedIn | (!game.user_info)}\r\n                                            onClick={() => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setGameStatus({   review: document.getElementById('reviewInput').value, spent_time: document.getElementById('spentTimeInput').value });\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            >\r\n                                            Сохранить\r\n                                        </button>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBContainer>\r\n                            <div className=\"gameFriendsBlock\" hidden={gameFriends.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={gameFriends}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getGameRequestError(state),\r\n    game: selectors.getContentGame(state),\r\n    gameIsLoading: selectors.getIsLoadingContentGame(state),\r\n    gameFriends: selectors.getContentGameFriends(state),\r\n    gameFriendsIsLoading: selectors.getIsLoadingContentGameFriends(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestGame: (id) => {\r\n            dispatch(actions.requestGame(id));\r\n        },\r\n        requestGameFriends: (slug, page) => {\r\n            dispatch(actions.requestGameFriends(slug, page));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        setGameStatus: (status) => {\r\n            dispatch(actions.setGameStatus(status));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction MoviePage ( {requestMovie, movie, loggedIn, movieIsLoading, setMovieStatus, openLoginForm, requestMovieFriends, movieFriends, movieFriendsIsLoading\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [companies, setCompanies] = useState(\"\");\r\n    const [cast, setCast] = useState(\"\");\r\n    const [director, setDirector] = useState(\"\");\r\n    const [review, setReview] = useState(\"\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestMovie(id);\r\n            requestMovieFriends(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestMovie]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (movie.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{movie.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            if (movie.tmdb.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < movie.tmdb.genres.length; i++){\r\n                    newGenres += movie.tmdb.genres[i].name;\r\n                    if (i !== movie.tmdb.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                setGenres(newGenres);   \r\n            }\r\n\r\n            if (movie.tmdb.production_companies){\r\n                let newCompanies = \"\"\r\n                for (let i = 0; i < movie.tmdb.production_companies.length; i++){\r\n                    newCompanies += movie.tmdb.production_companies[i].name;\r\n                    if (i !== movie.tmdb.production_companies.length - 1)\r\n                        newCompanies += \", \";\r\n                }\r\n                setCompanies(newCompanies);   \r\n            }\r\n\r\n            if (movie.tmdb.cast){\r\n                let newCast = \"\";\r\n                let length = movie.tmdb.cast.length>5?5:movie.tmdb.cast.length;\r\n                for (let i = 0; i < length; i++){\r\n                    newCast += movie.tmdb.cast[i].name;\r\n                    if (i !== length - 1)\r\n                        newCast += \", \";\r\n                }\r\n                setCast(newCast);   \r\n            }\r\n\r\n            if (movie.tmdb.crew){\r\n                let newDirector = \"\"\r\n                for (let i = 0; i < movie.tmdb.crew.length; i++){\r\n                    if (movie.tmdb.crew[i].job === \"Director\"){\r\n                        newDirector = movie.tmdb.crew[i].name;\r\n                        break;\r\n                    }\r\n                }\r\n                setDirector(newDirector);   \r\n            }\r\n\r\n            if (movie.user_info){\r\n                setReview(movie.user_info.review);\r\n            }\r\n\r\n            document.title = movie.tmdb.title;\r\n\t\t},\r\n\t\t[movie]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + movie.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={movieIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"movieContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"movieContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{movie.tmdb.title}</h1>\r\n                                        <p style={{marginBottom: \"2px\"}}>Дата релиза: {movie.tmdb.release_date}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Продолжительность (мин): {movie.tmdb.runtime}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Жанр: {genres}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Компания: {companies}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Слоган: {movie.tmdb.tagline}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>В ролях: {cast}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Режиссер: {director}</p>\r\n                                        <br/>\r\n                                        <Rating stop={10}\r\n                                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}}/>}\r\n                                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" style={{fontSize: \"25px\"}} title={n}/>)}\r\n                                            initialRating={movie.user_info?movie.user_info.score:0}\r\n                                            readonly={!loggedIn | (!movie.user_info)}\r\n                                            onChange={(score) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                    setMovieStatus({score: score });\r\n                                                }}\r\n                                            }\r\n                                        /> <br/>\r\n                                        <StatusButtonGroup loggedIn={loggedIn} \r\n                                            statuses={['Не смотрел', 'Буду смотреть', 'Дропнул', 'Посмотрел']}\r\n                                            activeColor='#4527a0' \r\n                                            userStatus={movie.user_info?movie.user_info.status:'Не смотрел'}\r\n                                            onChangeStatus={(status) => {\r\n                                                if (!loggedIn){\r\n                                                    openLoginForm();\r\n                                                }else{\r\n                                                   setMovieStatus({ status: status });\r\n                                                }\r\n                                            }}/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"movieContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: movie.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"10px\"}}>\r\n                                    <h3 style={{paddingTop: \"10px\"}}>Отзывы</h3>\r\n                                        \r\n                                        <MDBInput \r\n                                            type=\"textarea\" \r\n                                            id=\"reviewInput\"\r\n                                            label=\"Ваш отзыв\" \r\n                                            value={review}\r\n                                            onChange={(event) =>setReview(event.target.value)}\r\n                                            outline\r\n                                        />\r\n                                        <button \r\n                                            className={'savePreviewButton'} \r\n                                            disabled={!loggedIn | (!movie.user_info)}\r\n                                            onClick={() => {\r\n                                                    if (!loggedIn){\r\n                                                        openLoginForm();\r\n                                                    }else{\r\n                                                        setMovieStatus({   review: document.getElementById('reviewInput').value });\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            >\r\n                                            Сохранить\r\n                                        </button>\r\n                                    </MDBCol>\r\n                            </MDBContainer>\r\n                            <div className=\"movieFriendsBlock\" hidden={movieFriends.friends_info.length < 1}>\r\n                                <h4>Отзывы друзей</h4>\r\n                                <FriendsActivity info={movieFriends}/>\r\n                            </div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getMovieRequestError(state),\r\n    movie: selectors.getContentMovie(state),\r\n    movieIsLoading: selectors.getIsLoadingContentMovie(state),\r\n    movieFriends: selectors.getContentMovieFriends(state),\r\n    movieFriendsIsLoading: selectors.getIsLoadingContentMovieFriends(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestMovie: (id) => {\r\n            dispatch(actions.requestMovie(id));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        setMovieStatus: (status) => {\r\n            dispatch(actions.setMovieStatus(status));\r\n        },\r\n        requestMovieFriends: (id, page) => {\r\n            dispatch(actions.requestMovieFriends(id, page));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviePage);\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport './style.css';\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction EpisodeRow ( {episode, season, showID} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [episode]\r\n    );\r\n\r\n    function parseDate(date){\r\n        let newDate = new Date(date);\r\n        return newDate.toLocaleTimeString(\"ru-RU\");\r\n    }\r\n\r\n    return(\r\n        <div className=\"episodeRow\">\r\n            <a className=\"episodeRowName episodeLink\" \r\n                href={window.location.origin + '/show/' + showID + '/season/' + season + '/episode/'+ episode} \r\n                onClick={(e) => { history.push('/show/' + showID + '/season/' + season + '/episode/'+ episode); e.preventDefault();}}\r\n                >\r\n                Серия {episode}\r\n            </a>  \r\n            <Rating stop={10}\r\n                emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\"/>}\r\n                fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" title={n}/>)}\r\n                initialRating={5}\r\n                readonly={false}\r\n                className='episodeRating'\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EpisodeRow;","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport './style.css';\r\nimport EpisodeRow from './EpisodeRow';\r\n\r\nfunction SeasonsBlock ( {seasons, showID} ) {\r\n    let history = useHistory();\r\n\r\n    const [hereSeasons, setHereSeasons] = useState([]);\r\n\r\n    useEffect(() =>{\r\n        setHereSeasons([]);\r\n        if (seasons){\r\n            let newSeasons = [];\r\n            for (let season in seasons){\r\n                if (seasons[season].name !== 'Спецматериалы'){\r\n                    let newSeason = seasons[season];\r\n                    newSeason.episodes = [];\r\n                    for (let i = 1; i <= seasons[season].episode_count; i++)\r\n                        newSeason.episodes.push(i);\r\n                    newSeasons.push(newSeason);\r\n                }\r\n            }\r\n            setHereSeasons(newSeasons);\r\n        }\r\n            \r\n    },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [seasons]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            { \r\n                hereSeasons.map((season) => \r\n                    <div key={season.id} className=\"seasonBlock\">\r\n                        <div className='seasonName'>\r\n                            <a \r\n                                href={window.location.origin + '/show/' + showID + '/season/' + season.id} \r\n                                onClick={(e) => { history.push('/show/' + showID + '/season/' + season.id); e.preventDefault();}}\r\n                                >\r\n                                <h5 > {season.name} </h5>\r\n                            </a>\r\n                        </div>\r\n                        <details open={false} className='episodeRows'>\r\n                            <summary>Развернуть</summary>\r\n                                <ul>\r\n                                {  season.episodes.map((episode) => <li className=\"episode\"><EpisodeRow episode={episode} season={season.id} showID={showID} key={season.id+episode}/></li>) }\r\n                                </ul>\r\n                        </details>\r\n                        \r\n                    </div>\r\n                )  \r\n            } \r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default SeasonsBlock;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBInput\r\n} from \"mdbreact\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport './style.css';\r\n\r\nimport Rating from \"react-rating\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\nimport StatusButtonGroup from \"../Common/StatusButtonGroup\";\r\nimport FriendsActivity from \"../Common/FriendsActivity\";\r\nimport SeasonsBlock from \"./SeasonsBlock\";\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ShowPage ( {requestShow, show, showIsLoading,\r\n                    loggedIn, openLoginForm\r\n    } ) {\r\n    let { id } = useParams();\r\n    const [metascoreBlock, setMetascoreBlock] = useState(\"\");\r\n    const [genres, setGenres] = useState(\"\");\r\n    const [companies, setCompanies] = useState(\"\");\r\n    const [showStatus, setShowStatus] = useState(\"\");\r\n    const [firstDate, setFirstDate] = useState(\"\");\r\n    const [lastDate, setLastDate] = useState(\"\");\r\n    //const [review, setReview] = useState(\"\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            requestShow(id);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[id, requestShow]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (show.tmdb.vote_average){\r\n                setMetascoreBlock(\r\n                    <div>\r\n                        <div className=\"metacritic\">\r\n                            <p>{show.tmdb.vote_average * 10}</p>\r\n                        </div>\r\n                        <p className=\"metacriticText\">TMDB score</p>\r\n                    </div>\r\n                );\r\n            }else{\r\n                setMetascoreBlock(\"\");\r\n            }\r\n\r\n            if (show.tmdb.genres){\r\n                let newGenres = \"\"\r\n                for (let i = 0; i < show.tmdb.genres.length; i++){\r\n                    newGenres += show.tmdb.genres[i].name;\r\n                    if (i !== show.tmdb.genres.length - 1)\r\n                        newGenres += \", \";\r\n                }\r\n                setGenres(newGenres);   \r\n            }\r\n\r\n            if (show.tmdb.production_companies){\r\n                let newCompanies = \"\"\r\n                for (let i = 0; i < show.tmdb.production_companies.length; i++){\r\n                    newCompanies += show.tmdb.production_companies[i].name;\r\n                    if (i !== show.tmdb.production_companies.length - 1)\r\n                        newCompanies += \", \";\r\n                }\r\n                setCompanies(newCompanies);   \r\n            }\r\n\r\n            \r\n            switch (show.tmdb.status){\r\n                case 'Ended':\r\n                    setShowStatus('Окончен');break;\r\n                case 'Returning Series':\r\n                    setShowStatus('Продолжается');break;\r\n                case 'Pilot':\r\n                    setShowStatus('Пилот');break;\r\n                case 'Canceled':\r\n                    setShowStatus('Отменен');break;\r\n                case 'In Production':\r\n                    setShowStatus('В производстве');break;\r\n                case 'Planned':\r\n                    setShowStatus('Запланирован');break;\r\n                default:\r\n                    setShowStatus(show.tmdb.status);\r\n            } \r\n\r\n            if (show.tmdb.first_air_date){\r\n                let mas = show.tmdb.first_air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setFirstDate(newDate);\r\n            }else\r\n                setFirstDate(\"\");\r\n\r\n            if (show.tmdb.last_air_date){\r\n                let mas = show.tmdb.last_air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setLastDate(newDate);\r\n            }else\r\n                setLastDate(\"\");\r\n\r\n            /*if (show.user_info){\r\n                setReview(movie.user_info.review);\r\n            }*/\r\n\r\n            document.title = show.tmdb.name;\r\n\t\t},\r\n\t\t[show]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg\" style={{backgroundImage: `url(${ 'http://image.tmdb.org/t/p/w1920_and_h800_multi_faces' + show.tmdb.backdrop_path})`}}/>\r\n                <LoadingOverlay\r\n                    active={showIsLoading}\r\n                    spinner\r\n                    text='Загрузка...'\r\n                    >\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"showContentPage\"> \r\n                            <MDBContainer>\r\n                                <MDBRow className=\"showContentHeader rounded-top\" >\r\n                                    <MDBCol size=\"5\" className=\"posterBlock\">\r\n                                        <img src={\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + show.tmdb.poster_path} className=\"img-fluid\" alt=\"\"/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"6\">\r\n                                        <h1>{show.tmdb.name}</h1>\r\n                                        <h5 style={{marginBottom: \"10px\", marginTop: \"-10px\"}}>{show.tmdb.original_name}</h5>\r\n                                        <p style={{marginBottom: \"2px\"}}>Жанр: {genres}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Компания: {companies}</p>\r\n                                        <p style={{marginBottom: \"2px\"}} hidden={firstDate===''}>Дата выхода первой серии: {firstDate}</p>\r\n                                        <p style={{marginBottom: \"2px\"}} hidden={lastDate===''}>Дата выхода последней серии: {lastDate}</p>\r\n                                        <p style={{marginBottom: \"2px\"}} hidden={show.tmdb.episode_run_time.length < 1}>Продолжительность (мин): {show.tmdb.episode_run_time[0]}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Количество сезонов: {show.tmdb.number_of_seasons}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Количество серий: {show.tmdb.number_of_episodes}</p>\r\n                                        <p style={{marginBottom: \"2px\"}}>Статус: {showStatus}</p>\r\n                                        <br/>\r\n                                    </MDBCol>\r\n                                    <MDBCol size=\"1\">\r\n                                        { metascoreBlock }\r\n                                    </MDBCol>\r\n                                </MDBRow> \r\n                                <MDBRow className=\"showContentBody\"> \r\n                                    <MDBCol >\r\n                                        <h3 style={{paddingTop: \"15px\"}}>Описание</h3>\r\n                                        <div dangerouslySetInnerHTML={{__html: show.tmdb.overview}} />\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <div className=\"showContentBody\"> \r\n                                    <h3 style={{paddingTop: \"15px\"}}>Список серий</h3>\r\n                                    <SeasonsBlock seasons={show.tmdb.seasons} showID={show.tmdb.id}/>\r\n                                </div>\r\n                                <MDBCol size=\"6\" style={{paddingLeft: \"10px\"}}>\r\n                                    \r\n                                </MDBCol>\r\n                            </MDBContainer>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n                 </LoadingOverlay>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    requestError: selectors.getShowRequestError(state),\r\n    show: selectors.getContentShow(state),\r\n    showIsLoading: selectors.getIsLoadingContentShow(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestShow: (id) => {\r\n            dispatch(actions.requestShow(id));\r\n        },\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowPage);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\n\r\nfunction CardGame( {game} ) {\r\n    let history = useHistory();\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (game.released){\r\n                let mas = game.released.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (game.name.length > 55){\r\n                let newName = game.name.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(game.name);\r\n        },\r\n        [game]\r\n    );\r\n\r\n    /*const mouseDownHandler = ( event ) => {\r\n        if( event.button === 1 ) {\r\n            console.log(window.location.origin + '/game/' + game.slug );\r\n\r\n        }\r\n      }*/\r\n\r\n    return(\r\n        <div className=\"searchCardGame\" >\r\n            <div className=\"searchCardGameImage\" style={{backgroundImage: `url(${game.background_image})`}}> </div>\r\n            <div className=\"searchCardGameText\">\r\n                <a href={window.location.origin + '/game/' + game.slug} \r\n                    onClick={(e) => { history.push('/game/' + game.slug); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n//onMouseDown={mouseDownHandler} \r\n\r\nexport default CardGame;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardMovie ( {movie} ) {\r\n    let history = useHistory();\r\n\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (movie.release_date){\r\n                let mas = movie.release_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (movie.title.length > 55){\r\n                let newName = movie.title.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(movie.title);\r\n        },\r\n        [movie]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardMovie\" >\r\n            <div className=\"searchCardMovieImage\" style={{backgroundImage: `url(${\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + movie.poster_path})`}}> </div>\r\n            <div className=\"searchCardMovieText\">\r\n                <a href={window.location.origin + '/movie/' + movie.id} \r\n                    onClick={(e) => { history.push('/movie/' + movie.id); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardMovie;\r\n","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardShow ( {show} ) {\r\n    let history = useHistory();\r\n\r\n    const [date, setDate] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n            if (show.first_air_date){\r\n                let mas = show.first_air_date.split(\"-\");\r\n                let newDate = mas[2] + \".\" + mas[1] + \".\" + mas[0];\r\n                setDate(newDate);\r\n            }else\r\n                setDate(\"\");\r\n\r\n            if (show.name.length > 55){\r\n                let newName = show.name.substr(0, 55) + \"...\";\r\n                setName(newName);\r\n            }else\r\n                setName(show.name);\r\n        },\r\n        [show]\r\n    );\r\n\r\n    return(\r\n        <div className=\"searchCardMovie\" >\r\n            <div className=\"searchCardMovieImage\" style={{backgroundImage: `url(${\"http://image.tmdb.org/t/p/w600_and_h900_bestv2\" + show.poster_path})`}}> </div>\r\n            <div className=\"searchCardMovieText\">\r\n                <a href={window.location.origin + '/show/' + show.id} \r\n                    onClick={(e) => { history.push('/show/' + show.id); e.preventDefault();}}>\r\n                        <h4 >{name}</h4>\r\n                </a>\r\n                <p>{date}</p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default CardShow;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nfunction CardUser ( {user} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [user]\r\n    );\r\n\r\n    return(\r\n        <a href={window.location.origin + '/user/' + user.id} \r\n                    onClick={(e) => { history.push('/user/' + user.id); e.preventDefault();}}>\r\n            <div className=\"cardUser\" >\r\n                <div className=\"cardUserImage\" style={{backgroundImage: `url(${'http://upload.wikimedia.org/wikipedia/commons/f/f4/User_Avatar_2.png'})`}}> </div>\r\n                <div className=\"cardUserText\">\r\n                    <h4 >{user.username}</h4>\r\n                </div>\r\n            </div> \r\n        </a>\r\n        \r\n    )\r\n}\r\n\r\nexport default CardUser;\r\n","import React, {useState} from \"react\";\r\nimport './style.css';\r\n\r\nfunction CategoriesTab( {categories, activeColor, onChangeCategory} ) {\r\n    const [activeCategory, setActiveCategory] = useState(categories[0]);\r\n\r\n    return(\r\n        <div>\r\n            {categories.map((category) => <button className={'categoriesTab'} \r\n                                            key={category}\r\n                                            style={{color: (activeCategory === category?activeColor:'rgb(207, 207, 207)')}}\r\n                                            onClick={()=>{ \r\n                                                setActiveCategory(category);\r\n                                                onChangeCategory(category);\r\n                                            }}>\r\n                                            {category}\r\n                                        </button>) }\r\n           <hr style={{  backgroundColor: activeColor, height: 2.5, marginTop: \"0px\", marginBottom: \"10px\" }}/>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default CategoriesTab;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer,\r\n    MDBIcon,\r\n    MDBFormInline\r\n} from \"mdbreact\";\r\nimport './style.css';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport CardGame from './CardGame';\r\nimport CardMovie from './CardMovie';\r\nimport CardShow from './CardShow';\r\nimport CardUser from '../Common/CardUser';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction SearchPage ( { loggedIn, gamesIsLoading, moviesIsLoading, showsIsLoading, usersIsLoading, searchGame, games, searchMovie, movies, searchShow, shows, searchUsers, users } ) {\r\n    let history = useHistory();\r\n    let { query } = useParams();\r\n    const [queryText, setQueryText] = useState(\"\");\r\n    const [gamesCards, setGamesCards] = useState(\"\");\r\n    const [moviesCards, setMoviesCards] = useState(\"\");\r\n    const [showsCards, setShowsCards] = useState(\"\");\r\n    const [usersCards, setUsersCards] = useState(\"\");\r\n    const [gamesPage, setGamesPage] = useState(1);\r\n    const [moviesPage, setMoviesPage] = useState(1);\r\n    const [showsPage, setShowsPage] = useState(1);\r\n\r\n    const [activeCategory, setActiveCategory] = useState(\"Всё\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            searchGame(query, 1, 6);\r\n            searchMovie(query, 1);\r\n            searchShow(query, 1);\r\n            searchUsers(query);\r\n            setQueryText(query);\r\n            document.title = 'Поиск';\r\n            setGamesPage(1);\r\n            setMoviesPage(1);\r\n            setShowsPage(1);\r\n\t\t},\r\n\t\t[query, searchGame, searchMovie, searchUsers, searchShow]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setGamesCards(<div className=\"searchCardsGroup\">{games.map(game => <CardGame game={game} key={game.id}/>)}</div>);\r\n\t\t},\r\n\t\t[games]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setMoviesCards(<div className=\"searchCardsGroup\">{movies.map(movie => <CardMovie movie={movie} key={movie.id}/>)}</div>);\r\n\t\t},\r\n\t\t[movies]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setShowsCards(<div className=\"searchCardsGroup\">{shows.map(show => <CardShow show={show} key={show.id}/>)}</div>);\r\n\t\t},\r\n\t\t[shows]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            setUsersCards(<div className=\"searchCardsGroup\">{users.map(user => <CardUser user={user} key={user.username}/>)}</div>);\r\n\t\t},\r\n\t\t[users]\r\n    );\r\n    \r\n    return (\r\n            <div>\r\n\t\t\t<div className=\"bg searchBG\"/> \r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                        <MDBCol className=\"searchPage\"> \r\n                            <h1>Поиск</h1>\r\n                            <MDBFormInline className=\"md-form\"\r\n                                onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput2').value); return false; }}>\r\n                                <MDBIcon icon=\"search\" />\r\n                                <input \r\n                                    className=\"form-control form-control-sm ml-3 w-50\" \r\n                                    type=\"text\" \r\n                                    placeholder=\"Найти\" \r\n                                    aria-label=\"Search\" \r\n                                    id=\"searchInput2\" \r\n                                    value={queryText} \r\n                                    onChange={(event) =>setQueryText(event.target.value)}/>\r\n                            </MDBFormInline>\r\n\r\n                            <h1>Результаты поиска</h1>\r\n                                <CategoriesTab\r\n                                    categories={['Всё', 'Игры', 'Фильмы', 'Сериалы', 'Пользователи']}\r\n                                    activeColor='#7654de' \r\n                                    onChangeCategory={(category) => {\r\n                                        setActiveCategory(category);\r\n                                    }}/>\r\n\r\n                                <LoadingOverlay\r\n                                    active={gamesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем игры...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Игры'}>\r\n                                        <h3>Игры</h3>\r\n                                        <div className=\"reslutsBlock\">\r\n                                            <button className=\"paginationButton\" \r\n                                                disabled={gamesPage===1}\r\n                                                onClick={() => {searchGame(query, gamesPage-1, 6); setGamesPage(gamesPage-1)}}\r\n                                                >\r\n                                                &lt;\r\n                                            </button>\r\n                                            {gamesCards}\r\n                                            <button className=\"paginationButton\"\r\n                                                disabled={games.length < 6}\r\n                                                onClick={() => {searchGame(query, gamesPage+1, 6); setGamesPage(gamesPage+1)}}\r\n                                                >\r\n                                                &gt;\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </LoadingOverlay>\r\n\r\n                                <LoadingOverlay\r\n                                    active={moviesIsLoading}\r\n                                    spinner\r\n                                    text='Ищем фильмы...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Фильмы'}>\r\n                                        <h3>Фильмы</h3>\r\n                                        <div className=\"reslutsBlock\">\r\n                                            <button className=\"paginationButton\" \r\n                                                disabled={moviesPage===1}\r\n                                                onClick={() => {searchMovie(query, moviesPage-1); setMoviesPage(moviesPage-1)}}\r\n                                                >\r\n                                                &lt;\r\n                                            </button>\r\n                                            {moviesCards}\r\n                                            <button className=\"paginationButton\"\r\n                                                disabled={movies.length < 20}\r\n                                                onClick={() => {searchMovie(query, moviesPage+1); setMoviesPage(moviesPage+1)}}\r\n                                                >\r\n                                                &gt;\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>       \r\n                                </LoadingOverlay>\r\n\r\n                                <LoadingOverlay\r\n                                    active={showsIsLoading}\r\n                                    spinner\r\n                                    text='Ищем сериалы...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Сериалы'}>\r\n                                        <h3>Сериалы</h3>\r\n                                        <div className=\"reslutsBlock\">\r\n                                            <button className=\"paginationButton\" \r\n                                                disabled={showsPage===1}\r\n                                                onClick={() => {searchShow(query, showsPage-1); setShowsPage(showsPage-1)}}\r\n                                                >\r\n                                                &lt;\r\n                                            </button>\r\n                                            {showsCards}\r\n                                            <button className=\"paginationButton\"\r\n                                                disabled={shows.length < 20}\r\n                                                onClick={() => {searchShow(query, showsPage+1); setShowsPage(showsPage+1)}}\r\n                                                >\r\n                                                &gt;\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>       \r\n                                </LoadingOverlay>\r\n                                \r\n                                <LoadingOverlay\r\n                                    active={usersIsLoading}\r\n                                    spinner\r\n                                    text='Ищем пользователей...'\r\n                                    >\r\n                                    <div hidden={activeCategory!=='Всё' && activeCategory!=='Пользователи'}>\r\n                                        <h3>Пользователи</h3>\r\n                                        {usersCards}\r\n                                    </div>    \r\n                                </LoadingOverlay>\r\n                                \r\n                        </MDBCol>\r\n                        <MDBCol md=\"0.5\"></MDBCol>\r\n                    </MDBRow>\r\n                 </MDBContainer>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    gamesIsLoading: selectors.getIsLoadingSearchGames(state),\r\n    moviesIsLoading: selectors.getIsLoadingSearchMovies(state),\r\n    showsIsLoading: selectors.getIsLoadingSearchShows(state),\r\n    usersIsLoading: selectors.getIsLoadingSearchUsers(state),\r\n    games: selectors.getSearchContentGames(state),\r\n    movies: selectors.getSearchContentMovies(state),\r\n    shows: selectors.getSearchContentShows(state),\r\n    users: selectors.getSearchContentUsers(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        searchGame: (query, page, gamesCount) => {\r\n            dispatch(actions.searchGames(query, page, gamesCount));\r\n        },\r\n        searchMovie: (query, page) => {\r\n            dispatch(actions.searchMovies(query, page));\r\n        },\r\n        searchShow: (query, page) => {\r\n            dispatch(actions.searchShows(query, page));\r\n        },\r\n        searchUsers: (query) => {\r\n            dispatch(actions.searchUsers(query));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);\r\n","import React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction LoginForm( {isOpen, closeForm, logIn, authError, openResetPasswordForm} ) {\r\n\tconst [password, setPassword] = useState(\"\");\r\n\tconst [login, setLogin] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody className=\"loginBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form onSubmit={(event) => {event.preventDefault(); logIn(login, password)}}>\r\n\t              <p className=\"h4 text-center mb-4\">Войти</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!authError} >Неверный логин или пароль!</p>\r\n\r\n\t              <label htmlFor=\"loginInput\" className=\"grey-text\">\r\n\t                Логин\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={login}\r\n\t\t\t\t\tonChange={(event) =>setLogin(event.target.value)}/>\r\n\t\t\t\t\t\r\n\t              <label htmlFor=\"passwordInput\" className=\"grey-text\">\r\n\t                Пароль\r\n\t              </label>\r\n\t              <input type=\"password\" id=\"passwordInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={password}\r\n\t\t\t\t\tonChange={(event) =>setPassword(event.target.value)}/>\r\n\t\t\t\t\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"submit\" className=\"confirmButton\">\r\n\t\t\t\t\t\tВойти\r\n\t\t\t\t\t</MDBBtn>\r\n\t\t\t\t\t<label className=\"passwordResetLabel\" onClick={() => {closeForm(); openResetPasswordForm()}}>\r\n\t\t\t\t\t\tВосстановить пароль\r\n\t              \t</label>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getLoginForm(state),\r\n\tauthError: selectors.getAuthError(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeLoginForm());\r\n\t\t},\r\n\t\tlogIn: (login, password) => {\r\n\t\t\tdispatch(actions.tryAuth(login, password));\r\n\t\t},\r\n\t\topenResetPasswordForm: () => {\r\n\t\t\tdispatch(actions.openResetPasswordForm());\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n","\r\nimport React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы авторизации\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction RegistrationForm( {isOpen, closeForm, registrate, registrateArror, user} ) {\r\n\tconst [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n\tconst [password, setPassword] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\tconst [login, setLogin] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered >\r\n\t    <MDBModalBody className=\"registrationBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form>\r\n\t\t\t      <p className=\"note note-danger\" hidden={!registrateArror} >Ошибка регистрации!</p>\r\n                  <p className=\"note note-success\" hidden={user.email===\"\"} >{user.login}, добро пожаловать! Осталось только подтвердить вашу почту</p>\r\n\t              <h4>Регистрация</h4>\r\n\r\n\t              <label htmlFor=\"loginInput\">\r\n\t                Никнейм\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"loginInput\" className=\"form-control\" \r\n\t\t\t\t\t\tvalue={login}\r\n\t\t\t\t\t\tonChange={(event) =>setLogin(event.target.value)}/>\r\n\r\n                  <label htmlFor=\"emailInput\">\r\n\t                Электронная почта\r\n\t              </label>\r\n\t\t\t\t  <input type=\"email\"  id=\"emailInput\"  className=\"form-control\" \r\n\t\t\t\t\t  value={email} \r\n\t\t\t\t\t  onChange={(event) =>setEmail(event.target.value)} />\r\n\r\n\t              <label htmlFor=\"passwordInput\">\r\n\t                Пароль\r\n\t              </label>\r\n\t\t\t\t  <input type=\"password\"id=\"passwordInput\" className=\"form-control\"\r\n\t\t\t\t  \t\tvalue={password}\r\n\t\t\t\t\t\tonChange={(event) =>setPassword(event.target.value)}/>\r\n\r\n\t\t\t\t  <label htmlFor=\"passwordConfirmInput\">\r\n\t                Подтверждение пароля\r\n\t              </label>\r\n\t\t\t\t  <input type=\"password\" id=\"passwordConfirmInput\" className=\"form-control\"\r\n\t\t\t\t  \t\tstyle={passwordConfirm===password?{outlineColor: 'green'}:{outlineColor: 'red'}}\r\n\t\t\t\t\t\tvalue={passwordConfirm}\r\n\t\t\t\t\t\tonChange={(event) =>setPasswordConfirm(event.target.value)}/>\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"button\" className=\"confirmButton\" \r\n\t\t\t\t\t\tdisabled={password!==passwordConfirm || login.length < 1  || email.length < 1 || password.length < 1}\r\n\t\t\t\t\t\tonClick={() => registrate(login, email, password)}>\r\n\t\t\t\t\t\tЗарегистрироваться\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getRegistrateForm(state),\r\n    registrateArror: selectors.getRegistrateError(state),\r\n    user: selectors.getUser(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeRegistrateForm());\r\n\t\t},\r\n\t\tregistrate: (login, email, password) => {\r\n\t\t\tdispatch(actions.registrationRequest(login, email, password));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);\r\n","import React, {\r\n    useState\r\n} from \"react\";\r\nimport {\r\n\tMDBModal, \r\n\tMDBModalBody,\r\n\tMDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../../store/actions';\r\nimport * as selectors from '../../store/reducers';\r\n\r\n/**\r\n * КОмпонент формы сброса пароля\r\n * @param {number} Параметр, при изменении которого компонент открывается \r\n */\r\nfunction ResetPasswordForm( {isOpen, closeForm, resetPassword, resetPasswordError} ) {\r\n\tconst [email, setEmail] = useState(\"\");\r\n\r\n\treturn (\r\n        <MDBModal isOpen={isOpen} toggle={closeForm} size=\"sm\" centered>\r\n\t    <MDBModalBody className=\"loginBody\">\r\n\t      <MDBContainer>\r\n\t        <MDBRow>\r\n\t          <MDBCol>\r\n\t            <form onSubmit={(event) => {event.preventDefault(); resetPassword(email)}}>\r\n\t              <p className=\"h4 text-center mb-4\">Сбросить пароль</p>\r\n\t\t\t\t  <p className=\"note note-danger\" hidden={!resetPasswordError | resetPasswordError === 'ok'} >{resetPasswordError}</p>\r\n                  <p className=\"note note-success\" hidden={resetPasswordError !== 'ok'} >На вашу почту отправлено письмо</p>\r\n\r\n\t              <label htmlFor=\"emailInput\" className=\"grey-text\">\r\n\t                Почта\r\n\t              </label>\r\n\t              <input type=\"text\" id=\"emailInput\" className=\"form-control\" \r\n\t\t\t\t  \tvalue={email}\r\n\t\t\t\t\tonChange={(event) =>setEmail(event.target.value)}/>\r\n\r\n\t              <div className=\"text-center mt-4\">\r\n\t\t\t\t\t<MDBBtn type=\"submit\" className=\"confirmButton\">\r\n\t\t\t\t\t\tСбросить\r\n\t\t\t\t\t</MDBBtn>\r\n\t              </div>\r\n\t            </form>\r\n\t          </MDBCol>\r\n\t        </MDBRow>\r\n\t      </MDBContainer>\r\n\t    </MDBModalBody>\r\n      </MDBModal>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tisOpen: selectors.getResetPasswordForm(state),\r\n\tresetPasswordError: selectors.getResetPasswordError(state)\r\n  });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tcloseForm: () => {\r\n\t\t\tdispatch(actions.closeResetPasswordForm());\r\n\t\t},\r\n\t\tresetPassword: (email) => {\r\n\t\t\tdispatch(actions.resetPassword(email));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPasswordForm);\r\n","import React, {\r\n    useEffect\r\n} from \"react\";\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ConfirmPage ( {confirmEmailRequest} ) \r\n{\r\n\tlet search = window.location.search;\r\n\tlet params = new URLSearchParams(search);\r\n\tlet uid64 = params.get('uid64');\r\n\tlet token = params.get('token');\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconfirmEmailRequest(uid64, token);\r\n\t\t},\r\n\t\t// eslint-disable-next-line\r\n\t\t[]\r\n\t);\r\n\t\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        confirmEmailRequest: (uid64, token) => {\r\n            dispatch(actions.confirmEmailRequest(uid64, token));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmPage);","import React, {\r\n    useState\r\n} from \"react\";\r\nimport \"./style.css\";\r\nimport { connect } from 'react-redux'; \r\nimport * as actions from '../store/actions';\r\nimport * as selectors from '../store/reducers';\r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction ConfirmPasswordPage ( {confirmPassword, confirmPasswordError} ) \r\n{\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n    \r\n\tlet search = window.location.search;\r\n\tlet params = new URLSearchParams(search);\r\n\tlet token = params.get('token');\r\n\r\n    return (\r\n\t\t\t<div className=\"bg\">\r\n                <form onSubmit={(event) => {event.preventDefault(); confirmPassword(token, password)}} className=\"confirmPasswordForm\">\r\n                    <p className=\"h4\">Обновить пароль</p>\r\n                    <p className=\"note note-danger\" hidden={!confirmPasswordError | confirmPasswordError==='ok'} >{confirmPasswordError}</p>\r\n                    <p className=\"note note-success\" hidden={confirmPasswordError !== 'ok'} >Пароль обновлен!</p>\r\n\r\n                    <label htmlFor=\"passwordInput\" className=\"confirmPasswordLabel\">\r\n                        Новый пароль\r\n                    </label><br/>\r\n                    <input type=\"password\" id=\"passwordInput\" className=\"confirmPasswordInput\" \r\n                        value={password}\r\n                        onChange={(event) =>setPassword(event.target.value)}/>\r\n                    <br/>\r\n\r\n                    <label htmlFor=\"passwordConfurmInput\" className='confirmPasswordLabel'>\r\n                        Подтверждение пароля\r\n                    </label><br/>\r\n                    <input type=\"password\" id=\"passwordConfurmInput\" className=\"confirmPasswordInput\"\r\n                        value={passwordConfirm}\r\n                        onChange={(event) =>setPasswordConfirm(event.target.value)}/>\r\n                    <br/>\r\n\r\n                    <button type=\"submit\" \r\n                        className=\"confirmPasswordButton\"\r\n                        disabled={password!==passwordConfirm | password.length < 1}>\r\n                        Обновить\r\n                    </button>\r\n                </form>\r\n\t\t\t</div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    confirmPasswordError: selectors.getConfirmPasswordError(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        confirmPassword: (token, password) => {\r\n            dispatch(actions.confirmPassword(token, password));\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmPasswordPage);","import React, { useEffect, useState} from \"react\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction GameBlock ( {games, stats} ) {\r\n\r\n    const gameColumns = [\r\n        {\r\n          label: 'Название',\r\n          field: 'name',\r\n          sort: 'disabled'\r\n        },\r\n        {\r\n          label: 'Статус',\r\n          field: 'status',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Оценка',\r\n          field: 'score',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Отзыв',\r\n          field: 'review',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Время прохождения',\r\n          field: 'spent_time',\r\n          sort: 'asc'\r\n        }\r\n      ];\r\n\r\n    const [gameTableData, setGameTableData] = useState({\r\n        columns: gameColumns,\r\n        rows: [\r\n        ]\r\n    });\r\n\r\n    useEffect(() =>{\r\n            if (games)\r\n            {\r\n                setGameTableData({\r\n                    columns: gameColumns,\r\n                    rows: games.map((game) => {\r\n                        return {\r\n                                name: <a className=\"dataTable\" href={window.location.origin + '/game/' + game.game.rawg_slug}>{game.game.rawg_name}</a>,\r\n                                name2: game.game.rawg_name,\r\n                                status: game.status,\r\n                                score: game.score,\r\n                                review: game.review,\r\n                                spent_time: parseFloat(game.spent_time),\r\n                                /*clickEvent: (e) => {\r\n                                    //window.open('/game/' + game.game.rawg_slug);\r\n                                    history.push('/game/' + game.game.rawg_slug);\r\n                                }*/\r\n                            }      \r\n                    })\r\n                });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [games]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            <p>Игр сыграно: {stats.games_count}, часов наиграно: {stats.games_total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={gameTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать игр на странице\"\r\n                searchLabel='Поиск'\r\n                className='dataTable'\r\n                />\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default GameBlock;\r\n","import React from \"react\";\r\n\r\nimport CardUser from '../Common/CardUser';\r\n\r\nfunction FriendBlock ( {users} ) {\r\n\r\n    return(\r\n        <div className=\"friendsBlock\">\r\n            { users.map((user) => <CardUser user={user} key={user.id}/>) }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default FriendBlock;\r\n","import React, { useEffect, useState} from \"react\";\r\n\r\nimport {\r\n    MDBDataTable\r\n} from \"mdbreact\";\r\n\r\nfunction MovieBlock ( {movies, stats} ) {\r\n\r\n    const movieColumns = [\r\n      {\r\n        label: 'Название',\r\n        field: 'name',\r\n        sort: 'disabled'\r\n      },\r\n      {\r\n        label: 'Статус',\r\n        field: 'status',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Оценка',\r\n        field: 'score',\r\n        sort: 'asc'\r\n      },\r\n      {\r\n        label: 'Отзыв',\r\n        field: 'review',\r\n        sort: 'asc'\r\n      }\r\n    ];\r\n\r\n  const [movieTableData, setMovieTableData] = useState({\r\n      columns: movieColumns,\r\n      rows: [\r\n      ]\r\n  });\r\n\r\n    useEffect(() =>{\r\n            if (movies)\r\n            {\r\n              setMovieTableData({\r\n                columns: movieColumns,\r\n                rows: movies.map((movie) => {\r\n                    return {\r\n                            name: <a className=\"dataTable\" href={window.location.origin + '/movie/' + movie.movie.tmdb_id}>{movie.movie.tmdb_name}</a>,\r\n                            name2: movie.movie.tmdb_name,\r\n                            status: movie.status,\r\n                            score: movie.score,\r\n                            review: movie.review,\r\n                            /*clickEvent: (e) => {\r\n                                //window.open('/game/' + game.game.rawg_slug);\r\n                                history.push('/movie/' + movie.movie.tmdb_id)\r\n                            }*/\r\n                        }      \r\n                  })\r\n              });\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [movies]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            <p>Фильмов посмотрено: {stats.movies_count}, часов просмотра: {stats.movies_total_spent_time}</p>  \r\n            <MDBDataTable\r\n                striped\r\n                bordered\r\n                small\r\n                data={movieTableData}\r\n                info={false}\r\n                barReverse={true}\r\n                noBottomColumns={true}\r\n                noRecordsFoundLabel=\"Ничего не найдено!\"\r\n                paginationLabel={[\"Предыдущая\", \"Следующая\"]}\r\n                entriesLabel=\"Показывать фильмов на странице\"\r\n                searchLabel='Поиск'\r\n                />\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default MovieBlock;\r\n","import React, { useEffect} from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport './style.css';\r\nimport Rating from \"react-rating\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\n\r\nfunction LogRow ( {log, showUsername} ) {\r\n    let history = useHistory();\r\n\r\n    useEffect(() =>{\r\n            \r\n        },\r\n        [log]\r\n    );\r\n\r\n    function translateActionType(action, actionResult){\r\n        switch (action) {\r\n            case 'score':\r\n                return 'оценил(а)';\r\n            case 'status':\r\n                return 'изменил(а) статус';\r\n            case 'review':\r\n                return 'оставил(а) отзыв на';\r\n            case 'spent_time':\r\n                return 'изменил(а) время прохождения';\r\n            case 'is_following':\r\n                if (actionResult === 'True')\r\n                    return 'подписан(а) на';\r\n                else\r\n                    return 'отписан(а) от';\r\n            default:\r\n                return action;\r\n        }\r\n    }\r\n\r\n    function translateType(type, actionType){\r\n        switch (type) {\r\n            case 'game':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'игру';\r\n                else\r\n                    return 'игры';\r\n            case 'movie':\r\n                if (actionType === 'score' || actionType === 'review')\r\n                    return 'фильм';\r\n                else\r\n                    return 'фильма';\r\n            case 'user':\r\n                return 'пользователя';\r\n            default:\r\n                return type;\r\n        }\r\n    }\r\n\r\n    function nameToLink(name, type, id){\r\n        switch (type){\r\n            case 'game':\r\n                return  <a href={window.location.origin + '/game/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/game/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'movie':\r\n                return  <a href={window.location.origin + '/movie/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/movie/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            case 'user':\r\n                return  <a href={window.location.origin + '/user/' + id} \r\n                            className=\"logLink\"\r\n                            onClick={(e) => { history.push('/user/' + id); e.preventDefault();}}>\r\n                                {name}\r\n                        </a>;\r\n            default:\r\n                return name;\r\n        }\r\n    }\r\n\r\n    function userToLink(username, userID){\r\n            return  <a href={window.location.origin + '/user/' + userID} \r\n                        className=\"logLink\"\r\n                        onClick={(e) => { history.push('/user/' + userID); e.preventDefault();}}>\r\n                            {username}\r\n                    </a>;\r\n    }\r\n\r\n    function actionResultToStr(actionType, actionResult){\r\n        switch (actionType){\r\n            case 'score':\r\n                return  <Rating stop={10}\r\n                            emptySymbol={<MDBIcon far icon=\"star\" size=\"1x\"/>}\r\n                            fullSymbol={[1,2,3,4,5,6,7,8,9,10].map(n => <MDBIcon icon=\"star\" size=\"1x\" title={n}/>)}\r\n                            initialRating={actionResult}\r\n                            readonly={true}\r\n                        />\r\n            case 'status':\r\n                return '\"' + actionResult + '\"';\r\n            case 'review':\r\n                return '\"' + actionResult + '\"';\r\n            case 'spent_time':\r\n                return actionResult + ' ' + intToHours(actionResult);\r\n            case 'is_following':\r\n                return '';\r\n            default:\r\n                return actionResult;\r\n        }\r\n    }\r\n\r\n    function parseDate(date){\r\n        let newDate = new Date(date);\r\n        return newDate.toLocaleTimeString(\"ru-RU\");\r\n    }\r\n\r\n    return(\r\n            <p className=\"logRow\">{parseDate(log.created)} {showUsername?userToLink(log.user, log.user_id):''} {translateActionType(log.action_type, log.action_result)} {translateType(log.type, log.action_type)} {nameToLink(log.target, log.type, log.target_id)}{log.type==='user'?'':':'} {actionResultToStr(log.action_type, log.action_result)}</p>\r\n    )\r\n}\r\n\r\nfunction intToHours(number){\r\n    if (11 <= number && number <= 14)\r\n        return 'часов'\r\n    else if (number % 10 === 1)\r\n        return 'час'\r\n    else if (2 <= number % 10 && number % 10 <= 4)\r\n        return 'часа'\r\n    else\r\n        return 'часов'\r\n}\r\n\r\nexport default LogRow;","import React, { useEffect, useState} from \"react\";\r\nimport {\r\n    MDBIcon\r\n} from \"mdbreact\";\r\nimport './style.css';\r\nimport LogRow from './LogRow';\r\n\r\nfunction UserLogBlock ( {logs, showUsername, onChangePage} ) {\r\n    const [logsByDay, setLogsByDay] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    useEffect(() =>{\r\n            setLogsByDay(groupLogsByDay(logs.log));\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [logs]\r\n    );\r\n\r\n    function groupLogsByDay(logs){\r\n        let newLogs = [];\r\n\r\n        for (let i in logs){\r\n            let date = new Date(logs[i].created);\r\n\r\n            if (newLogs.length === 0)\r\n                newLogs.push({\r\n                    date: date,\r\n                    logs: [logs[i]]\r\n                });\r\n            else if (date.getDay() === newLogs[newLogs.length - 1].date.getDay())\r\n                newLogs[newLogs.length - 1].logs.push(logs[i]);\r\n            else\r\n                newLogs.push({\r\n                    date: date,\r\n                    logs: [logs[i]]\r\n                });\r\n        }\r\n        return newLogs;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            { \r\n                logsByDay.map((dayLog) => \r\n                    <div key={dayLog.logs[0].id} className=\"logDay\">\r\n                        <h5 className='logDate'>\r\n                            {dayLog.date.toLocaleDateString(\"ru-RU\")}\r\n                        </h5>\r\n                        <div className='logRows'>\r\n                            { dayLog.logs.map((log) => <LogRow log={log} showUsername={showUsername} key={log.id}/>) }\r\n                        </div>\r\n                    </div>\r\n                )  \r\n            } \r\n            <button \r\n                className=\"logPaginationButton\" \r\n                disabled={!logs.has_next_page}\r\n                onClick={() => {\r\n                        if (logs.has_next_page){\r\n                            onChangePage(currentPage+1);\r\n                            setCurrentPage(currentPage+1);\r\n                        } \r\n                    }}\r\n                >\r\n                <MDBIcon icon=\"arrow-down\" />\r\n            </button> \r\n\r\n            <button \r\n                className=\"logPaginationButton\" \r\n                disabled={currentPage===1}\r\n                onClick={() => {\r\n                        if (currentPage>1){\r\n                            onChangePage(currentPage-1);\r\n                            setCurrentPage(currentPage-1);\r\n                        } \r\n                    }}\r\n                >\r\n                <MDBIcon icon=\"arrow-up\" />\r\n            </button>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default UserLogBlock;\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBContainer\r\n} from \"mdbreact\";\r\nimport './style.css';\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../../store/reducers';\r\nimport * as actions from '../../store/actions';\r\n\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport GameBlock from './GameBlock';\r\nimport FriendBlock from './FriendBlock';\r\nimport MovieBlock from './MovieBlock';\r\nimport UserLogBlock from './UserLogBlock';\r\nimport CategoriesTab from '../Common/CategoriesTab';\r\n\r\nconst LOG_ROWS_COUNT = 15; \r\n\r\n/**\r\n * Основная страница приложения\r\n */\r\nfunction UserPage ( { loggedIn, userIsLoading, getUserInfo, userInfo, currentUserInfo, setUserStatus, getUserLogs, userLogs, userLogsIsLoading,getUserFriendsLogs, userFriendsLogs, userFriendsLogsIsLoading}) \r\n{ \r\n    let { userID } = useParams();\r\n    const [activeCategory, setActiveCategory] = useState(\"Профиль\");\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            getUserInfo(userID);\r\n            getUserLogs(userID, 1, LOG_ROWS_COUNT);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[userID, getUserInfo, getUserLogs, getUserFriendsLogs]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            if (loggedIn)\r\n                getUserFriendsLogs(userID, 1, LOG_ROWS_COUNT);\r\n        },\r\n        // eslint-disable-next-line\r\n\t\t[loggedIn]\r\n    );\r\n\r\n    useEffect(\r\n\t\t() => {\r\n            document.title = 'Профиль ' + userInfo.username;\r\n\t\t},\r\n\t\t[userInfo]\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"bg searchBG\"/> \r\n            <LoadingOverlay\r\n                active={userIsLoading}\r\n                spinner\r\n                text='Загрузка...'\r\n                >\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                    <MDBCol className=\"userPage\"> \r\n                        <h1>Информация о пользователе {userInfo.username}</h1>\r\n                        <button \r\n                            hidden={currentUserInfo.username === userInfo.username}\r\n                            className='addFriendButton'\r\n                            onClick={ () => {\r\n                                setUserStatus({is_following: userInfo.is_followed?false:true}, userInfo.id);\r\n                            }}>\r\n                            {userInfo.is_followed?'Отписаться':'Подписаться'}\r\n                        </button>\r\n                        <CategoriesTab\r\n                            categories={['Профиль', 'Игры', 'Фильмы', 'Друзья']}\r\n                            activeColor='#7654de' \r\n                            onChangeCategory={(category) => { setActiveCategory(category) }}/>\r\n\r\n                            <div hidden={activeCategory!=='Профиль'}>\r\n                                <h4>Моя активность: </h4>\r\n                                <LoadingOverlay\r\n                                    active={userLogsIsLoading}\r\n                                    spinner\r\n                                    text='Загрузка активности...'\r\n                                    >\r\n                                    <UserLogBlock logs={userLogs} onChangePage={(pageNumber) => getUserLogs(userID, pageNumber, LOG_ROWS_COUNT)}/>\r\n                                </LoadingOverlay>\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Игры'}>\r\n                                <GameBlock games={userInfo.games} stats={userInfo.stats} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Фильмы'}>\r\n                                <MovieBlock movies={userInfo.movies} stats={userInfo.stats} />\r\n                            </div>\r\n                            <div hidden={activeCategory!=='Друзья'}>\r\n                                <FriendBlock users={userInfo.followed_users?userInfo.followed_users:[]} />\r\n                                <h4>Активность друзей: </h4>\r\n                                <LoadingOverlay\r\n                                    active={userFriendsLogsIsLoading}\r\n                                    spinner\r\n                                    text='Загрузка активности...'\r\n                                    >\r\n                                    <UserLogBlock logs={userFriendsLogs} onChangePage={(pageNumber) => getUserFriendsLogs(userID, pageNumber, LOG_ROWS_COUNT)} showUsername={true}/>\r\n                                </LoadingOverlay>\r\n                                \r\n                            </div>\r\n                    </MDBCol>\r\n                    <MDBCol md=\"0.5\"></MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n            </LoadingOverlay>\r\n        </div>\r\n    \t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    userIsLoading: selectors.getIsLoadingUserPageContent(state),\r\n    userInfo: selectors.getUserPageContent(state),\r\n    userLogs: selectors.getUserPageLogs(state),\r\n    userLogsIsLoading: selectors.getIsLoadingUserPageLogs(state),\r\n    userFriendsLogs: selectors.getUserPageFriendsLogs(state),\r\n    userFriendsLogsIsLoading: selectors.getIsLoadingUserPageFriendsLogs(state),\r\n    currentUserInfo: selectors.getUser(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n        openLoginForm: () => {\r\n            dispatch(actions.openLoginForm());\r\n        },\r\n        getUserInfo: (user_id) => {\r\n            dispatch(actions.requestUserPageContent(user_id));\r\n        },\r\n        setUserStatus: (is_following, userID) => {\r\n            dispatch(actions.setUserStatus(is_following, userID));\r\n        },\r\n        getUserLogs: (userID, page, resultsOnPage) => {\r\n            dispatch(actions.requestUserPageLogs(userID, page, resultsOnPage));\r\n        },\r\n        getUserFriendsLogs: (userID, page, resultsOnPage) => {\r\n            dispatch(actions.requestUserPageFriendsLogs(userID, page, resultsOnPage));\r\n        },\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage);","import React from \"react\";\r\nimport {\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nimport {\r\n\tMDBNavbar,\r\n    MDBNavItem,\r\n    MDBNavbarBrand,\r\n    MDBNavbarNav,\r\n    MDBNavLink,\r\n    MDBIcon,\r\n    MDBFormInline,\r\n    MDBDropdown,\r\n    MDBDropdownItem,\r\n    MDBDropdownMenu,\r\n    MDBDropdownToggle\r\n} from \"mdbreact\";\r\n\r\nimport { connect } from 'react-redux'; \r\nimport * as selectors from '../store/reducers';\r\nimport * as actions from '../store/actions';\r\n\r\nfunction Navbar( {loggedIn, onLoginClick, onLogoutClick, onRegistrationClick, user} ) {\r\n    let history = useHistory();\r\n\r\n    return(\r\n            <MDBNavbar style={{ backgroundColor: \"#4527a0\" }} dark expand=\"md\" fixed=\"top\">\r\n            <MDBNavbarBrand onClick={ (event) => {event.preventDefault(); history.push('/'); return false; }}>\r\n                <strong className=\"white-text\" style={{cursor: 'pointer'}}>Interests</strong>\r\n            </MDBNavbarBrand>\r\n            <MDBNavbarNav left>\r\n                \r\n            </MDBNavbarNav>\r\n\r\n            <MDBNavbarNav right>\r\n                <MDBNavItem>\r\n                    <MDBFormInline onSubmit={ (event) => {event.preventDefault(); history.push('/search/' + document.getElementById('searchInput').value); return false; }}>\r\n                        <div className=\"md-form my-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Найти\" aria-label=\"Найти\"\r\n                            id=\"searchInput\"/>\r\n                        </div>\r\n                    </MDBFormInline>\r\n                </MDBNavItem>\r\n\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onLoginClick} >\r\n                        <MDBIcon icon=\"sign-in-alt\" /> Войти\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem className=\"font-weight-bold\" hidden={loggedIn}>\r\n                    <MDBNavLink to=\"#\" onClick={onRegistrationClick} >\r\n                        <MDBIcon icon=\"user-plus\" /> Зарегистрироваться\r\n                    </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem hidden={!loggedIn} className=\"font-weight-bold\">\r\n                    <MDBDropdown>\r\n                        <MDBDropdownToggle nav caret>\r\n                        <span className=\"mr-2\">{user.username}</span>\r\n                        </MDBDropdownToggle>\r\n                        <MDBDropdownMenu>\r\n                            <MDBDropdownItem href={\"/user/\"+user.id}>Профиль</MDBDropdownItem>\r\n                            <MDBDropdownItem onClick={ onLogoutClick }>\r\n                                <MDBIcon icon=\"sign-out-alt\"/> Выйти\r\n                            </MDBDropdownItem>\r\n                        </MDBDropdownMenu>\r\n                    </MDBDropdown>\r\n                </MDBNavItem>\r\n            </MDBNavbarNav>\r\n        </MDBNavbar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loggedIn: selectors.getLoggedIn(state),\r\n    user: selectors.getUser(state)\r\n});\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonLoginClick: () => {\r\n\t\t\tdispatch(actions.openLoginForm());\r\n        },\r\n        onLogoutClick: () =>{\r\n            dispatch(actions.resetAuthorization());\r\n        },\r\n        onRegistrationClick: () =>{\r\n            dispatch(actions.openRegistrateForm());\r\n        }\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport HomePage from \"./components/HomePage\";\r\nimport GamePage from \"./components/GamePage/GamePage\";\r\nimport MoviePage from \"./components/MoviePage/MoviePage\";\r\nimport ShowPage from \"./components/ShowPage/ShowPage\";\r\nimport SearchPage from \"./components/SearchPage/SearchPage\";\r\nimport LoginForm from \"./components/Modals/LoginForm\";\r\nimport RegistrationForm from \"./components/Modals/RegistrationForm\";\r\nimport ResetPasswordForm from \"./components/Modals/ResetPasswordForm\";\r\nimport ConfirmPage from \"./components/ConfirmPage\";\r\nimport ConfirmPasswordPage from \"./components/ConfirmPasswordPage\";\r\nimport UserPage from \"./components/UserPage/UserPage\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar/>\r\n        <div className=\"navbar\"></div>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route exact path=\"/game/:id\" component={GamePage} />\r\n            <Route exact path=\"/movie/:id\" component={MoviePage} />\r\n            <Route exact path=\"/show/:id\" component={ShowPage} />\r\n            <Route exact path=\"/search/:query\" component={SearchPage} />\r\n            <Route exact path=\"/confirm/\" component={ConfirmPage} />\r\n            <Route exact path=\"/confirm_password/\" component={ConfirmPasswordPage} />\r\n            <Route exact path=\"/user/:userID\" component={UserPage} />\r\n            <Route render={function () { return <h1>Not Found</h1>; }} />\r\n            \r\n        </Switch>\r\n      <ToastContainer position=\"top-center\" hideProgressBar newestOnTop closeOnClick/>\r\n      <LoginForm/>\r\n      <RegistrationForm/>\r\n      <ResetPasswordForm/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//confirm_password_reset\r\nexport default Routes;","import React, {useEffect} from \"react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { connect } from 'react-redux'; \r\nimport Routes from \"./Routes\";\r\nimport * as actions from \"./store/actions\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App({onLoad}) {\r\n\r\n  useEffect(\r\n    () => {\r\n        onLoad();\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"flyout\">\r\n        <main>\r\n          <Routes />\r\n        </main>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n    onLoad: () => {\r\n      dispatch(actions.checkAuthorization());\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore, \r\n  applyMiddleware, \r\n  //combineReducers,\r\n   compose } from 'redux';\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './store/reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk) ) );\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\nexport default store;\r\n\r\n"],"sourceRoot":""}